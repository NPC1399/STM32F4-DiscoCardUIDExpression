
stm32f4displaySubscriber.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071ac  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024dc  08007358  08007358  00017358  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009834  08009834  00019834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800983c  0800983c  0001983c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009840  08009840  00019840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000dc  20000000  08009844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000200dc  2**0
                  CONTENTS
  8 .bss          00000d10  200000dc  200000dc  000200dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000dec  20000dec  000200dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003571f  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000068ea  00000000  00000000  0005582b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000173ad  00000000  00000000  0005c115  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001be8  00000000  00000000  000734c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000025e8  00000000  00000000  000750b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000f591  00000000  00000000  00077698  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00009e8b  00000000  00000000  00086c29  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00090ab4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005560  00000000  00000000  00090b30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000dc 	.word	0x200000dc
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007340 	.word	0x08007340

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000e0 	.word	0x200000e0
 80001e8:	08007340 	.word	0x08007340

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b97a 	b.w	8000508 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	468c      	mov	ip, r1
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	9e08      	ldr	r6, [sp, #32]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d151      	bne.n	80002e0 <__udivmoddi4+0xb4>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d96d      	bls.n	800031e <__udivmoddi4+0xf2>
 8000242:	fab2 fe82 	clz	lr, r2
 8000246:	f1be 0f00 	cmp.w	lr, #0
 800024a:	d00b      	beq.n	8000264 <__udivmoddi4+0x38>
 800024c:	f1ce 0c20 	rsb	ip, lr, #32
 8000250:	fa01 f50e 	lsl.w	r5, r1, lr
 8000254:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000258:	fa02 f70e 	lsl.w	r7, r2, lr
 800025c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000260:	fa00 f40e 	lsl.w	r4, r0, lr
 8000264:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000268:	0c25      	lsrs	r5, r4, #16
 800026a:	fbbc f8fa 	udiv	r8, ip, sl
 800026e:	fa1f f987 	uxth.w	r9, r7
 8000272:	fb0a cc18 	mls	ip, sl, r8, ip
 8000276:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800027a:	fb08 f309 	mul.w	r3, r8, r9
 800027e:	42ab      	cmp	r3, r5
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x6c>
 8000282:	19ed      	adds	r5, r5, r7
 8000284:	f108 32ff 	add.w	r2, r8, #4294967295
 8000288:	f080 8123 	bcs.w	80004d2 <__udivmoddi4+0x2a6>
 800028c:	42ab      	cmp	r3, r5
 800028e:	f240 8120 	bls.w	80004d2 <__udivmoddi4+0x2a6>
 8000292:	f1a8 0802 	sub.w	r8, r8, #2
 8000296:	443d      	add	r5, r7
 8000298:	1aed      	subs	r5, r5, r3
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a0:	fb0a 5510 	mls	r5, sl, r0, r5
 80002a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a8:	fb00 f909 	mul.w	r9, r0, r9
 80002ac:	45a1      	cmp	r9, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x98>
 80002b0:	19e4      	adds	r4, r4, r7
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 810a 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80002ba:	45a1      	cmp	r9, r4
 80002bc:	f240 8107 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	eba4 0409 	sub.w	r4, r4, r9
 80002c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002cc:	2100      	movs	r1, #0
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d061      	beq.n	8000396 <__udivmoddi4+0x16a>
 80002d2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002d6:	2300      	movs	r3, #0
 80002d8:	6034      	str	r4, [r6, #0]
 80002da:	6073      	str	r3, [r6, #4]
 80002dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xc8>
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d054      	beq.n	8000392 <__udivmoddi4+0x166>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	f040 808e 	bne.w	800041a <__udivmoddi4+0x1ee>
 80002fe:	42ab      	cmp	r3, r5
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xdc>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2d0>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb65 0503 	sbc.w	r5, r5, r3
 800030e:	2001      	movs	r0, #1
 8000310:	46ac      	mov	ip, r5
 8000312:	2e00      	cmp	r6, #0
 8000314:	d03f      	beq.n	8000396 <__udivmoddi4+0x16a>
 8000316:	e886 1010 	stmia.w	r6, {r4, ip}
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b912      	cbnz	r2, 8000326 <__udivmoddi4+0xfa>
 8000320:	2701      	movs	r7, #1
 8000322:	fbb7 f7f2 	udiv	r7, r7, r2
 8000326:	fab7 fe87 	clz	lr, r7
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d134      	bne.n	800039a <__udivmoddi4+0x16e>
 8000330:	1beb      	subs	r3, r5, r7
 8000332:	0c3a      	lsrs	r2, r7, #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb3 f8f2 	udiv	r8, r3, r2
 800033e:	0c25      	lsrs	r5, r4, #16
 8000340:	fb02 3318 	mls	r3, r2, r8, r3
 8000344:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000348:	fb0c f308 	mul.w	r3, ip, r8
 800034c:	42ab      	cmp	r3, r5
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x134>
 8000350:	19ed      	adds	r5, r5, r7
 8000352:	f108 30ff 	add.w	r0, r8, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x132>
 8000358:	42ab      	cmp	r3, r5
 800035a:	f200 80d1 	bhi.w	8000500 <__udivmoddi4+0x2d4>
 800035e:	4680      	mov	r8, r0
 8000360:	1aed      	subs	r5, r5, r3
 8000362:	b2a3      	uxth	r3, r4
 8000364:	fbb5 f0f2 	udiv	r0, r5, r2
 8000368:	fb02 5510 	mls	r5, r2, r0, r5
 800036c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000370:	fb0c fc00 	mul.w	ip, ip, r0
 8000374:	45a4      	cmp	ip, r4
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x15c>
 8000378:	19e4      	adds	r4, r4, r7
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x15a>
 8000380:	45a4      	cmp	ip, r4
 8000382:	f200 80b8 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000386:	4618      	mov	r0, r3
 8000388:	eba4 040c 	sub.w	r4, r4, ip
 800038c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000390:	e79d      	b.n	80002ce <__udivmoddi4+0xa2>
 8000392:	4631      	mov	r1, r6
 8000394:	4630      	mov	r0, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	f1ce 0420 	rsb	r4, lr, #32
 800039e:	fa05 f30e 	lsl.w	r3, r5, lr
 80003a2:	fa07 f70e 	lsl.w	r7, r7, lr
 80003a6:	fa20 f804 	lsr.w	r8, r0, r4
 80003aa:	0c3a      	lsrs	r2, r7, #16
 80003ac:	fa25 f404 	lsr.w	r4, r5, r4
 80003b0:	ea48 0803 	orr.w	r8, r8, r3
 80003b4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003b8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003bc:	fb02 4411 	mls	r4, r2, r1, r4
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003c8:	fb01 f30c 	mul.w	r3, r1, ip
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	fa00 f40e 	lsl.w	r4, r0, lr
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1bc>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003da:	f080 808a 	bcs.w	80004f2 <__udivmoddi4+0x2c6>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	f240 8087 	bls.w	80004f2 <__udivmoddi4+0x2c6>
 80003e4:	3902      	subs	r1, #2
 80003e6:	443d      	add	r5, r7
 80003e8:	1aeb      	subs	r3, r5, r3
 80003ea:	fa1f f588 	uxth.w	r5, r8
 80003ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80003f2:	fb02 3310 	mls	r3, r2, r0, r3
 80003f6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fa:	fb00 f30c 	mul.w	r3, r0, ip
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1e6>
 8000402:	19ed      	adds	r5, r5, r7
 8000404:	f100 38ff 	add.w	r8, r0, #4294967295
 8000408:	d26f      	bcs.n	80004ea <__udivmoddi4+0x2be>
 800040a:	42ab      	cmp	r3, r5
 800040c:	d96d      	bls.n	80004ea <__udivmoddi4+0x2be>
 800040e:	3802      	subs	r0, #2
 8000410:	443d      	add	r5, r7
 8000412:	1aeb      	subs	r3, r5, r3
 8000414:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000418:	e78f      	b.n	800033a <__udivmoddi4+0x10e>
 800041a:	f1c1 0720 	rsb	r7, r1, #32
 800041e:	fa22 f807 	lsr.w	r8, r2, r7
 8000422:	408b      	lsls	r3, r1
 8000424:	fa05 f401 	lsl.w	r4, r5, r1
 8000428:	ea48 0303 	orr.w	r3, r8, r3
 800042c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000430:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000434:	40fd      	lsrs	r5, r7
 8000436:	ea4e 0e04 	orr.w	lr, lr, r4
 800043a:	fbb5 f9fc 	udiv	r9, r5, ip
 800043e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000442:	fb0c 5519 	mls	r5, ip, r9, r5
 8000446:	fa1f f883 	uxth.w	r8, r3
 800044a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800044e:	fb09 f408 	mul.w	r4, r9, r8
 8000452:	42ac      	cmp	r4, r5
 8000454:	fa02 f201 	lsl.w	r2, r2, r1
 8000458:	fa00 fa01 	lsl.w	sl, r0, r1
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x244>
 800045e:	18ed      	adds	r5, r5, r3
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d243      	bcs.n	80004ee <__udivmoddi4+0x2c2>
 8000466:	42ac      	cmp	r4, r5
 8000468:	d941      	bls.n	80004ee <__udivmoddi4+0x2c2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	441d      	add	r5, r3
 8000470:	1b2d      	subs	r5, r5, r4
 8000472:	fa1f fe8e 	uxth.w	lr, lr
 8000476:	fbb5 f0fc 	udiv	r0, r5, ip
 800047a:	fb0c 5510 	mls	r5, ip, r0, r5
 800047e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45a0      	cmp	r8, r4
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x26e>
 800048a:	18e4      	adds	r4, r4, r3
 800048c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000490:	d229      	bcs.n	80004e6 <__udivmoddi4+0x2ba>
 8000492:	45a0      	cmp	r8, r4
 8000494:	d927      	bls.n	80004e6 <__udivmoddi4+0x2ba>
 8000496:	3802      	subs	r0, #2
 8000498:	441c      	add	r4, r3
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba4 0408 	sub.w	r4, r4, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	464d      	mov	r5, r9
 80004ac:	d315      	bcc.n	80004da <__udivmoddi4+0x2ae>
 80004ae:	d012      	beq.n	80004d6 <__udivmoddi4+0x2aa>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x29c>
 80004b2:	ebba 030e 	subs.w	r3, sl, lr
 80004b6:	eb64 0405 	sbc.w	r4, r4, r5
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40cb      	lsrs	r3, r1
 80004c0:	431f      	orrs	r7, r3
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	6037      	str	r7, [r6, #0]
 80004c6:	6074      	str	r4, [r6, #4]
 80004c8:	2100      	movs	r1, #0
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	4618      	mov	r0, r3
 80004d0:	e6f8      	b.n	80002c4 <__udivmoddi4+0x98>
 80004d2:	4690      	mov	r8, r2
 80004d4:	e6e0      	b.n	8000298 <__udivmoddi4+0x6c>
 80004d6:	45c2      	cmp	sl, r8
 80004d8:	d2ea      	bcs.n	80004b0 <__udivmoddi4+0x284>
 80004da:	ebb8 0e02 	subs.w	lr, r8, r2
 80004de:	eb69 0503 	sbc.w	r5, r9, r3
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7e4      	b.n	80004b0 <__udivmoddi4+0x284>
 80004e6:	4628      	mov	r0, r5
 80004e8:	e7d7      	b.n	800049a <__udivmoddi4+0x26e>
 80004ea:	4640      	mov	r0, r8
 80004ec:	e791      	b.n	8000412 <__udivmoddi4+0x1e6>
 80004ee:	4681      	mov	r9, r0
 80004f0:	e7be      	b.n	8000470 <__udivmoddi4+0x244>
 80004f2:	4601      	mov	r1, r0
 80004f4:	e778      	b.n	80003e8 <__udivmoddi4+0x1bc>
 80004f6:	3802      	subs	r0, #2
 80004f8:	443c      	add	r4, r7
 80004fa:	e745      	b.n	8000388 <__udivmoddi4+0x15c>
 80004fc:	4608      	mov	r0, r1
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xe6>
 8000500:	f1a8 0802 	sub.w	r8, r8, #2
 8000504:	443d      	add	r5, r7
 8000506:	e72b      	b.n	8000360 <__udivmoddi4+0x134>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 800050c:	20f0      	movs	r0, #240	; 0xf0
 800050e:	4770      	bx	lr

08000510 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8000510:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000514:	4770      	bx	lr

08000516 <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 8000516:	2029      	movs	r0, #41	; 0x29
 8000518:	f000 ba32 	b.w	8000980 <LCD_IO_WriteReg>

0800051c <ili9341_DisplayOff>:
 800051c:	2028      	movs	r0, #40	; 0x28
 800051e:	f000 ba2f 	b.w	8000980 <LCD_IO_WriteReg>

08000522 <ili9341_Init>:
{
 8000522:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8000524:	f000 f9b4 	bl	8000890 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8000528:	20ca      	movs	r0, #202	; 0xca
 800052a:	f000 fa29 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800052e:	20c3      	movs	r0, #195	; 0xc3
 8000530:	f000 fa0a 	bl	8000948 <LCD_IO_WriteData>
 8000534:	2008      	movs	r0, #8
 8000536:	f000 fa07 	bl	8000948 <LCD_IO_WriteData>
 800053a:	2050      	movs	r0, #80	; 0x50
 800053c:	f000 fa04 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000540:	20cf      	movs	r0, #207	; 0xcf
 8000542:	f000 fa1d 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000546:	2000      	movs	r0, #0
 8000548:	f000 f9fe 	bl	8000948 <LCD_IO_WriteData>
 800054c:	20c1      	movs	r0, #193	; 0xc1
 800054e:	f000 f9fb 	bl	8000948 <LCD_IO_WriteData>
 8000552:	2030      	movs	r0, #48	; 0x30
 8000554:	f000 f9f8 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000558:	20ed      	movs	r0, #237	; 0xed
 800055a:	f000 fa11 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800055e:	2064      	movs	r0, #100	; 0x64
 8000560:	f000 f9f2 	bl	8000948 <LCD_IO_WriteData>
 8000564:	2003      	movs	r0, #3
 8000566:	f000 f9ef 	bl	8000948 <LCD_IO_WriteData>
 800056a:	2012      	movs	r0, #18
 800056c:	f000 f9ec 	bl	8000948 <LCD_IO_WriteData>
 8000570:	2081      	movs	r0, #129	; 0x81
 8000572:	f000 f9e9 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000576:	20e8      	movs	r0, #232	; 0xe8
 8000578:	f000 fa02 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800057c:	2085      	movs	r0, #133	; 0x85
 800057e:	f000 f9e3 	bl	8000948 <LCD_IO_WriteData>
 8000582:	2000      	movs	r0, #0
 8000584:	f000 f9e0 	bl	8000948 <LCD_IO_WriteData>
 8000588:	2078      	movs	r0, #120	; 0x78
 800058a:	f000 f9dd 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800058e:	20cb      	movs	r0, #203	; 0xcb
 8000590:	f000 f9f6 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000594:	2039      	movs	r0, #57	; 0x39
 8000596:	f000 f9d7 	bl	8000948 <LCD_IO_WriteData>
 800059a:	202c      	movs	r0, #44	; 0x2c
 800059c:	f000 f9d4 	bl	8000948 <LCD_IO_WriteData>
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 f9d1 	bl	8000948 <LCD_IO_WriteData>
 80005a6:	2034      	movs	r0, #52	; 0x34
 80005a8:	f000 f9ce 	bl	8000948 <LCD_IO_WriteData>
 80005ac:	2002      	movs	r0, #2
 80005ae:	f000 f9cb 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005b2:	20f7      	movs	r0, #247	; 0xf7
 80005b4:	f000 f9e4 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005b8:	2020      	movs	r0, #32
 80005ba:	f000 f9c5 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005be:	20ea      	movs	r0, #234	; 0xea
 80005c0:	f000 f9de 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 f9bf 	bl	8000948 <LCD_IO_WriteData>
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 f9bc 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005d0:	20b1      	movs	r0, #177	; 0xb1
 80005d2:	f000 f9d5 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 f9b6 	bl	8000948 <LCD_IO_WriteData>
 80005dc:	201b      	movs	r0, #27
 80005de:	f000 f9b3 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005e2:	20b6      	movs	r0, #182	; 0xb6
 80005e4:	f000 f9cc 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005e8:	200a      	movs	r0, #10
 80005ea:	f000 f9ad 	bl	8000948 <LCD_IO_WriteData>
 80005ee:	20a2      	movs	r0, #162	; 0xa2
 80005f0:	f000 f9aa 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005f4:	20c0      	movs	r0, #192	; 0xc0
 80005f6:	f000 f9c3 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005fa:	2010      	movs	r0, #16
 80005fc:	f000 f9a4 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000600:	20c1      	movs	r0, #193	; 0xc1
 8000602:	f000 f9bd 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000606:	2010      	movs	r0, #16
 8000608:	f000 f99e 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800060c:	20c5      	movs	r0, #197	; 0xc5
 800060e:	f000 f9b7 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000612:	2045      	movs	r0, #69	; 0x45
 8000614:	f000 f998 	bl	8000948 <LCD_IO_WriteData>
 8000618:	2015      	movs	r0, #21
 800061a:	f000 f995 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800061e:	20c7      	movs	r0, #199	; 0xc7
 8000620:	f000 f9ae 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000624:	2090      	movs	r0, #144	; 0x90
 8000626:	f000 f98f 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800062a:	2036      	movs	r0, #54	; 0x36
 800062c:	f000 f9a8 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000630:	20c8      	movs	r0, #200	; 0xc8
 8000632:	f000 f989 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000636:	20f2      	movs	r0, #242	; 0xf2
 8000638:	f000 f9a2 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800063c:	2000      	movs	r0, #0
 800063e:	f000 f983 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000642:	20b0      	movs	r0, #176	; 0xb0
 8000644:	f000 f99c 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000648:	20c2      	movs	r0, #194	; 0xc2
 800064a:	f000 f97d 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800064e:	20b6      	movs	r0, #182	; 0xb6
 8000650:	f000 f996 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000654:	200a      	movs	r0, #10
 8000656:	f000 f977 	bl	8000948 <LCD_IO_WriteData>
 800065a:	20a7      	movs	r0, #167	; 0xa7
 800065c:	f000 f974 	bl	8000948 <LCD_IO_WriteData>
 8000660:	2027      	movs	r0, #39	; 0x27
 8000662:	f000 f971 	bl	8000948 <LCD_IO_WriteData>
 8000666:	2004      	movs	r0, #4
 8000668:	f000 f96e 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800066c:	202a      	movs	r0, #42	; 0x2a
 800066e:	f000 f987 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000672:	2000      	movs	r0, #0
 8000674:	f000 f968 	bl	8000948 <LCD_IO_WriteData>
 8000678:	2000      	movs	r0, #0
 800067a:	f000 f965 	bl	8000948 <LCD_IO_WriteData>
 800067e:	2000      	movs	r0, #0
 8000680:	f000 f962 	bl	8000948 <LCD_IO_WriteData>
 8000684:	20ef      	movs	r0, #239	; 0xef
 8000686:	f000 f95f 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800068a:	202b      	movs	r0, #43	; 0x2b
 800068c:	f000 f978 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000690:	2000      	movs	r0, #0
 8000692:	f000 f959 	bl	8000948 <LCD_IO_WriteData>
 8000696:	2000      	movs	r0, #0
 8000698:	f000 f956 	bl	8000948 <LCD_IO_WriteData>
 800069c:	2001      	movs	r0, #1
 800069e:	f000 f953 	bl	8000948 <LCD_IO_WriteData>
 80006a2:	203f      	movs	r0, #63	; 0x3f
 80006a4:	f000 f950 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006a8:	20f6      	movs	r0, #246	; 0xf6
 80006aa:	f000 f969 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f000 f94a 	bl	8000948 <LCD_IO_WriteData>
 80006b4:	2000      	movs	r0, #0
 80006b6:	f000 f947 	bl	8000948 <LCD_IO_WriteData>
 80006ba:	2006      	movs	r0, #6
 80006bc:	f000 f944 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006c0:	202c      	movs	r0, #44	; 0x2c
 80006c2:	f000 f95d 	bl	8000980 <LCD_IO_WriteReg>
  LCD_Delay(200);
 80006c6:	20c8      	movs	r0, #200	; 0xc8
 80006c8:	f000 f9ac 	bl	8000a24 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80006cc:	2026      	movs	r0, #38	; 0x26
 80006ce:	f000 f957 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 f938 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006d8:	20e0      	movs	r0, #224	; 0xe0
 80006da:	f000 f951 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006de:	200f      	movs	r0, #15
 80006e0:	f000 f932 	bl	8000948 <LCD_IO_WriteData>
 80006e4:	2029      	movs	r0, #41	; 0x29
 80006e6:	f000 f92f 	bl	8000948 <LCD_IO_WriteData>
 80006ea:	2024      	movs	r0, #36	; 0x24
 80006ec:	f000 f92c 	bl	8000948 <LCD_IO_WriteData>
 80006f0:	200c      	movs	r0, #12
 80006f2:	f000 f929 	bl	8000948 <LCD_IO_WriteData>
 80006f6:	200e      	movs	r0, #14
 80006f8:	f000 f926 	bl	8000948 <LCD_IO_WriteData>
 80006fc:	2009      	movs	r0, #9
 80006fe:	f000 f923 	bl	8000948 <LCD_IO_WriteData>
 8000702:	204e      	movs	r0, #78	; 0x4e
 8000704:	f000 f920 	bl	8000948 <LCD_IO_WriteData>
 8000708:	2078      	movs	r0, #120	; 0x78
 800070a:	f000 f91d 	bl	8000948 <LCD_IO_WriteData>
 800070e:	203c      	movs	r0, #60	; 0x3c
 8000710:	f000 f91a 	bl	8000948 <LCD_IO_WriteData>
 8000714:	2009      	movs	r0, #9
 8000716:	f000 f917 	bl	8000948 <LCD_IO_WriteData>
 800071a:	2013      	movs	r0, #19
 800071c:	f000 f914 	bl	8000948 <LCD_IO_WriteData>
 8000720:	2005      	movs	r0, #5
 8000722:	f000 f911 	bl	8000948 <LCD_IO_WriteData>
 8000726:	2017      	movs	r0, #23
 8000728:	f000 f90e 	bl	8000948 <LCD_IO_WriteData>
 800072c:	2011      	movs	r0, #17
 800072e:	f000 f90b 	bl	8000948 <LCD_IO_WriteData>
 8000732:	2000      	movs	r0, #0
 8000734:	f000 f908 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000738:	20e1      	movs	r0, #225	; 0xe1
 800073a:	f000 f921 	bl	8000980 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800073e:	2000      	movs	r0, #0
 8000740:	f000 f902 	bl	8000948 <LCD_IO_WriteData>
 8000744:	2016      	movs	r0, #22
 8000746:	f000 f8ff 	bl	8000948 <LCD_IO_WriteData>
 800074a:	201b      	movs	r0, #27
 800074c:	f000 f8fc 	bl	8000948 <LCD_IO_WriteData>
 8000750:	2004      	movs	r0, #4
 8000752:	f000 f8f9 	bl	8000948 <LCD_IO_WriteData>
 8000756:	2011      	movs	r0, #17
 8000758:	f000 f8f6 	bl	8000948 <LCD_IO_WriteData>
 800075c:	2007      	movs	r0, #7
 800075e:	f000 f8f3 	bl	8000948 <LCD_IO_WriteData>
 8000762:	2031      	movs	r0, #49	; 0x31
 8000764:	f000 f8f0 	bl	8000948 <LCD_IO_WriteData>
 8000768:	2033      	movs	r0, #51	; 0x33
 800076a:	f000 f8ed 	bl	8000948 <LCD_IO_WriteData>
 800076e:	2042      	movs	r0, #66	; 0x42
 8000770:	f000 f8ea 	bl	8000948 <LCD_IO_WriteData>
 8000774:	2005      	movs	r0, #5
 8000776:	f000 f8e7 	bl	8000948 <LCD_IO_WriteData>
 800077a:	200c      	movs	r0, #12
 800077c:	f000 f8e4 	bl	8000948 <LCD_IO_WriteData>
 8000780:	200a      	movs	r0, #10
 8000782:	f000 f8e1 	bl	8000948 <LCD_IO_WriteData>
 8000786:	2028      	movs	r0, #40	; 0x28
 8000788:	f000 f8de 	bl	8000948 <LCD_IO_WriteData>
 800078c:	202f      	movs	r0, #47	; 0x2f
 800078e:	f000 f8db 	bl	8000948 <LCD_IO_WriteData>
 8000792:	200f      	movs	r0, #15
 8000794:	f000 f8d8 	bl	8000948 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000798:	2011      	movs	r0, #17
 800079a:	f000 f8f1 	bl	8000980 <LCD_IO_WriteReg>
  LCD_Delay(200);
 800079e:	20c8      	movs	r0, #200	; 0xc8
 80007a0:	f000 f940 	bl	8000a24 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80007a4:	2029      	movs	r0, #41	; 0x29
 80007a6:	f000 f8eb 	bl	8000980 <LCD_IO_WriteReg>
 80007aa:	202c      	movs	r0, #44	; 0x2c
}
 80007ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 80007b0:	f000 b8e6 	b.w	8000980 <LCD_IO_WriteReg>

080007b4 <ili9341_ReadID>:
{
 80007b4:	b508      	push	{r3, lr}
  LCD_IO_Init();
 80007b6:	f000 f86b 	bl	8000890 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80007ba:	2103      	movs	r1, #3
 80007bc:	20d3      	movs	r0, #211	; 0xd3
 80007be:	f000 f8fb 	bl	80009b8 <LCD_IO_ReadData>
}
 80007c2:	b280      	uxth	r0, r0
 80007c4:	bd08      	pop	{r3, pc}
	...

080007c8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80007c8:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80007ca:	4c21      	ldr	r4, [pc, #132]	; (8000850 <SPIx_Init+0x88>)
{
 80007cc:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80007ce:	4620      	mov	r0, r4
 80007d0:	f003 f814 	bl	80037fc <HAL_SPI_GetState>
 80007d4:	2800      	cmp	r0, #0
 80007d6:	d138      	bne.n	800084a <SPIx_Init+0x82>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <SPIx_Init+0x8c>)
 80007da:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007dc:	2318      	movs	r3, #24
 80007de:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 80007e0:	2307      	movs	r3, #7
 80007e2:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80007e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e8:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80007ea:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007ee:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <SPIx_Init+0x90>)
 80007f2:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80007f4:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80007f6:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80007f8:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80007fa:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80007fc:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80007fe:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000800:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 8000802:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000804:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000808:	645a      	str	r2, [r3, #68]	; 0x44
 800080a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800080c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8000810:	9201      	str	r2, [sp, #4]
 8000812:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000814:	9002      	str	r0, [sp, #8]
 8000816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000818:	4810      	ldr	r0, [pc, #64]	; (800085c <SPIx_Init+0x94>)
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800081a:	f042 0220 	orr.w	r2, r2, #32
 800081e:	631a      	str	r2, [r3, #48]	; 0x30
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0320 	and.w	r3, r3, #32
 8000826:	9302      	str	r3, [sp, #8]
 8000828:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800082a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800082e:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000834:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000836:	2301      	movs	r3, #1
 8000838:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800083a:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800083c:	2305      	movs	r3, #5
 800083e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000840:	f001 f85a 	bl	80018f8 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 8000844:	4620      	mov	r0, r4
 8000846:	f002 fd57 	bl	80032f8 <HAL_SPI_Init>
}
 800084a:	b008      	add	sp, #32
 800084c:	bd10      	pop	{r4, pc}
 800084e:	bf00      	nop
 8000850:	200000fc 	.word	0x200000fc
 8000854:	40015000 	.word	0x40015000
 8000858:	40023800 	.word	0x40023800
 800085c:	40021400 	.word	0x40021400

08000860 <SPIx_Write>:
{
 8000860:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <SPIx_Write+0x28>)
{
 8000864:	a902      	add	r1, sp, #8
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000866:	681b      	ldr	r3, [r3, #0]
{
 8000868:	f821 0d02 	strh.w	r0, [r1, #-2]!
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800086c:	2201      	movs	r2, #1
 800086e:	4807      	ldr	r0, [pc, #28]	; (800088c <SPIx_Write+0x2c>)
 8000870:	f002 fd95 	bl	800339e <HAL_SPI_Transmit>
  if(status != HAL_OK)
 8000874:	b120      	cbz	r0, 8000880 <SPIx_Write+0x20>
  HAL_SPI_DeInit(&SpiHandle);
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <SPIx_Write+0x2c>)
 8000878:	f002 fd7b 	bl	8003372 <HAL_SPI_DeInit>
  SPIx_Init();
 800087c:	f7ff ffa4 	bl	80007c8 <SPIx_Init>
}
 8000880:	b003      	add	sp, #12
 8000882:	f85d fb04 	ldr.w	pc, [sp], #4
 8000886:	bf00      	nop
 8000888:	20000038 	.word	0x20000038
 800088c:	200000fc 	.word	0x200000fc

08000890 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000890:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000892:	4b29      	ldr	r3, [pc, #164]	; (8000938 <LCD_IO_Init+0xa8>)
 8000894:	781d      	ldrb	r5, [r3, #0]
{
 8000896:	b089      	sub	sp, #36	; 0x24
  if(Is_LCD_IO_Initialized == 0)
 8000898:	2d00      	cmp	r5, #0
 800089a:	d14a      	bne.n	8000932 <LCD_IO_Init+0xa2>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800089c:	4c27      	ldr	r4, [pc, #156]	; (800093c <LCD_IO_Init+0xac>)
 800089e:	9500      	str	r5, [sp, #0]
    Is_LCD_IO_Initialized = 1; 
 80008a0:	2601      	movs	r6, #1
 80008a2:	701e      	strb	r6, [r3, #0]
    LCD_WRX_GPIO_CLK_ENABLE();
 80008a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80008a6:	4826      	ldr	r0, [pc, #152]	; (8000940 <LCD_IO_Init+0xb0>)
    LCD_WRX_GPIO_CLK_ENABLE();
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6323      	str	r3, [r4, #48]	; 0x30
 80008ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80008b0:	9604      	str	r6, [sp, #16]
    LCD_WRX_GPIO_CLK_ENABLE();
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80008b8:	2702      	movs	r7, #2
    LCD_WRX_GPIO_CLK_ENABLE();
 80008ba:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80008bc:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80008be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80008c2:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80008c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80008c6:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80008c8:	f001 f816 	bl	80018f8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80008cc:	9501      	str	r5, [sp, #4]
 80008ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80008d0:	481b      	ldr	r0, [pc, #108]	; (8000940 <LCD_IO_Init+0xb0>)
    LCD_RDX_GPIO_CLK_ENABLE();
 80008d2:	f043 0308 	orr.w	r3, r3, #8
 80008d6:	6323      	str	r3, [r4, #48]	; 0x30
 80008d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80008da:	9604      	str	r6, [sp, #16]
    LCD_RDX_GPIO_CLK_ENABLE();
 80008dc:	f003 0308 	and.w	r3, r3, #8
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80008e4:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80008e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80008ea:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80008ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80008ee:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80008f0:	f001 f802 	bl	80018f8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80008f4:	9502      	str	r5, [sp, #8]
 80008f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80008f8:	4812      	ldr	r0, [pc, #72]	; (8000944 <LCD_IO_Init+0xb4>)
    LCD_NCS_GPIO_CLK_ENABLE();
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	6323      	str	r3, [r4, #48]	; 0x30
 8000900:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000902:	9604      	str	r6, [sp, #16]
    LCD_NCS_GPIO_CLK_ENABLE();
 8000904:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000908:	2404      	movs	r4, #4
    LCD_NCS_GPIO_CLK_ENABLE();
 800090a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800090c:	a903      	add	r1, sp, #12
    LCD_NCS_GPIO_CLK_ENABLE();
 800090e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000910:	9403      	str	r4, [sp, #12]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000912:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000914:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000916:	f000 ffef 	bl	80018f8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800091a:	462a      	mov	r2, r5
 800091c:	4621      	mov	r1, r4
 800091e:	4809      	ldr	r0, [pc, #36]	; (8000944 <LCD_IO_Init+0xb4>)
 8000920:	f001 f970 	bl	8001c04 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000924:	4632      	mov	r2, r6
 8000926:	4621      	mov	r1, r4
 8000928:	4806      	ldr	r0, [pc, #24]	; (8000944 <LCD_IO_Init+0xb4>)
 800092a:	f001 f96b 	bl	8001c04 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800092e:	f7ff ff4b 	bl	80007c8 <SPIx_Init>
  }
}
 8000932:	b009      	add	sp, #36	; 0x24
 8000934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000936:	bf00      	nop
 8000938:	200000f8 	.word	0x200000f8
 800093c:	40023800 	.word	0x40023800
 8000940:	40020c00 	.word	0x40020c00
 8000944:	40020800 	.word	0x40020800

08000948 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000948:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800094a:	4c0b      	ldr	r4, [pc, #44]	; (8000978 <LCD_IO_WriteData+0x30>)
{
 800094c:	4605      	mov	r5, r0
  LCD_WRX_HIGH();
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000954:	4809      	ldr	r0, [pc, #36]	; (800097c <LCD_IO_WriteData+0x34>)
 8000956:	f001 f955 	bl	8001c04 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 800095a:	2200      	movs	r2, #0
 800095c:	2104      	movs	r1, #4
 800095e:	4620      	mov	r0, r4
 8000960:	f001 f950 	bl	8001c04 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8000964:	4628      	mov	r0, r5
 8000966:	f7ff ff7b 	bl	8000860 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800096a:	4620      	mov	r0, r4
 800096c:	2201      	movs	r2, #1
 800096e:	2104      	movs	r1, #4
}
 8000970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 8000974:	f001 b946 	b.w	8001c04 <HAL_GPIO_WritePin>
 8000978:	40020800 	.word	0x40020800
 800097c:	40020c00 	.word	0x40020c00

08000980 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000980:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000982:	4c0b      	ldr	r4, [pc, #44]	; (80009b0 <LCD_IO_WriteReg+0x30>)
{
 8000984:	4605      	mov	r5, r0
  LCD_WRX_LOW();
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <LCD_IO_WriteReg+0x34>)
 800098e:	f001 f939 	bl	8001c04 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 8000992:	2200      	movs	r2, #0
 8000994:	2104      	movs	r1, #4
 8000996:	4620      	mov	r0, r4
 8000998:	f001 f934 	bl	8001c04 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800099c:	4628      	mov	r0, r5
 800099e:	f7ff ff5f 	bl	8000860 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80009a2:	4620      	mov	r0, r4
 80009a4:	2201      	movs	r2, #1
 80009a6:	2104      	movs	r1, #4
}
 80009a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 80009ac:	f001 b92a 	b.w	8001c04 <HAL_GPIO_WritePin>
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020c00 	.word	0x40020c00

080009b8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80009b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80009ba:	4605      	mov	r5, r0
 80009bc:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80009be:	2200      	movs	r2, #0
 80009c0:	2104      	movs	r1, #4
 80009c2:	4814      	ldr	r0, [pc, #80]	; (8000a14 <LCD_IO_ReadData+0x5c>)
 80009c4:	f001 f91e 	bl	8001c04 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ce:	4812      	ldr	r0, [pc, #72]	; (8000a18 <LCD_IO_ReadData+0x60>)
 80009d0:	f001 f918 	bl	8001c04 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80009d4:	4628      	mov	r0, r5
 80009d6:	f7ff ff43 	bl	8000860 <SPIx_Write>
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <LCD_IO_ReadData+0x64>)
 80009dc:	4810      	ldr	r0, [pc, #64]	; (8000a20 <LCD_IO_ReadData+0x68>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4622      	mov	r2, r4
 80009e2:	a901      	add	r1, sp, #4
 80009e4:	f002 fe73 	bl	80036ce <HAL_SPI_Receive>
  if(status != HAL_OK)
 80009e8:	b120      	cbz	r0, 80009f4 <LCD_IO_ReadData+0x3c>
  HAL_SPI_DeInit(&SpiHandle);
 80009ea:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LCD_IO_ReadData+0x68>)
 80009ec:	f002 fcc1 	bl	8003372 <HAL_SPI_DeInit>
  SPIx_Init();
 80009f0:	f7ff feea 	bl	80007c8 <SPIx_Init>
  
  readvalue = SPIx_Read(ReadSize);

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fa:	4807      	ldr	r0, [pc, #28]	; (8000a18 <LCD_IO_ReadData+0x60>)
  return readvalue;
 80009fc:	9c01      	ldr	r4, [sp, #4]
  LCD_WRX_HIGH();
 80009fe:	f001 f901 	bl	8001c04 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000a02:	2201      	movs	r2, #1
 8000a04:	2104      	movs	r1, #4
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <LCD_IO_ReadData+0x5c>)
 8000a08:	f001 f8fc 	bl	8001c04 <HAL_GPIO_WritePin>
  
  return readvalue;
}
 8000a0c:	4620      	mov	r0, r4
 8000a0e:	b003      	add	sp, #12
 8000a10:	bd30      	pop	{r4, r5, pc}
 8000a12:	bf00      	nop
 8000a14:	40020800 	.word	0x40020800
 8000a18:	40020c00 	.word	0x40020c00
 8000a1c:	20000038 	.word	0x20000038
 8000a20:	200000fc 	.word	0x200000fc

08000a24 <LCD_Delay>:
 8000a24:	f000 bc3e 	b.w	80012a4 <HAL_Delay>

08000a28 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000a28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8000a2c:	4c15      	ldr	r4, [pc, #84]	; (8000a84 <FillBuffer+0x5c>)
{
 8000a2e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000a30:	4698      	mov	r8, r3
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8000a32:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000a36:	6063      	str	r3, [r4, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60a3      	str	r3, [r4, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8000a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000a3e:	60e3      	str	r3, [r4, #12]
{
 8000a40:	4681      	mov	r9, r0
  
  Dma2dHandler.Instance = DMA2D; 
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <FillBuffer+0x60>)
 8000a44:	6023      	str	r3, [r4, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8000a46:	4620      	mov	r0, r4
{
 8000a48:	460e      	mov	r6, r1
 8000a4a:	4617      	mov	r7, r2
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8000a4c:	f000 fdb6 	bl	80015bc <HAL_DMA2D_Init>
 8000a50:	b9a0      	cbnz	r0, 8000a7c <FillBuffer+0x54>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8000a52:	4649      	mov	r1, r9
 8000a54:	4620      	mov	r0, r4
 8000a56:	f000 ff05 	bl	8001864 <HAL_DMA2D_ConfigLayer>
 8000a5a:	b978      	cbnz	r0, 8000a7c <FillBuffer+0x54>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000a5c:	f8cd 8000 	str.w	r8, [sp]
 8000a60:	463b      	mov	r3, r7
 8000a62:	4632      	mov	r2, r6
 8000a64:	4629      	mov	r1, r5
 8000a66:	4620      	mov	r0, r4
 8000a68:	f000 fdd4 	bl	8001614 <HAL_DMA2D_Start>
 8000a6c:	b930      	cbnz	r0, 8000a7c <FillBuffer+0x54>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8000a6e:	210a      	movs	r1, #10
 8000a70:	4620      	mov	r0, r4
      }
    }
  } 
}
 8000a72:	b003      	add	sp, #12
 8000a74:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8000a78:	f000 bde6 	b.w	8001648 <HAL_DMA2D_PollForTransfer>
}
 8000a7c:	b003      	add	sp, #12
 8000a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a82:	bf00      	nop
 8000a84:	20000158 	.word	0x20000158
 8000a88:	4002b000 	.word	0x4002b000

08000a8c <BSP_LCD_GetXSize>:
{
 8000a8c:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 8000a8e:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <BSP_LCD_GetXSize+0xc>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a94:	4798      	blx	r3
}
 8000a96:	bd08      	pop	{r3, pc}
 8000a98:	20000370 	.word	0x20000370

08000a9c <BSP_LCD_GetYSize>:
{
 8000a9c:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelHeight();
 8000a9e:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <BSP_LCD_GetYSize+0xc>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa4:	4798      	blx	r3
}
 8000aa6:	bd08      	pop	{r3, pc}
 8000aa8:	20000370 	.word	0x20000370

08000aac <BSP_LCD_LayerDefaultInit>:
{     
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	b08e      	sub	sp, #56	; 0x38
  Layercfg.WindowX0 = 0;
 8000ab0:	2400      	movs	r4, #0
{     
 8000ab2:	460e      	mov	r6, r1
 8000ab4:	4605      	mov	r5, r0
  Layercfg.WindowX0 = 0;
 8000ab6:	9401      	str	r4, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000ab8:	f7ff ffe8 	bl	8000a8c <BSP_LCD_GetXSize>
  Layercfg.WindowY0 = 0;
 8000abc:	9403      	str	r4, [sp, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000abe:	9002      	str	r0, [sp, #8]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000ac0:	f7ff ffec 	bl	8000a9c <BSP_LCD_GetYSize>
  Layercfg.Alpha = 255;
 8000ac4:	23ff      	movs	r3, #255	; 0xff
 8000ac6:	9306      	str	r3, [sp, #24]
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ac8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000acc:	9308      	str	r3, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ace:	2307      	movs	r3, #7
 8000ad0:	9309      	str	r3, [sp, #36]	; 0x24
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ad2:	9405      	str	r4, [sp, #20]
  Layercfg.Alpha0 = 0;
 8000ad4:	9407      	str	r4, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 8000ad6:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 8000ada:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  Layercfg.Backcolor.Red = 0;
 8000ade:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000ae2:	9004      	str	r0, [sp, #16]
  Layercfg.FBStartAdress = FB_Address;
 8000ae4:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000ae6:	f7ff ffd1 	bl	8000a8c <BSP_LCD_GetXSize>
 8000aea:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000aec:	f7ff ffd6 	bl	8000a9c <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8000af0:	4c0b      	ldr	r4, [pc, #44]	; (8000b20 <BSP_LCD_LayerDefaultInit+0x74>)
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000af2:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8000af4:	462a      	mov	r2, r5
 8000af6:	a901      	add	r1, sp, #4
 8000af8:	4620      	mov	r0, r4
 8000afa:	f001 ff0b 	bl	8002914 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <BSP_LCD_LayerDefaultInit+0x78>)
 8000b00:	200c      	movs	r0, #12
 8000b02:	4368      	muls	r0, r5
 8000b04:	181a      	adds	r2, r3, r0
 8000b06:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0a:	6051      	str	r1, [r2, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000b0c:	4906      	ldr	r1, [pc, #24]	; (8000b28 <BSP_LCD_LayerDefaultInit+0x7c>)
 8000b0e:	6091      	str	r1, [r2, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000b10:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000b14:	501a      	str	r2, [r3, r0]
  HAL_LTDC_EnableDither(&LtdcHandler);
 8000b16:	4620      	mov	r0, r4
 8000b18:	f001 ff5a 	bl	80029d0 <HAL_LTDC_EnableDither>
}
 8000b1c:	b00e      	add	sp, #56	; 0x38
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}
 8000b20:	200002c8 	.word	0x200002c8
 8000b24:	20000198 	.word	0x20000198
 8000b28:	20000044 	.word	0x20000044

08000b2c <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8000b2c:	4b01      	ldr	r3, [pc, #4]	; (8000b34 <BSP_LCD_SelectLayer+0x8>)
 8000b2e:	6018      	str	r0, [r3, #0]
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000154 	.word	0x20000154

08000b38 <BSP_LCD_SetLayerVisible>:
{
 8000b38:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <BSP_LCD_SetLayerVisible+0x24>)
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8000b3a:	6813      	ldr	r3, [r2, #0]
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8000b3c:	6812      	ldr	r2, [r2, #0]
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8000b3e:	3384      	adds	r3, #132	; 0x84
 8000b40:	01c0      	lsls	r0, r0, #7
  if(state == ENABLE)
 8000b42:	2901      	cmp	r1, #1
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8000b44:	5819      	ldr	r1, [r3, r0]
 8000b46:	bf0c      	ite	eq
 8000b48:	f041 0101 	orreq.w	r1, r1, #1
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8000b4c:	f021 0101 	bicne.w	r1, r1, #1
 8000b50:	5019      	str	r1, [r3, r0]
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8000b52:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6253      	str	r3, [r2, #36]	; 0x24
 8000b5a:	4770      	bx	lr
 8000b5c:	200002c8 	.word	0x200002c8

08000b60 <BSP_LCD_SetColorKeying>:
{  
 8000b60:	b538      	push	{r3, r4, r5, lr}
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8000b62:	4c06      	ldr	r4, [pc, #24]	; (8000b7c <BSP_LCD_SetColorKeying+0x1c>)
{  
 8000b64:	4605      	mov	r5, r0
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8000b66:	4602      	mov	r2, r0
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f001 fefc 	bl	8002966 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8000b6e:	4629      	mov	r1, r5
 8000b70:	4620      	mov	r0, r4
}
 8000b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8000b76:	f001 bf13 	b.w	80029a0 <HAL_LTDC_EnableColorKeying>
 8000b7a:	bf00      	nop
 8000b7c:	200002c8 	.word	0x200002c8

08000b80 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <BSP_LCD_SetTextColor+0x10>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	230c      	movs	r3, #12
 8000b86:	4353      	muls	r3, r2
 8000b88:	4a02      	ldr	r2, [pc, #8]	; (8000b94 <BSP_LCD_SetTextColor+0x14>)
 8000b8a:	50d0      	str	r0, [r2, r3]
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000154 	.word	0x20000154
 8000b94:	20000198 	.word	0x20000198

08000b98 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = pFonts;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <BSP_LCD_SetFont+0x10>)
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <BSP_LCD_SetFont+0x14>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	210c      	movs	r1, #12
 8000ba0:	fb01 2303 	mla	r3, r1, r3, r2
 8000ba4:	6098      	str	r0, [r3, #8]
 8000ba6:	4770      	bx	lr
 8000ba8:	20000154 	.word	0x20000154
 8000bac:	20000198 	.word	0x20000198

08000bb0 <BSP_LCD_Clear>:
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <BSP_LCD_Clear+0x34>)
{ 
 8000bb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000bb4:	681c      	ldr	r4, [r3, #0]
 8000bb6:	4a0c      	ldr	r2, [pc, #48]	; (8000be8 <BSP_LCD_Clear+0x38>)
 8000bb8:	2334      	movs	r3, #52	; 0x34
 8000bba:	fb03 2304 	mla	r3, r3, r4, r2
{ 
 8000bbe:	4607      	mov	r7, r0
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000bc0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8000bc2:	f7ff ff63 	bl	8000a8c <BSP_LCD_GetXSize>
 8000bc6:	4606      	mov	r6, r0
 8000bc8:	f7ff ff68 	bl	8000a9c <BSP_LCD_GetYSize>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	9701      	str	r7, [sp, #4]
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4632      	mov	r2, r6
 8000bd6:	4629      	mov	r1, r5
 8000bd8:	4620      	mov	r0, r4
 8000bda:	f7ff ff25 	bl	8000a28 <FillBuffer>
}
 8000bde:	b003      	add	sp, #12
 8000be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000154 	.word	0x20000154
 8000be8:	200002c8 	.word	0x200002c8

08000bec <BSP_LCD_DisplayOn>:
  if(LcdDrv->DisplayOn != NULL)
 8000bec:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <BSP_LCD_DisplayOn+0xc>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	b103      	cbz	r3, 8000bf6 <BSP_LCD_DisplayOn+0xa>
    LcdDrv->DisplayOn();
 8000bf4:	4718      	bx	r3
 8000bf6:	4770      	bx	lr
 8000bf8:	20000370 	.word	0x20000370

08000bfc <BSP_LCD_MspInit>:
{
 8000bfc:	b530      	push	{r4, r5, lr}
 8000bfe:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000c00:	4b49      	ldr	r3, [pc, #292]	; (8000d28 <BSP_LCD_MspInit+0x12c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c02:	4d4a      	ldr	r5, [pc, #296]	; (8000d2c <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000c04:	484a      	ldr	r0, [pc, #296]	; (8000d30 <BSP_LCD_MspInit+0x134>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000c06:	4c4b      	ldr	r4, [pc, #300]	; (8000d34 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000c08:	2200      	movs	r2, #0
 8000c0a:	9201      	str	r2, [sp, #4]
 8000c0c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000c0e:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8000c12:	6459      	str	r1, [r3, #68]	; 0x44
 8000c14:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000c16:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8000c1a:	9101      	str	r1, [sp, #4]
 8000c1c:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8000c1e:	9202      	str	r2, [sp, #8]
 8000c20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c26:	6319      	str	r1, [r3, #48]	; 0x30
 8000c28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c2a:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8000c2e:	9102      	str	r1, [sp, #8]
 8000c30:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	9203      	str	r2, [sp, #12]
 8000c34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c36:	f041 0101 	orr.w	r1, r1, #1
 8000c3a:	6319      	str	r1, [r3, #48]	; 0x30
 8000c3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c3e:	f001 0101 	and.w	r1, r1, #1
 8000c42:	9103      	str	r1, [sp, #12]
 8000c44:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	9204      	str	r2, [sp, #16]
 8000c48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c4a:	f041 0102 	orr.w	r1, r1, #2
 8000c4e:	6319      	str	r1, [r3, #48]	; 0x30
 8000c50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c52:	f001 0102 	and.w	r1, r1, #2
 8000c56:	9104      	str	r1, [sp, #16]
 8000c58:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	9205      	str	r2, [sp, #20]
 8000c5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c5e:	f041 0104 	orr.w	r1, r1, #4
 8000c62:	6319      	str	r1, [r3, #48]	; 0x30
 8000c64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c66:	f001 0104 	and.w	r1, r1, #4
 8000c6a:	9105      	str	r1, [sp, #20]
 8000c6c:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6e:	9206      	str	r2, [sp, #24]
 8000c70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c72:	f041 0108 	orr.w	r1, r1, #8
 8000c76:	6319      	str	r1, [r3, #48]	; 0x30
 8000c78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c7a:	f001 0108 	and.w	r1, r1, #8
 8000c7e:	9106      	str	r1, [sp, #24]
 8000c80:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c82:	9207      	str	r2, [sp, #28]
 8000c84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c86:	f041 0120 	orr.w	r1, r1, #32
 8000c8a:	6319      	str	r1, [r3, #48]	; 0x30
 8000c8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c8e:	f001 0120 	and.w	r1, r1, #32
 8000c92:	9107      	str	r1, [sp, #28]
 8000c94:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c96:	9208      	str	r2, [sp, #32]
 8000c98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c9a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000c9e:	6319      	str	r1, [r3, #48]	; 0x30
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000ca2:	920b      	str	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca8:	9308      	str	r3, [sp, #32]
 8000caa:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000cac:	f641 0358 	movw	r3, #6232	; 0x1858
 8000cb0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000cb6:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000cb8:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000cba:	230e      	movs	r3, #14
 8000cbc:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000cbe:	f000 fe1b 	bl	80018f8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000cc2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000cc6:	a909      	add	r1, sp, #36	; 0x24
 8000cc8:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000cca:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000ccc:	f000 fe14 	bl	80018f8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000cd0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000cd4:	a909      	add	r1, sp, #36	; 0x24
 8000cd6:	4818      	ldr	r0, [pc, #96]	; (8000d38 <BSP_LCD_MspInit+0x13c>)
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000cd8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000cda:	f000 fe0d 	bl	80018f8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000cde:	2348      	movs	r3, #72	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000ce0:	a909      	add	r1, sp, #36	; 0x24
 8000ce2:	4816      	ldr	r0, [pc, #88]	; (8000d3c <BSP_LCD_MspInit+0x140>)
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000ce4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000ce6:	f000 fe07 	bl	80018f8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8000cee:	a909      	add	r1, sp, #36	; 0x24
 8000cf0:	4813      	ldr	r0, [pc, #76]	; (8000d40 <BSP_LCD_MspInit+0x144>)
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000cf2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8000cf4:	f000 fe00 	bl	80018f8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000cf8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000cfc:	a909      	add	r1, sp, #36	; 0x24
 8000cfe:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000d00:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000d02:	f000 fdf9 	bl	80018f8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000d06:	2303      	movs	r3, #3
 8000d08:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d0a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000d0c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d0e:	4628      	mov	r0, r5
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000d10:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d12:	f000 fdf1 	bl	80018f8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000d16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000d1a:	a909      	add	r1, sp, #36	; 0x24
 8000d1c:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000d1e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000d20:	f000 fdea 	bl	80018f8 <HAL_GPIO_Init>
}
 8000d24:	b00f      	add	sp, #60	; 0x3c
 8000d26:	bd30      	pop	{r4, r5, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020400 	.word	0x40020400
 8000d30:	40020000 	.word	0x40020000
 8000d34:	40021800 	.word	0x40021800
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020c00 	.word	0x40020c00
 8000d40:	40021400 	.word	0x40021400

08000d44 <BSP_LCD_Init>:
{ 
 8000d44:	b538      	push	{r3, r4, r5, lr}
    LtdcHandler.Instance = LTDC;
 8000d46:	4c22      	ldr	r4, [pc, #136]	; (8000dd0 <BSP_LCD_Init+0x8c>)
 8000d48:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <BSP_LCD_Init+0x90>)
 8000d4a:	6023      	str	r3, [r4, #0]
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8000d4c:	2309      	movs	r3, #9
 8000d4e:	6163      	str	r3, [r4, #20]
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61a3      	str	r3, [r4, #24]
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8000d54:	231d      	movs	r3, #29
 8000d56:	61e3      	str	r3, [r4, #28]
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	6223      	str	r3, [r4, #32]
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8000d5c:	f240 130d 	movw	r3, #269	; 0x10d
 8000d60:	6263      	str	r3, [r4, #36]	; 0x24
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8000d62:	f240 1343 	movw	r3, #323	; 0x143
 8000d66:	62a3      	str	r3, [r4, #40]	; 0x28
    LtdcHandler.Init.TotalWidth = 279;
 8000d68:	f240 1317 	movw	r3, #279	; 0x117
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d6c:	481a      	ldr	r0, [pc, #104]	; (8000dd8 <BSP_LCD_Init+0x94>)
    LtdcHandler.Init.TotalWidth = 279;
 8000d6e:	62e3      	str	r3, [r4, #44]	; 0x2c
    LtdcHandler.Init.TotalHeigh = 327;
 8000d70:	f240 1347 	movw	r3, #327	; 0x147
 8000d74:	6323      	str	r3, [r4, #48]	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d76:	2308      	movs	r3, #8
 8000d78:	6003      	str	r3, [r0, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000d7a:	23c0      	movs	r3, #192	; 0xc0
 8000d7c:	6103      	str	r3, [r0, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000d7e:	2304      	movs	r3, #4
    LtdcHandler.Init.Backcolor.Red= 0;
 8000d80:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000d82:	6183      	str	r3, [r0, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d88:	6243      	str	r3, [r0, #36]	; 0x24
    LtdcHandler.Init.Backcolor.Red= 0;
 8000d8a:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8000d8e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8000d92:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8000d96:	f002 f8bb 	bl	8002f10 <HAL_RCCEx_PeriphCLKConfig>
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d9a:	6065      	str	r5, [r4, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d9c:	60a5      	str	r5, [r4, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d9e:	60e5      	str	r5, [r4, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000da0:	6125      	str	r5, [r4, #16]
    BSP_LCD_MspInit();
 8000da2:	f7ff ff2b 	bl	8000bfc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8000da6:	4620      	mov	r0, r4
 8000da8:	f001 fce8 	bl	800277c <HAL_LTDC_Init>
    LcdDrv = &ili9341_drv;
 8000dac:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <BSP_LCD_Init+0x98>)
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <BSP_LCD_Init+0x9c>)
 8000db0:	6013      	str	r3, [r2, #0]
    LcdDrv->Init();
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4798      	blx	r3
    BSP_SDRAM_Init();
 8000db6:	f000 fa0b 	bl	80011d0 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = pFonts;
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <BSP_LCD_Init+0xa0>)
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <BSP_LCD_Init+0xa4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	210c      	movs	r1, #12
 8000dc2:	fb01 2303 	mla	r3, r1, r3, r2
 8000dc6:	4a09      	ldr	r2, [pc, #36]	; (8000dec <BSP_LCD_Init+0xa8>)
 8000dc8:	609a      	str	r2, [r3, #8]
}  
 8000dca:	4628      	mov	r0, r5
 8000dcc:	bd38      	pop	{r3, r4, r5, pc}
 8000dce:	bf00      	nop
 8000dd0:	200002c8 	.word	0x200002c8
 8000dd4:	40016800 	.word	0x40016800
 8000dd8:	200001b0 	.word	0x200001b0
 8000ddc:	20000370 	.word	0x20000370
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000154 	.word	0x20000154
 8000de8:	20000198 	.word	0x20000198
 8000dec:	20000044 	.word	0x20000044

08000df0 <BSP_LCD_DrawPixel>:
{
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <BSP_LCD_DrawPixel+0x24>)
{
 8000df4:	4616      	mov	r6, r2
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <BSP_LCD_DrawPixel+0x28>)
{
 8000dfa:	460c      	mov	r4, r1
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000dfc:	2134      	movs	r1, #52	; 0x34
 8000dfe:	fb01 2303 	mla	r3, r1, r3, r2
{
 8000e02:	4607      	mov	r7, r0
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000e04:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8000e06:	f7ff fe41 	bl	8000a8c <BSP_LCD_GetXSize>
 8000e0a:	fb00 7004 	mla	r0, r0, r4, r7
 8000e0e:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
 8000e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e14:	20000154 	.word	0x20000154
 8000e18:	200002c8 	.word	0x200002c8

08000e1c <BSP_LCD_DisplayChar>:
{
 8000e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000e20:	4b2f      	ldr	r3, [pc, #188]	; (8000ee0 <BSP_LCD_DisplayChar+0xc4>)
{
 8000e22:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000e24:	681b      	ldr	r3, [r3, #0]
{
 8000e26:	9102      	str	r1, [sp, #8]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000e28:	492e      	ldr	r1, [pc, #184]	; (8000ee4 <BSP_LCD_DisplayChar+0xc8>)
{
 8000e2a:	9001      	str	r0, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000e2c:	200c      	movs	r0, #12
 8000e2e:	fb00 1303 	mla	r3, r0, r3, r1
 8000e32:	f1a2 0420 	sub.w	r4, r2, #32
 8000e36:	6899      	ldr	r1, [r3, #8]
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000e38:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 8000e3c:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 8000e40:	680a      	ldr	r2, [r1, #0]
 8000e42:	f10a 0607 	add.w	r6, sl, #7
 8000e46:	10f6      	asrs	r6, r6, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000e48:	fb0b f404 	mul.w	r4, fp, r4
  offset = 8 *((width + 7)/8) -  width ;
 8000e4c:	ebca 00c6 	rsb	r0, sl, r6, lsl #3
 8000e50:	fb06 2404 	mla	r4, r6, r4, r2
      if(line & (1 << (width- j + offset- 1))) 
 8000e54:	f10a 32ff 	add.w	r2, sl, #4294967295
 8000e58:	fa52 f380 	uxtab	r3, r2, r0
  for(i = 0; i < height; i++)
 8000e5c:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 8000e60:	9303      	str	r3, [sp, #12]
 8000e62:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 8000e64:	45d8      	cmp	r8, fp
 8000e66:	eb03 0908 	add.w	r9, r3, r8
 8000e6a:	fa1f f989 	uxth.w	r9, r9
 8000e6e:	d302      	bcc.n	8000e76 <BSP_LCD_DisplayChar+0x5a>
}
 8000e70:	b005      	add	sp, #20
 8000e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8000e76:	2e01      	cmp	r6, #1
 8000e78:	d009      	beq.n	8000e8e <BSP_LCD_DisplayChar+0x72>
 8000e7a:	2e02      	cmp	r6, #2
 8000e7c:	d00f      	beq.n	8000e9e <BSP_LCD_DisplayChar+0x82>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8000e7e:	7865      	ldrb	r5, [r4, #1]
 8000e80:	7822      	ldrb	r2, [r4, #0]
 8000e82:	022d      	lsls	r5, r5, #8
 8000e84:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 8000e88:	78a2      	ldrb	r2, [r4, #2]
 8000e8a:	4315      	orrs	r5, r2
 8000e8c:	e000      	b.n	8000e90 <BSP_LCD_DisplayChar+0x74>
      line =  pchar[0];      
 8000e8e:	7825      	ldrb	r5, [r4, #0]
    for (j = 0; j < width; j++)
 8000e90:	2700      	movs	r7, #0
 8000e92:	45ba      	cmp	sl, r7
 8000e94:	d808      	bhi.n	8000ea8 <BSP_LCD_DisplayChar+0x8c>
  for(i = 0; i < height; i++)
 8000e96:	f108 0801 	add.w	r8, r8, #1
 8000e9a:	4434      	add	r4, r6
 8000e9c:	e7e1      	b.n	8000e62 <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 8) | pchar[1];
 8000e9e:	7822      	ldrb	r2, [r4, #0]
 8000ea0:	7865      	ldrb	r5, [r4, #1]
 8000ea2:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8000ea6:	e7f3      	b.n	8000e90 <BSP_LCD_DisplayChar+0x74>
      if(line & (1 << (width- j + offset- 1))) 
 8000ea8:	9b03      	ldr	r3, [sp, #12]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	1bd9      	subs	r1, r3, r7
 8000eae:	408a      	lsls	r2, r1
 8000eb0:	490b      	ldr	r1, [pc, #44]	; (8000ee0 <BSP_LCD_DisplayChar+0xc4>)
 8000eb2:	422a      	tst	r2, r5
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000eb4:	6809      	ldr	r1, [r1, #0]
 8000eb6:	f04f 020c 	mov.w	r2, #12
      if(line & (1 << (width- j + offset- 1))) 
 8000eba:	d00a      	beq.n	8000ed2 <BSP_LCD_DisplayChar+0xb6>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000ebc:	9b01      	ldr	r3, [sp, #4]
 8000ebe:	434a      	muls	r2, r1
 8000ec0:	19d8      	adds	r0, r3, r7
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <BSP_LCD_DisplayChar+0xc8>)
 8000ec4:	589a      	ldr	r2, [r3, r2]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000ec6:	4649      	mov	r1, r9
 8000ec8:	b280      	uxth	r0, r0
 8000eca:	f7ff ff91 	bl	8000df0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000ece:	3701      	adds	r7, #1
 8000ed0:	e7df      	b.n	8000e92 <BSP_LCD_DisplayChar+0x76>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <BSP_LCD_DisplayChar+0xc8>)
 8000ed4:	fb02 3201 	mla	r2, r2, r1, r3
 8000ed8:	9b01      	ldr	r3, [sp, #4]
 8000eda:	6852      	ldr	r2, [r2, #4]
 8000edc:	19d8      	adds	r0, r3, r7
 8000ede:	e7f2      	b.n	8000ec6 <BSP_LCD_DisplayChar+0xaa>
 8000ee0:	20000154 	.word	0x20000154
 8000ee4:	20000198 	.word	0x20000198

08000ee8 <BSP_LCD_DisplayStringAt>:
{
 8000ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eec:	469a      	mov	sl, r3
 8000eee:	4604      	mov	r4, r0
 8000ef0:	460f      	mov	r7, r1
 8000ef2:	4616      	mov	r6, r2
  uint8_t  *ptr = pText;
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	eba3 0906 	sub.w	r9, r3, r6
  while (*ptr++) size ++ ;
 8000efa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	d1f9      	bne.n	8000ef6 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000f02:	f7ff fdc3 	bl	8000a8c <BSP_LCD_GetXSize>
 8000f06:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <BSP_LCD_DisplayStringAt+0xb4>)
 8000f08:	4d25      	ldr	r5, [pc, #148]	; (8000fa0 <BSP_LCD_DisplayStringAt+0xb8>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	210c      	movs	r1, #12
 8000f0e:	fb01 5202 	mla	r2, r1, r2, r5
  switch (mode)
 8000f12:	f1ba 0f01 	cmp.w	sl, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000f16:	6892      	ldr	r2, [r2, #8]
 8000f18:	4698      	mov	r8, r3
 8000f1a:	8892      	ldrh	r2, [r2, #4]
 8000f1c:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (mode)
 8000f20:	d021      	beq.n	8000f66 <BSP_LCD_DisplayStringAt+0x7e>
 8000f22:	f1ba 0f02 	cmp.w	sl, #2
 8000f26:	d025      	beq.n	8000f74 <BSP_LCD_DisplayStringAt+0x8c>
  uint8_t  *ptr = pText;
 8000f28:	46b3      	mov	fp, r6
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000f2a:	f04f 0a0c 	mov.w	sl, #12
 8000f2e:	f89b 2000 	ldrb.w	r2, [fp]
 8000f32:	3200      	adds	r2, #0
 8000f34:	bf18      	it	ne
 8000f36:	2201      	movne	r2, #1
 8000f38:	9201      	str	r2, [sp, #4]
 8000f3a:	f7ff fda7 	bl	8000a8c <BSP_LCD_GetXSize>
 8000f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8000f42:	fb0a 5303 	mla	r3, sl, r3, r5
 8000f46:	ebab 0906 	sub.w	r9, fp, r6
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	889b      	ldrh	r3, [r3, #4]
 8000f4e:	fa1f f989 	uxth.w	r9, r9
 8000f52:	fb03 0019 	mls	r0, r3, r9, r0
 8000f56:	b280      	uxth	r0, r0
 8000f58:	4298      	cmp	r0, r3
 8000f5a:	d301      	bcc.n	8000f60 <BSP_LCD_DisplayStringAt+0x78>
 8000f5c:	9a01      	ldr	r2, [sp, #4]
 8000f5e:	b972      	cbnz	r2, 8000f7e <BSP_LCD_DisplayStringAt+0x96>
}
 8000f60:	b003      	add	sp, #12
 8000f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000f66:	eba0 0009 	sub.w	r0, r0, r9
 8000f6a:	4350      	muls	r0, r2
 8000f6c:	eb04 0050 	add.w	r0, r4, r0, lsr #1
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000f70:	b284      	uxth	r4, r0
      break;
 8000f72:	e7d9      	b.n	8000f28 <BSP_LCD_DisplayStringAt+0x40>
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000f74:	eba0 0009 	sub.w	r0, r0, r9
 8000f78:	fb10 4002 	smlabb	r0, r0, r2, r4
 8000f7c:	e7f8      	b.n	8000f70 <BSP_LCD_DisplayStringAt+0x88>
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8000f7e:	4620      	mov	r0, r4
 8000f80:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8000f84:	4639      	mov	r1, r7
 8000f86:	f7ff ff49 	bl	8000e1c <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8000f8e:	fb0a 5303 	mla	r3, sl, r3, r5
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	8898      	ldrh	r0, [r3, #4]
 8000f96:	4420      	add	r0, r4
 8000f98:	b284      	uxth	r4, r0
 8000f9a:	e7c8      	b.n	8000f2e <BSP_LCD_DisplayStringAt+0x46>
 8000f9c:	20000154 	.word	0x20000154
 8000fa0:	20000198 	.word	0x20000198

08000fa4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000fa4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t tmpmrd =0;
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8000fa8:	4c23      	ldr	r4, [pc, #140]	; (8001038 <BSP_SDRAM_Initialization_sequence+0x94>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000faa:	4d24      	ldr	r5, [pc, #144]	; (800103c <BSP_SDRAM_Initialization_sequence+0x98>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000fac:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd =0;
 8000fae:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000fb2:	2708      	movs	r7, #8
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000fb4:	4621      	mov	r1, r4
{
 8000fb6:	4682      	mov	sl, r0
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fbc:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd =0;
 8000fbe:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000fc2:	e884 00c0 	stmia.w	r4, {r6, r7}
  Command.AutoRefreshNumber       = 1;
 8000fc6:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 8000fc8:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000fcc:	f002 f8d8 	bl	8003180 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	f000 f967 	bl	80012a4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8000fd6:	2302      	movs	r3, #2
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8000fd8:	4621      	mov	r1, r4
 8000fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fde:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000fe0:	e884 0088 	stmia.w	r4, {r3, r7}
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
 8000fe4:	f04f 0904 	mov.w	r9, #4
  Command.AutoRefreshNumber       = 1;
 8000fe8:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 8000fea:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8000fee:	f002 f8c7 	bl	8003180 <HAL_SDRAM_SendCommand>
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000ff2:	2303      	movs	r3, #3
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffa:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000ffc:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber       = 4;
 8001000:	f8c4 9008 	str.w	r9, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 8001004:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001008:	f002 f8ba 	bl	8003180 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800100c:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001010:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = tmpmrd;
 8001012:	9b01      	ldr	r3, [sp, #4]
 8001014:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800101a:	4621      	mov	r1, r4
 800101c:	4628      	mov	r0, r5
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800101e:	f8c4 9000 	str.w	r9, [r4]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001022:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 8001024:	60a6      	str	r6, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001026:	f002 f8ab 	bl	8003180 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800102a:	4651      	mov	r1, sl
 800102c:	4628      	mov	r0, r5
 800102e:	f002 f8be 	bl	80031ae <HAL_SDRAM_ProgramRefreshRate>
}
 8001032:	b002      	add	sp, #8
 8001034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001038:	200001e0 	.word	0x200001e0
 800103c:	200001f0 	.word	0x200001f0

08001040 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001040:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001042:	4606      	mov	r6, r0
{
 8001044:	b08e      	sub	sp, #56	; 0x38
  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001046:	2800      	cmp	r0, #0
 8001048:	f000 80ad 	beq.w	80011a6 <BSP_SDRAM_MspInit+0x166>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800104c:	4b57      	ldr	r3, [pc, #348]	; (80011ac <BSP_SDRAM_MspInit+0x16c>)
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800104e:	4858      	ldr	r0, [pc, #352]	; (80011b0 <BSP_SDRAM_MspInit+0x170>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001050:	2500      	movs	r5, #0
 8001052:	9501      	str	r5, [sp, #4]
 8001054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001056:	f042 0201 	orr.w	r2, r2, #1
 800105a:	639a      	str	r2, [r3, #56]	; 0x38
 800105c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800105e:	f002 0201 	and.w	r2, r2, #1
 8001062:	9201      	str	r2, [sp, #4]
 8001064:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8001066:	9502      	str	r5, [sp, #8]
 8001068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800106a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800106e:	631a      	str	r2, [r3, #48]	; 0x30
 8001070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001072:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001076:	9202      	str	r2, [sp, #8]
 8001078:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	9503      	str	r5, [sp, #12]
 800107c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800107e:	f042 0202 	orr.w	r2, r2, #2
 8001082:	631a      	str	r2, [r3, #48]	; 0x30
 8001084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001086:	f002 0202 	and.w	r2, r2, #2
 800108a:	9203      	str	r2, [sp, #12]
 800108c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	9504      	str	r5, [sp, #16]
 8001090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001092:	f042 0204 	orr.w	r2, r2, #4
 8001096:	631a      	str	r2, [r3, #48]	; 0x30
 8001098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800109a:	f002 0204 	and.w	r2, r2, #4
 800109e:	9204      	str	r2, [sp, #16]
 80010a0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a2:	9505      	str	r5, [sp, #20]
 80010a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a6:	f042 0208 	orr.w	r2, r2, #8
 80010aa:	631a      	str	r2, [r3, #48]	; 0x30
 80010ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ae:	f002 0208 	and.w	r2, r2, #8
 80010b2:	9205      	str	r2, [sp, #20]
 80010b4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b6:	9506      	str	r5, [sp, #24]
 80010b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ba:	f042 0210 	orr.w	r2, r2, #16
 80010be:	631a      	str	r2, [r3, #48]	; 0x30
 80010c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010c2:	f002 0210 	and.w	r2, r2, #16
 80010c6:	9206      	str	r2, [sp, #24]
 80010c8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ca:	9507      	str	r5, [sp, #28]
 80010cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ce:	f042 0220 	orr.w	r2, r2, #32
 80010d2:	631a      	str	r2, [r3, #48]	; 0x30
 80010d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010d6:	f002 0220 	and.w	r2, r2, #32
 80010da:	9207      	str	r2, [sp, #28]
 80010dc:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010de:	9508      	str	r5, [sp, #32]
 80010e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010e6:	631a      	str	r2, [r3, #48]	; 0x30
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80010ea:	950b      	str	r5, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010f0:	9308      	str	r3, [sp, #32]
 80010f2:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80010f6:	ac0e      	add	r4, sp, #56	; 0x38
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80010f8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80010fa:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80010fc:	230c      	movs	r3, #12
 80010fe:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001100:	2360      	movs	r3, #96	; 0x60
 8001102:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001106:	4621      	mov	r1, r4
 8001108:	f000 fbf6 	bl	80018f8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800110c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800110e:	4621      	mov	r1, r4
 8001110:	4828      	ldr	r0, [pc, #160]	; (80011b4 <BSP_SDRAM_MspInit+0x174>)
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8001112:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8001114:	f000 fbf0 	bl	80018f8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001118:	f24c 7303 	movw	r3, #50947	; 0xc703
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800111c:	4621      	mov	r1, r4
 800111e:	4826      	ldr	r0, [pc, #152]	; (80011b8 <BSP_SDRAM_MspInit+0x178>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001120:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001122:	f000 fbe9 	bl	80018f8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001126:	f64f 7383 	movw	r3, #65411	; 0xff83
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800112a:	4621      	mov	r1, r4
 800112c:	4823      	ldr	r0, [pc, #140]	; (80011bc <BSP_SDRAM_MspInit+0x17c>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800112e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001130:	f000 fbe2 	bl	80018f8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001134:	f64f 033f 	movw	r3, #63551	; 0xf83f
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001138:	4621      	mov	r1, r4
 800113a:	4821      	ldr	r0, [pc, #132]	; (80011c0 <BSP_SDRAM_MspInit+0x180>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800113c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800113e:	f000 fbdb 	bl	80018f8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001142:	4621      	mov	r1, r4
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001144:	f248 1333 	movw	r3, #33075	; 0x8133

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001148:	4c1e      	ldr	r4, [pc, #120]	; (80011c4 <BSP_SDRAM_MspInit+0x184>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800114a:	481f      	ldr	r0, [pc, #124]	; (80011c8 <BSP_SDRAM_MspInit+0x188>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800114c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800114e:	f000 fbd3 	bl	80018f8 <HAL_GPIO_Init>
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	60a3      	str	r3, [r4, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800115a:	60e3      	str	r3, [r4, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800115c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001160:	6123      	str	r3, [r4, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001166:	6163      	str	r3, [r4, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001168:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800116c:	61a3      	str	r3, [r4, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800116e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001172:	6223      	str	r3, [r4, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001174:	2303      	movs	r3, #3
 8001176:	62a3      	str	r3, [r4, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001178:	6325      	str	r5, [r4, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <BSP_SDRAM_MspInit+0x18c>)
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800117c:	6334      	str	r4, [r6, #48]	; 0x30
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800117e:	4620      	mov	r0, r4
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001180:	6023      	str	r3, [r4, #0]
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001182:	6065      	str	r5, [r4, #4]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8001184:	61e5      	str	r5, [r4, #28]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001186:	6265      	str	r5, [r4, #36]	; 0x24
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001188:	62e5      	str	r5, [r4, #44]	; 0x2c
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800118a:	63a6      	str	r6, [r4, #56]	; 0x38
  HAL_DMA_DeInit(&dmaHandle);
 800118c:	f000 f998 	bl	80014c0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8001190:	4620      	mov	r0, r4
 8001192:	f000 f917 	bl	80013c4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001196:	2038      	movs	r0, #56	; 0x38
 8001198:	462a      	mov	r2, r5
 800119a:	210f      	movs	r1, #15
 800119c:	f000 f8a8 	bl	80012f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80011a0:	2038      	movs	r0, #56	; 0x38
 80011a2:	f000 f8d9 	bl	8001358 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80011a6:	b00e      	add	sp, #56	; 0x38
 80011a8:	bd70      	pop	{r4, r5, r6, pc}
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40021400 	.word	0x40021400
 80011c4:	20000240 	.word	0x20000240
 80011c8:	40021800 	.word	0x40021800
 80011cc:	40026410 	.word	0x40026410

080011d0 <BSP_SDRAM_Init>:
{
 80011d0:	b570      	push	{r4, r5, r6, lr}
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80011d2:	4c1a      	ldr	r4, [pc, #104]	; (800123c <BSP_SDRAM_Init+0x6c>)
  Timing.LoadToActiveDelay    = 2;
 80011d4:	4d1a      	ldr	r5, [pc, #104]	; (8001240 <BSP_SDRAM_Init+0x70>)
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <BSP_SDRAM_Init+0x74>)
 80011d8:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 80011da:	2302      	movs	r3, #2
 80011dc:	602b      	str	r3, [r5, #0]
  Timing.WriteRecoveryTime    = 2;
 80011de:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 80011e0:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 80011e2:	61ab      	str	r3, [r5, #24]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80011e4:	2310      	movs	r3, #16
 80011e6:	6123      	str	r3, [r4, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80011e8:	2340      	movs	r3, #64	; 0x40
 80011ea:	6163      	str	r3, [r4, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80011ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
  Timing.ExitSelfRefreshDelay = 7;
 80011f0:	2107      	movs	r1, #7
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80011f2:	61a3      	str	r3, [r4, #24]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80011f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  Timing.SelfRefreshTime      = 4;
 80011f8:	2204      	movs	r2, #4
  Timing.ExitSelfRefreshDelay = 7;
 80011fa:	6069      	str	r1, [r5, #4]
  Timing.RowCycleDelay        = 7;
 80011fc:	60e9      	str	r1, [r5, #12]
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80011fe:	2601      	movs	r6, #1
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001200:	2100      	movs	r1, #0
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001202:	6223      	str	r3, [r4, #32]
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001204:	4620      	mov	r0, r4
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001206:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800120a:	60e2      	str	r2, [r4, #12]
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800120c:	62a3      	str	r3, [r4, #40]	; 0x28
  Timing.SelfRefreshTime      = 4;
 800120e:	60aa      	str	r2, [r5, #8]
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8001210:	6066      	str	r6, [r4, #4]
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001212:	60a1      	str	r1, [r4, #8]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001214:	61e1      	str	r1, [r4, #28]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001216:	6261      	str	r1, [r4, #36]	; 0x24
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001218:	f7ff ff12 	bl	8001040 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800121c:	4629      	mov	r1, r5
 800121e:	4620      	mov	r0, r4
 8001220:	f001 ff8e 	bl	8003140 <HAL_SDRAM_Init>
 8001224:	4c08      	ldr	r4, [pc, #32]	; (8001248 <BSP_SDRAM_Init+0x78>)
    sdramstatus = SDRAM_ERROR;
 8001226:	2800      	cmp	r0, #0
 8001228:	bf14      	ite	ne
 800122a:	4630      	movne	r0, r6
 800122c:	2000      	moveq	r0, #0
 800122e:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001230:	f240 506a 	movw	r0, #1386	; 0x56a
 8001234:	f7ff feb6 	bl	8000fa4 <BSP_SDRAM_Initialization_sequence>
}
 8001238:	7820      	ldrb	r0, [r4, #0]
 800123a:	bd70      	pop	{r4, r5, r6, pc}
 800123c:	200001f0 	.word	0x200001f0
 8001240:	20000224 	.word	0x20000224
 8001244:	a0000140 	.word	0xa0000140
 8001248:	2000004c 	.word	0x2000004c

0800124c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_Init+0x30>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001256:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800125e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001266:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f82f 	bl	80012cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126e:	2000      	movs	r0, #0
 8001270:	f005 fd06 	bl	8006c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001274:	f005 fa2a 	bl	80066cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001278:	2000      	movs	r0, #0
 800127a:	bd08      	pop	{r3, pc}
 800127c:	40023c00 	.word	0x40023c00

08001280 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001280:	4a03      	ldr	r2, [pc, #12]	; (8001290 <HAL_IncTick+0x10>)
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <HAL_IncTick+0x14>)
 8001284:	6811      	ldr	r1, [r2, #0]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	440b      	add	r3, r1
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000374 	.word	0x20000374
 8001294:	2000004d 	.word	0x2000004d

08001298 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001298:	4b01      	ldr	r3, [pc, #4]	; (80012a0 <HAL_GetTick+0x8>)
 800129a:	6818      	ldr	r0, [r3, #0]
}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000374 	.word	0x20000374

080012a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b538      	push	{r3, r4, r5, lr}
 80012a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff fff6 	bl	8001298 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ac:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	bf1c      	itt	ne
 80012b0:	4b05      	ldrne	r3, [pc, #20]	; (80012c8 <HAL_Delay+0x24>)
 80012b2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80012b4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80012b6:	bf18      	it	ne
 80012b8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ba:	f7ff ffed 	bl	8001298 <HAL_GetTick>
 80012be:	1b40      	subs	r0, r0, r5
 80012c0:	4284      	cmp	r4, r0
 80012c2:	d8fa      	bhi.n	80012ba <HAL_Delay+0x16>
  {
  }
}
 80012c4:	bd38      	pop	{r3, r4, r5, pc}
 80012c6:	bf00      	nop
 80012c8:	2000004d 	.word	0x2000004d

080012cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80012ce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012d4:	041b      	lsls	r3, r3, #16
 80012d6:	0c1b      	lsrs	r3, r3, #16
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	0200      	lsls	r0, r0, #8
 80012de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80012e6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80012e8:	60d3      	str	r3, [r2, #12]
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f2:	b530      	push	{r4, r5, lr}
 80012f4:	68dc      	ldr	r4, [r3, #12]
 80012f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	2b04      	cmp	r3, #4
 8001302:	bf28      	it	cs
 8001304:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 0501 	mov.w	r5, #1
 800130c:	fa05 f303 	lsl.w	r3, r5, r3
 8001310:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001314:	bf8c      	ite	hi
 8001316:	3c03      	subhi	r4, #3
 8001318:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131a:	4019      	ands	r1, r3
 800131c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131e:	fa05 f404 	lsl.w	r4, r5, r4
 8001322:	3c01      	subs	r4, #1
 8001324:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001326:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	ea42 0201 	orr.w	r2, r2, r1
 800132c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	bfad      	iteet	ge
 8001332:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001336:	f000 000f 	andlt.w	r0, r0, #15
 800133a:	4b06      	ldrlt	r3, [pc, #24]	; (8001354 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	bfb5      	itete	lt
 8001342:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800134c:	bd30      	pop	{r4, r5, pc}
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00
 8001354:	e000ed14 	.word	0xe000ed14

08001358 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001358:	2800      	cmp	r0, #0
 800135a:	db08      	blt.n	800136e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135c:	0942      	lsrs	r2, r0, #5
 800135e:	2301      	movs	r3, #1
 8001360:	f000 001f 	and.w	r0, r0, #31
 8001364:	fa03 f000 	lsl.w	r0, r3, r0
 8001368:	4b01      	ldr	r3, [pc, #4]	; (8001370 <HAL_NVIC_EnableIRQ+0x18>)
 800136a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100

08001374 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001374:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001376:	4604      	mov	r4, r0
 8001378:	b160      	cbz	r0, 8001394 <HAL_CRC_Init+0x20>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800137a:	7943      	ldrb	r3, [r0, #5]
 800137c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001380:	b913      	cbnz	r3, 8001388 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001382:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001384:	f005 f9be 	bl	8006704 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001388:	2302      	movs	r3, #2
 800138a:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800138c:	2301      	movs	r3, #1
 800138e:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001390:	2000      	movs	r0, #0
 8001392:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001394:	2001      	movs	r0, #1
}
 8001396:	bd10      	pop	{r4, pc}

08001398 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001398:	6803      	ldr	r3, [r0, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013a0:	f023 0303 	bic.w	r3, r3, #3
 80013a4:	2118      	movs	r1, #24
 80013a6:	3a10      	subs	r2, #16
 80013a8:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013ac:	4904      	ldr	r1, [pc, #16]	; (80013c0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80013ae:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013b0:	bf88      	it	hi
 80013b2:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013b4:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013b6:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013b8:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80013ba:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	080093e4 	.word	0x080093e4

080013c4 <HAL_DMA_Init>:
{
 80013c4:	b570      	push	{r4, r5, r6, lr}
 80013c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff ff66 	bl	8001298 <HAL_GetTick>
 80013cc:	4605      	mov	r5, r0
  if(hdma == NULL)
 80013ce:	2c00      	cmp	r4, #0
 80013d0:	d071      	beq.n	80014b6 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80013d2:	2300      	movs	r3, #0
 80013d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80013d8:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80013da:	2302      	movs	r3, #2
 80013dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80013e0:	6813      	ldr	r3, [r2, #0]
 80013e2:	f023 0301 	bic.w	r3, r3, #1
 80013e6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e8:	6821      	ldr	r1, [r4, #0]
 80013ea:	680b      	ldr	r3, [r1, #0]
 80013ec:	07d8      	lsls	r0, r3, #31
 80013ee:	d43c      	bmi.n	800146a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80013f0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013f2:	4d32      	ldr	r5, [pc, #200]	; (80014bc <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013f4:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f6:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013f8:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013fa:	68a3      	ldr	r3, [r4, #8]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	68e2      	ldr	r2, [r4, #12]
 8001400:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001402:	6922      	ldr	r2, [r4, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	6962      	ldr	r2, [r4, #20]
 8001408:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140a:	69e2      	ldr	r2, [r4, #28]
 800140c:	4303      	orrs	r3, r0
 800140e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001410:	6a22      	ldr	r2, [r4, #32]
 8001412:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001414:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001416:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001418:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800141c:	bf01      	itttt	eq
 800141e:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001420:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001422:	4335      	orreq	r5, r6
 8001424:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001426:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001428:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800142a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800142c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001430:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001434:	d10b      	bne.n	800144e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001436:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001438:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800143a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800143c:	b13d      	cbz	r5, 800144e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800143e:	b9f8      	cbnz	r0, 8001480 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001440:	2a01      	cmp	r2, #1
 8001442:	d02d      	beq.n	80014a0 <HAL_DMA_Init+0xdc>
 8001444:	d301      	bcc.n	800144a <HAL_DMA_Init+0x86>
 8001446:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001448:	d101      	bne.n	800144e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800144a:	01ea      	lsls	r2, r5, #7
 800144c:	d42b      	bmi.n	80014a6 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800144e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001450:	4620      	mov	r0, r4
 8001452:	f7ff ffa1 	bl	8001398 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001456:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001458:	233f      	movs	r3, #63	; 0x3f
 800145a:	4093      	lsls	r3, r2
 800145c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800145e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001460:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001462:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001464:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001468:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800146a:	f7ff ff15 	bl	8001298 <HAL_GetTick>
 800146e:	1b40      	subs	r0, r0, r5
 8001470:	2805      	cmp	r0, #5
 8001472:	d9b9      	bls.n	80013e8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001474:	2320      	movs	r3, #32
 8001476:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001478:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800147a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800147e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001480:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001484:	d113      	bne.n	80014ae <HAL_DMA_Init+0xea>
    switch (tmp)
 8001486:	2a03      	cmp	r2, #3
 8001488:	d8e1      	bhi.n	800144e <HAL_DMA_Init+0x8a>
 800148a:	a001      	add	r0, pc, #4	; (adr r0, 8001490 <HAL_DMA_Init+0xcc>)
 800148c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001490:	080014a7 	.word	0x080014a7
 8001494:	0800144b 	.word	0x0800144b
 8001498:	080014a7 	.word	0x080014a7
 800149c:	080014a1 	.word	0x080014a1
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014a0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80014a4:	d1d3      	bne.n	800144e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014a6:	2340      	movs	r3, #64	; 0x40
 80014a8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80014aa:	2001      	movs	r0, #1
 80014ac:	e7e5      	b.n	800147a <HAL_DMA_Init+0xb6>
    switch (tmp)
 80014ae:	2a02      	cmp	r2, #2
 80014b0:	d9f9      	bls.n	80014a6 <HAL_DMA_Init+0xe2>
 80014b2:	2a03      	cmp	r2, #3
 80014b4:	e7c8      	b.n	8001448 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
 80014b8:	bd70      	pop	{r4, r5, r6, pc}
 80014ba:	bf00      	nop
 80014bc:	f010803f 	.word	0xf010803f

080014c0 <HAL_DMA_DeInit>:
{
 80014c0:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80014c2:	4605      	mov	r5, r0
 80014c4:	b320      	cbz	r0, 8001510 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80014c6:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80014ca:	b2e4      	uxtb	r4, r4
 80014cc:	2c02      	cmp	r4, #2
 80014ce:	d01d      	beq.n	800150c <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80014d0:	6803      	ldr	r3, [r0, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 80014d8:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80014da:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 80014dc:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80014de:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80014e0:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80014e2:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80014e4:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80014e6:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 80014e8:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014ea:	f7ff ff55 	bl	8001398 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ee:	6dea      	ldr	r2, [r5, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80014f0:	63ec      	str	r4, [r5, #60]	; 0x3c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014f2:	233f      	movs	r3, #63	; 0x3f
 80014f4:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 80014f6:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80014f8:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80014fa:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80014fc:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80014fe:	652c      	str	r4, [r5, #80]	; 0x50
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001500:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001502:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8001504:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001508:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 800150c:	4620      	mov	r0, r4
}
 800150e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001510:	2001      	movs	r0, #1
 8001512:	bd38      	pop	{r3, r4, r5, pc}

08001514 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001514:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001518:	2b02      	cmp	r3, #2
 800151a:	d003      	beq.n	8001524 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001520:	2001      	movs	r0, #1
 8001522:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001524:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001526:	2305      	movs	r3, #5
 8001528:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800152c:	6813      	ldr	r3, [r2, #0]
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001534:	2000      	movs	r0, #0
}
 8001536:	4770      	bx	lr

08001538 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001538:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800153a:	6804      	ldr	r4, [r0, #0]
 800153c:	9d04      	ldr	r5, [sp, #16]
 800153e:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8001540:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8001544:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8001548:	4333      	orrs	r3, r6
 800154a:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800154c:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800154e:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001550:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001554:	d130      	bne.n	80015b8 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001556:	6886      	ldr	r6, [r0, #8]
 8001558:	b11e      	cbz	r6, 8001562 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800155a:	2e01      	cmp	r6, #1
 800155c:	d103      	bne.n	8001566 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800155e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001562:	63a1      	str	r1, [r4, #56]	; 0x38
 8001564:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001566:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001568:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800156c:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001570:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001572:	d107      	bne.n	8001584 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8001574:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8001576:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001578:	02c9      	lsls	r1, r1, #11
 800157a:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800157e:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8001582:	e7ee      	b.n	8001562 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001584:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001586:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800158a:	d10a      	bne.n	80015a2 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 800158c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 800158e:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001590:	029b      	lsls	r3, r3, #10
 8001592:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8001596:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 800159a:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800159c:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 80015a0:	e7df      	b.n	8001562 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 80015a2:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 80015a4:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80015a6:	0209      	lsls	r1, r1, #8
 80015a8:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 80015ac:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 80015b0:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80015b2:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 80015b6:	e7d4      	b.n	8001562 <DMA2D_SetConfig+0x2a>
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80015b8:	60e1      	str	r1, [r4, #12]
 80015ba:	bd70      	pop	{r4, r5, r6, pc}

080015bc <HAL_DMA2D_Init>:
{
 80015bc:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 80015be:	4604      	mov	r4, r0
 80015c0:	b330      	cbz	r0, 8001610 <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80015c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015ca:	b91b      	cbnz	r3, 80015d4 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 80015cc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 80015d0:	f005 f8b0 	bl	8006734 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80015d4:	6822      	ldr	r2, [r4, #0]
 80015d6:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80015d8:	2302      	movs	r3, #2
 80015da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80015de:	6813      	ldr	r3, [r2, #0]
 80015e0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80015e4:	430b      	orrs	r3, r1
 80015e6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80015e8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80015ea:	68a1      	ldr	r1, [r4, #8]
 80015ec:	f023 0307 	bic.w	r3, r3, #7
 80015f0:	430b      	orrs	r3, r1
 80015f2:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80015f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80015f6:	68e1      	ldr	r1, [r4, #12]
 80015f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001600:	430b      	orrs	r3, r1
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001604:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001606:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001608:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800160a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800160e:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8001610:	2001      	movs	r0, #1
}
 8001612:	bd10      	pop	{r4, pc}

08001614 <HAL_DMA2D_Start>:
{
 8001614:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8001616:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 800161a:	2c01      	cmp	r4, #1
{
 800161c:	4605      	mov	r5, r0
 800161e:	f04f 0402 	mov.w	r4, #2
  __HAL_LOCK(hdma2d);
 8001622:	d00f      	beq.n	8001644 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001624:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8001628:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800162a:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 800162c:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001630:	9400      	str	r4, [sp, #0]
 8001632:	f7ff ff81 	bl	8001538 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001636:	682a      	ldr	r2, [r5, #0]
 8001638:	6813      	ldr	r3, [r2, #0]
 800163a:	4333      	orrs	r3, r6
 800163c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800163e:	2000      	movs	r0, #0
}
 8001640:	b002      	add	sp, #8
 8001642:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8001644:	4620      	mov	r0, r4
 8001646:	e7fb      	b.n	8001640 <HAL_DMA2D_Start+0x2c>

08001648 <HAL_DMA2D_PollForTransfer>:
{
 8001648:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800164a:	2300      	movs	r3, #0
 800164c:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800164e:	6803      	ldr	r3, [r0, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	07db      	lsls	r3, r3, #31
{
 8001654:	4604      	mov	r4, r0
 8001656:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001658:	d417      	bmi.n	800168a <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800165a:	6822      	ldr	r2, [r4, #0]
 800165c:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800165e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001660:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8001662:	069e      	lsls	r6, r3, #26
 8001664:	d506      	bpl.n	8001674 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8001666:	f7ff fe17 	bl	8001298 <HAL_GetTick>
 800166a:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	06d2      	lsls	r2, r2, #27
 8001672:	d543      	bpl.n	80016fc <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	2212      	movs	r2, #18
 8001678:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 800167a:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800167c:	2301      	movs	r3, #1
 800167e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001682:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001686:	b002      	add	sp, #8
 8001688:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800168a:	f7ff fe05 	bl	8001298 <HAL_GetTick>
 800168e:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	0792      	lsls	r2, r2, #30
 8001696:	d4e0      	bmi.n	800165a <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800169c:	9a01      	ldr	r2, [sp, #4]
 800169e:	f012 0f21 	tst.w	r2, #33	; 0x21
 80016a2:	d017      	beq.n	80016d4 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80016a4:	9a01      	ldr	r2, [sp, #4]
 80016a6:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80016a8:	bf42      	ittt	mi
 80016aa:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80016ac:	f042 0202 	orrmi.w	r2, r2, #2
 80016b0:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80016b2:	9a01      	ldr	r2, [sp, #4]
 80016b4:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80016b6:	bf42      	ittt	mi
 80016b8:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80016ba:	f042 0201 	orrmi.w	r2, r2, #1
 80016be:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80016c0:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80016c2:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80016c4:	2304      	movs	r3, #4
 80016c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 80016ca:	2300      	movs	r3, #0
 80016cc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 80016d0:	2001      	movs	r0, #1
 80016d2:	e7d8      	b.n	8001686 <HAL_DMA2D_PollForTransfer+0x3e>
      if(Timeout != HAL_MAX_DELAY)
 80016d4:	1c69      	adds	r1, r5, #1
 80016d6:	d0dc      	beq.n	8001692 <HAL_DMA2D_PollForTransfer+0x4a>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80016d8:	f7ff fdde 	bl	8001298 <HAL_GetTick>
 80016dc:	1b80      	subs	r0, r0, r6
 80016de:	4285      	cmp	r5, r0
 80016e0:	d301      	bcc.n	80016e6 <HAL_DMA2D_PollForTransfer+0x9e>
 80016e2:	2d00      	cmp	r5, #0
 80016e4:	d1d4      	bne.n	8001690 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80016e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016e8:	f043 0320 	orr.w	r3, r3, #32
 80016ec:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80016ee:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 80016f0:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80016f2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 80016f6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 80016fa:	e7c4      	b.n	8001686 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001700:	9a01      	ldr	r2, [sp, #4]
 8001702:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001706:	d016      	beq.n	8001736 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001708:	9a01      	ldr	r2, [sp, #4]
 800170a:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800170c:	bf42      	ittt	mi
 800170e:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8001710:	f042 0204 	orrmi.w	r2, r2, #4
 8001714:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001716:	9a01      	ldr	r2, [sp, #4]
 8001718:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800171a:	bf42      	ittt	mi
 800171c:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800171e:	f042 0202 	orrmi.w	r2, r2, #2
 8001722:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001724:	9a01      	ldr	r2, [sp, #4]
 8001726:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001728:	bf42      	ittt	mi
 800172a:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800172c:	f042 0201 	orrmi.w	r2, r2, #1
 8001730:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001732:	2229      	movs	r2, #41	; 0x29
 8001734:	e7c5      	b.n	80016c2 <HAL_DMA2D_PollForTransfer+0x7a>
      if(Timeout != HAL_MAX_DELAY)
 8001736:	1c69      	adds	r1, r5, #1
 8001738:	d099      	beq.n	800166e <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800173a:	f7ff fdad 	bl	8001298 <HAL_GetTick>
 800173e:	1b80      	subs	r0, r0, r6
 8001740:	4285      	cmp	r5, r0
 8001742:	d3d0      	bcc.n	80016e6 <HAL_DMA2D_PollForTransfer+0x9e>
 8001744:	2d00      	cmp	r5, #0
 8001746:	d191      	bne.n	800166c <HAL_DMA2D_PollForTransfer+0x24>
 8001748:	e7cd      	b.n	80016e6 <HAL_DMA2D_PollForTransfer+0x9e>

0800174a <HAL_DMA2D_LineEventCallback>:
 800174a:	4770      	bx	lr

0800174c <HAL_DMA2D_CLUTLoadingCpltCallback>:
{
 800174c:	4770      	bx	lr

0800174e <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800174e:	6803      	ldr	r3, [r0, #0]
{
 8001750:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001752:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001754:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001756:	07f2      	lsls	r2, r6, #31
{
 8001758:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800175a:	d514      	bpl.n	8001786 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800175c:	05e9      	lsls	r1, r5, #23
 800175e:	d512      	bpl.n	8001786 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001766:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001768:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001770:	2201      	movs	r2, #1
 8001772:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001774:	2304      	movs	r3, #4
 8001776:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800177a:	2300      	movs	r3, #0
 800177c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8001780:	6943      	ldr	r3, [r0, #20]
 8001782:	b103      	cbz	r3, 8001786 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8001784:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001786:	06b2      	lsls	r2, r6, #26
 8001788:	d516      	bpl.n	80017b8 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800178a:	04ab      	lsls	r3, r5, #18
 800178c:	d514      	bpl.n	80017b8 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800178e:	6823      	ldr	r3, [r4, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001796:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001798:	2220      	movs	r2, #32
 800179a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800179c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800179e:	f043 0302 	orr.w	r3, r3, #2
 80017a2:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80017a4:	2304      	movs	r3, #4
 80017a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80017aa:	2300      	movs	r3, #0
 80017ac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 80017b0:	6963      	ldr	r3, [r4, #20]
 80017b2:	b10b      	cbz	r3, 80017b8 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 80017b4:	4620      	mov	r0, r4
 80017b6:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80017b8:	0730      	lsls	r0, r6, #28
 80017ba:	d516      	bpl.n	80017ea <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80017bc:	0529      	lsls	r1, r5, #20
 80017be:	d514      	bpl.n	80017ea <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80017c0:	6823      	ldr	r3, [r4, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80017ca:	2208      	movs	r2, #8
 80017cc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80017ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80017d6:	2304      	movs	r3, #4
 80017d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80017dc:	2300      	movs	r3, #0
 80017de:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 80017e2:	6963      	ldr	r3, [r4, #20]
 80017e4:	b10b      	cbz	r3, 80017ea <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80017e6:	4620      	mov	r0, r4
 80017e8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80017ea:	0772      	lsls	r2, r6, #29
 80017ec:	d50b      	bpl.n	8001806 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80017ee:	056b      	lsls	r3, r5, #21
 80017f0:	d509      	bpl.n	8001806 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80017fc:	2204      	movs	r2, #4
 80017fe:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001800:	4620      	mov	r0, r4
 8001802:	f7ff ffa2 	bl	800174a <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001806:	07b0      	lsls	r0, r6, #30
 8001808:	d514      	bpl.n	8001834 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800180a:	05a9      	lsls	r1, r5, #22
 800180c:	d512      	bpl.n	8001834 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001816:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001818:	2202      	movs	r2, #2
 800181a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800181c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800181e:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001820:	2301      	movs	r3, #1
 8001822:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001826:	2300      	movs	r3, #0
 8001828:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferCpltCallback != NULL)
 800182c:	6923      	ldr	r3, [r4, #16]
 800182e:	b10b      	cbz	r3, 8001834 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8001830:	4620      	mov	r0, r4
 8001832:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001834:	06f2      	lsls	r2, r6, #27
 8001836:	d513      	bpl.n	8001860 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001838:	04eb      	lsls	r3, r5, #19
 800183a:	d511      	bpl.n	8001860 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001844:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001846:	2210      	movs	r2, #16
 8001848:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800184a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800184c:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800184e:	2301      	movs	r3, #1
 8001850:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001854:	2300      	movs	r3, #0
 8001856:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff ff76 	bl	800174c <HAL_DMA2D_CLUTLoadingCpltCallback>
 8001860:	bd70      	pop	{r4, r5, r6, pc}
	...

08001864 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8001864:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001868:	2b01      	cmp	r3, #1
{
 800186a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdma2d);
 8001870:	d036      	beq.n	80018e0 <HAL_DMA2D_ConfigLayer+0x7c>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001872:	010e      	lsls	r6, r1, #4
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001874:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001878:	1983      	adds	r3, r0, r6
  __HAL_LOCK(hdma2d);
 800187a:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800187c:	69dd      	ldr	r5, [r3, #28]
  __HAL_LOCK(hdma2d);
 800187e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001882:	6a1a      	ldr	r2, [r3, #32]
 8001884:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001886:	4f1b      	ldr	r7, [pc, #108]	; (80018f4 <HAL_DMA2D_ConfigLayer+0x90>)
 8001888:	6803      	ldr	r3, [r0, #0]
 800188a:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800188e:	3d09      	subs	r5, #9
 8001890:	2d01      	cmp	r5, #1
 8001892:	d80f      	bhi.n	80018b4 <HAL_DMA2D_ConfigLayer+0x50>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001894:	f004 4e7f 	and.w	lr, r4, #4278190080	; 0xff000000
 8001898:	ea4e 0202 	orr.w	r2, lr, r2
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800189c:	b969      	cbnz	r1, 80018ba <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800189e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80018a0:	4039      	ands	r1, r7
 80018a2:	430a      	orrs	r2, r1
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80018a6:	6982      	ldr	r2, [r0, #24]
 80018a8:	619a      	str	r2, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80018aa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80018ac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80018b0:	629a      	str	r2, [r3, #40]	; 0x28
 80018b2:	e00f      	b.n	80018d4 <HAL_DMA2D_ConfigLayer+0x70>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80018b4:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80018b8:	b1a1      	cbz	r1, 80018e4 <HAL_DMA2D_ConfigLayer+0x80>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80018ba:	69d9      	ldr	r1, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80018bc:	4406      	add	r6, r0
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80018be:	4039      	ands	r1, r7
 80018c0:	430a      	orrs	r2, r1
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80018c2:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80018c4:	61da      	str	r2, [r3, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80018c6:	bf98      	it	ls
 80018c8:	f024 447f 	bicls.w	r4, r4, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80018cc:	69b2      	ldr	r2, [r6, #24]
 80018ce:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80018d0:	bf98      	it	ls
 80018d2:	621c      	strls	r4, [r3, #32]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80018d4:	2301      	movs	r3, #1
 80018d6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80018da:	2300      	movs	r3, #0
 80018dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 80018e0:	4618      	mov	r0, r3
 80018e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80018e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80018e6:	4039      	ands	r1, r7
 80018e8:	430a      	orrs	r2, r1
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80018ec:	6982      	ldr	r2, [r0, #24]
 80018ee:	619a      	str	r2, [r3, #24]
 80018f0:	e7f0      	b.n	80018d4 <HAL_DMA2D_ConfigLayer+0x70>
 80018f2:	bf00      	nop
 80018f4:	00fcfff0 	.word	0x00fcfff0

080018f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018fc:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fe:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001900:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8001ac8 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001904:	4a6e      	ldr	r2, [pc, #440]	; (8001ac0 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001906:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8001acc <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800190e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001912:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001914:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001918:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800191c:	45b6      	cmp	lr, r6
 800191e:	f040 80b6 	bne.w	8001a8e <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001922:	684c      	ldr	r4, [r1, #4]
 8001924:	f024 0710 	bic.w	r7, r4, #16
 8001928:	2f02      	cmp	r7, #2
 800192a:	d116      	bne.n	800195a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800192c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001930:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001934:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001938:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800193c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001940:	f04f 0c0f 	mov.w	ip, #15
 8001944:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001948:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800194c:	690d      	ldr	r5, [r1, #16]
 800194e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001952:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001956:	f8ca 5020 	str.w	r5, [sl, #32]
 800195a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800195e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001960:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001964:	fa05 f50a 	lsl.w	r5, r5, sl
 8001968:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800196a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800196e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001972:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001976:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001978:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800197c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800197e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001982:	d811      	bhi.n	80019a8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001984:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001986:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800198a:	68cf      	ldr	r7, [r1, #12]
 800198c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001990:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001994:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001996:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001998:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800199c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80019a0:	409f      	lsls	r7, r3
 80019a2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80019a6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80019a8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019aa:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ac:	688f      	ldr	r7, [r1, #8]
 80019ae:	fa07 f70a 	lsl.w	r7, r7, sl
 80019b2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80019b4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b6:	00e5      	lsls	r5, r4, #3
 80019b8:	d569      	bpl.n	8001a8e <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	f04f 0b00 	mov.w	fp, #0
 80019be:	f8cd b00c 	str.w	fp, [sp, #12]
 80019c2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c6:	4d3f      	ldr	r5, [pc, #252]	; (8001ac4 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80019cc:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80019d0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80019d4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80019d8:	9703      	str	r7, [sp, #12]
 80019da:	9f03      	ldr	r7, [sp, #12]
 80019dc:	f023 0703 	bic.w	r7, r3, #3
 80019e0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80019e4:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e8:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80019ec:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80019f4:	f04f 0e0f 	mov.w	lr, #15
 80019f8:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019fc:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019fe:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a02:	d04b      	beq.n	8001a9c <HAL_GPIO_Init+0x1a4>
 8001a04:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a08:	42a8      	cmp	r0, r5
 8001a0a:	d049      	beq.n	8001aa0 <HAL_GPIO_Init+0x1a8>
 8001a0c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a10:	42a8      	cmp	r0, r5
 8001a12:	d047      	beq.n	8001aa4 <HAL_GPIO_Init+0x1ac>
 8001a14:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a18:	42a8      	cmp	r0, r5
 8001a1a:	d045      	beq.n	8001aa8 <HAL_GPIO_Init+0x1b0>
 8001a1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a20:	42a8      	cmp	r0, r5
 8001a22:	d043      	beq.n	8001aac <HAL_GPIO_Init+0x1b4>
 8001a24:	4548      	cmp	r0, r9
 8001a26:	d043      	beq.n	8001ab0 <HAL_GPIO_Init+0x1b8>
 8001a28:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001a2c:	42a8      	cmp	r0, r5
 8001a2e:	d041      	beq.n	8001ab4 <HAL_GPIO_Init+0x1bc>
 8001a30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a34:	42a8      	cmp	r0, r5
 8001a36:	d03f      	beq.n	8001ab8 <HAL_GPIO_Init+0x1c0>
 8001a38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a3c:	42a8      	cmp	r0, r5
 8001a3e:	d03d      	beq.n	8001abc <HAL_GPIO_Init+0x1c4>
 8001a40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a44:	42a8      	cmp	r0, r5
 8001a46:	bf14      	ite	ne
 8001a48:	250a      	movne	r5, #10
 8001a4a:	2509      	moveq	r5, #9
 8001a4c:	fa05 f50c 	lsl.w	r5, r5, ip
 8001a50:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a54:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001a56:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001a58:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a5a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	bf0c      	ite	eq
 8001a60:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001a62:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001a64:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001a66:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a68:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001a6c:	bf0c      	ite	eq
 8001a6e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001a70:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001a72:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a74:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a76:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	bf0c      	ite	eq
 8001a7c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001a7e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001a80:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001a82:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a84:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001a86:	bf54      	ite	pl
 8001a88:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001a8a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001a8c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8e:	3301      	adds	r3, #1
 8001a90:	2b10      	cmp	r3, #16
 8001a92:	f47f af3c 	bne.w	800190e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001a96:	b005      	add	sp, #20
 8001a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a9c:	465d      	mov	r5, fp
 8001a9e:	e7d5      	b.n	8001a4c <HAL_GPIO_Init+0x154>
 8001aa0:	2501      	movs	r5, #1
 8001aa2:	e7d3      	b.n	8001a4c <HAL_GPIO_Init+0x154>
 8001aa4:	2502      	movs	r5, #2
 8001aa6:	e7d1      	b.n	8001a4c <HAL_GPIO_Init+0x154>
 8001aa8:	2503      	movs	r5, #3
 8001aaa:	e7cf      	b.n	8001a4c <HAL_GPIO_Init+0x154>
 8001aac:	2504      	movs	r5, #4
 8001aae:	e7cd      	b.n	8001a4c <HAL_GPIO_Init+0x154>
 8001ab0:	2505      	movs	r5, #5
 8001ab2:	e7cb      	b.n	8001a4c <HAL_GPIO_Init+0x154>
 8001ab4:	2506      	movs	r5, #6
 8001ab6:	e7c9      	b.n	8001a4c <HAL_GPIO_Init+0x154>
 8001ab8:	2507      	movs	r5, #7
 8001aba:	e7c7      	b.n	8001a4c <HAL_GPIO_Init+0x154>
 8001abc:	2508      	movs	r5, #8
 8001abe:	e7c5      	b.n	8001a4c <HAL_GPIO_Init+0x154>
 8001ac0:	40013c00 	.word	0x40013c00
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40021400 	.word	0x40021400

08001ad0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001ad4:	4d46      	ldr	r5, [pc, #280]	; (8001bf0 <HAL_GPIO_DeInit+0x120>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001ad6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8001bf8 <HAL_GPIO_DeInit+0x128>
 8001ada:	f8df a120 	ldr.w	sl, [pc, #288]	; 8001bfc <HAL_GPIO_DeInit+0x12c>
 8001ade:	f8df b120 	ldr.w	fp, [pc, #288]	; 8001c00 <HAL_GPIO_DeInit+0x130>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ae2:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	fa03 fc02 	lsl.w	ip, r3, r2
    iocurrent = (GPIO_Pin) & ioposition;
 8001aea:	ea0c 0401 	and.w	r4, ip, r1
    if(iocurrent == ioposition)
 8001aee:	45a4      	cmp	ip, r4
 8001af0:	d167      	bne.n	8001bc2 <HAL_GPIO_DeInit+0xf2>
 8001af2:	f022 0603 	bic.w	r6, r2, #3
 8001af6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001afa:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001afe:	f002 0e03 	and.w	lr, r2, #3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001b02:	4b3c      	ldr	r3, [pc, #240]	; (8001bf4 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001b04:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001b08:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001b0c:	270f      	movs	r7, #15
 8001b0e:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001b12:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001b14:	ea08 0807 	and.w	r8, r8, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001b18:	d058      	beq.n	8001bcc <HAL_GPIO_DeInit+0xfc>
 8001b1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b1e:	4298      	cmp	r0, r3
 8001b20:	d056      	beq.n	8001bd0 <HAL_GPIO_DeInit+0x100>
 8001b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b26:	4298      	cmp	r0, r3
 8001b28:	d054      	beq.n	8001bd4 <HAL_GPIO_DeInit+0x104>
 8001b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b2e:	4298      	cmp	r0, r3
 8001b30:	d052      	beq.n	8001bd8 <HAL_GPIO_DeInit+0x108>
 8001b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b36:	4298      	cmp	r0, r3
 8001b38:	d050      	beq.n	8001bdc <HAL_GPIO_DeInit+0x10c>
 8001b3a:	4548      	cmp	r0, r9
 8001b3c:	d050      	beq.n	8001be0 <HAL_GPIO_DeInit+0x110>
 8001b3e:	4550      	cmp	r0, sl
 8001b40:	d050      	beq.n	8001be4 <HAL_GPIO_DeInit+0x114>
 8001b42:	4558      	cmp	r0, fp
 8001b44:	d050      	beq.n	8001be8 <HAL_GPIO_DeInit+0x118>
 8001b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4a:	4298      	cmp	r0, r3
 8001b4c:	d04e      	beq.n	8001bec <HAL_GPIO_DeInit+0x11c>
 8001b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b52:	4298      	cmp	r0, r3
 8001b54:	bf0c      	ite	eq
 8001b56:	2309      	moveq	r3, #9
 8001b58:	230a      	movne	r3, #10
 8001b5a:	fa03 f30e 	lsl.w	r3, r3, lr
 8001b5e:	4598      	cmp	r8, r3
 8001b60:	d110      	bne.n	8001b84 <HAL_GPIO_DeInit+0xb4>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001b62:	68b3      	ldr	r3, [r6, #8]
 8001b64:	ea23 0707 	bic.w	r7, r3, r7
 8001b68:	60b7      	str	r7, [r6, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001b6a:	682b      	ldr	r3, [r5, #0]
 8001b6c:	43e4      	mvns	r4, r4
 8001b6e:	4023      	ands	r3, r4
 8001b70:	602b      	str	r3, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001b72:	686b      	ldr	r3, [r5, #4]
 8001b74:	4023      	ands	r3, r4
 8001b76:	606b      	str	r3, [r5, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001b78:	68ab      	ldr	r3, [r5, #8]
 8001b7a:	4023      	ands	r3, r4
 8001b7c:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001b7e:	68eb      	ldr	r3, [r5, #12]
 8001b80:	401c      	ands	r4, r3
 8001b82:	60ec      	str	r4, [r5, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b84:	0056      	lsls	r6, r2, #1
 8001b86:	2303      	movs	r3, #3
 8001b88:	6804      	ldr	r4, [r0, #0]
 8001b8a:	40b3      	lsls	r3, r6
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401c      	ands	r4, r3
 8001b90:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b92:	08d4      	lsrs	r4, r2, #3
 8001b94:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8001b98:	f002 0e07 	and.w	lr, r2, #7
 8001b9c:	6a26      	ldr	r6, [r4, #32]
 8001b9e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001ba2:	270f      	movs	r7, #15
 8001ba4:	fa07 f70e 	lsl.w	r7, r7, lr
 8001ba8:	ea26 0707 	bic.w	r7, r6, r7
 8001bac:	6227      	str	r7, [r4, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bae:	6884      	ldr	r4, [r0, #8]
 8001bb0:	401c      	ands	r4, r3
 8001bb2:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb4:	6844      	ldr	r4, [r0, #4]
 8001bb6:	ea24 040c 	bic.w	r4, r4, ip
 8001bba:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bbc:	68c4      	ldr	r4, [r0, #12]
 8001bbe:	4023      	ands	r3, r4
 8001bc0:	60c3      	str	r3, [r0, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bc2:	3201      	adds	r2, #1
 8001bc4:	2a10      	cmp	r2, #16
 8001bc6:	d18d      	bne.n	8001ae4 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8001bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e7c4      	b.n	8001b5a <HAL_GPIO_DeInit+0x8a>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e7c2      	b.n	8001b5a <HAL_GPIO_DeInit+0x8a>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e7c0      	b.n	8001b5a <HAL_GPIO_DeInit+0x8a>
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e7be      	b.n	8001b5a <HAL_GPIO_DeInit+0x8a>
 8001bdc:	2304      	movs	r3, #4
 8001bde:	e7bc      	b.n	8001b5a <HAL_GPIO_DeInit+0x8a>
 8001be0:	2305      	movs	r3, #5
 8001be2:	e7ba      	b.n	8001b5a <HAL_GPIO_DeInit+0x8a>
 8001be4:	2306      	movs	r3, #6
 8001be6:	e7b8      	b.n	8001b5a <HAL_GPIO_DeInit+0x8a>
 8001be8:	2307      	movs	r3, #7
 8001bea:	e7b6      	b.n	8001b5a <HAL_GPIO_DeInit+0x8a>
 8001bec:	2308      	movs	r3, #8
 8001bee:	e7b4      	b.n	8001b5a <HAL_GPIO_DeInit+0x8a>
 8001bf0:	40013c00 	.word	0x40013c00
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	40021400 	.word	0x40021400
 8001bfc:	40021800 	.word	0x40021800
 8001c00:	40021c00 	.word	0x40021c00

08001c04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c04:	b10a      	cbz	r2, 8001c0a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c06:	6181      	str	r1, [r0, #24]
 8001c08:	4770      	bx	lr
 8001c0a:	0409      	lsls	r1, r1, #16
 8001c0c:	e7fb      	b.n	8001c06 <HAL_GPIO_WritePin+0x2>

08001c0e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001c0e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c12:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001c14:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 8001c18:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8001c1c:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8001c20:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8001c24:	2801      	cmp	r0, #1
 8001c26:	d028      	beq.n	8001c7a <HAL_HCD_HC_Init+0x6c>
  hhcd->hc[ch_num].do_ping = 0U;
 8001c28:	2028      	movs	r0, #40	; 0x28
 8001c2a:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 8001c2e:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8001c30:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c32:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 8001c36:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c3a:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c3e:	bf08      	it	eq
 8001c40:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 8001c42:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001c46:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c4a:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8001c4e:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c52:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c56:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8001c5a:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8001c5e:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 8001c62:	f8cd c008 	str.w	ip, [sp, #8]
 8001c66:	e88d 4080 	stmia.w	sp, {r7, lr}
 8001c6a:	6820      	ldr	r0, [r4, #0]
 8001c6c:	f002 fcfc 	bl	8004668 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001c70:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8001c74:	b004      	add	sp, #16
 8001c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8001c7a:	2002      	movs	r0, #2
 8001c7c:	e7fa      	b.n	8001c74 <HAL_HCD_HC_Init+0x66>

08001c7e <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8001c7e:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001c82:	2b01      	cmp	r3, #1
{
 8001c84:	b510      	push	{r4, lr}
 8001c86:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001c88:	d009      	beq.n	8001c9e <HAL_HCD_HC_Halt+0x20>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c90:	6800      	ldr	r0, [r0, #0]
 8001c92:	f002 fd73 	bl	800477c <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 8001c9c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001c9e:	2002      	movs	r0, #2
}
 8001ca0:	bd10      	pop	{r4, pc}

08001ca2 <HAL_HCD_Init>:
{
 8001ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8001ca6:	4607      	mov	r7, r0
{
 8001ca8:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8001caa:	2800      	cmp	r0, #0
 8001cac:	d041      	beq.n	8001d32 <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001cae:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 8001cb2:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001cb4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cb8:	b91b      	cbnz	r3, 8001cc2 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 8001cba:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8001cbe:	f005 f8bb 	bl	8006e38 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8001cca:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ccc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8001cd0:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8001cd4:	bf08      	it	eq
 8001cd6:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8001cd8:	f002 fb82 	bl	80043e0 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cde:	466d      	mov	r5, sp
 8001ce0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ce6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cea:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cee:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001cf2:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001cf4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001cf8:	6838      	ldr	r0, [r7, #0]
 8001cfa:	f002 fb2b 	bl	8004354 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001cfe:	f856 0b10 	ldr.w	r0, [r6], #16
 8001d02:	2101      	movs	r1, #1
 8001d04:	f002 fb72 	bl	80043ec <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001d08:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d0a:	466d      	mov	r5, sp
 8001d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d0e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d16:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d1a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001d1e:	6838      	ldr	r0, [r7, #0]
 8001d20:	f002 fc22 	bl	8004568 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 8001d2a:	2000      	movs	r0, #0
}
 8001d2c:	b00a      	add	sp, #40	; 0x28
 8001d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001d32:	2001      	movs	r0, #1
 8001d34:	e7fa      	b.n	8001d2c <HAL_HCD_Init+0x8a>
	...

08001d38 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001d3a:	2428      	movs	r4, #40	; 0x28
 8001d3c:	fb04 0401 	mla	r4, r4, r1, r0
{
 8001d40:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8001d44:	9e06      	ldr	r6, [sp, #24]
 8001d46:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001d4a:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d4e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8001d52:	b96f      	cbnz	r7, 8001d70 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d54:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d56:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8001d5c:	d02b      	beq.n	8001db6 <HAL_HCD_HC_SubmitRequest+0x7e>
 8001d5e:	42bb      	cmp	r3, r7
 8001d60:	d029      	beq.n	8001db6 <HAL_HCD_HC_SubmitRequest+0x7e>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d131      	bne.n	8001dca <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d66:	2328      	movs	r3, #40	; 0x28
 8001d68:	fb03 0301 	mla	r3, r3, r1, r0
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	e02a      	b.n	8001dc6 <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d70:	f04f 0e02 	mov.w	lr, #2
 8001d74:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d826      	bhi.n	8001dca <HAL_HCD_HC_SubmitRequest+0x92>
 8001d7c:	a401      	add	r4, pc, #4	; (adr r4, 8001d84 <HAL_HCD_HC_SubmitRequest+0x4c>)
 8001d7e:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8001d82:	bf00      	nop
 8001d84:	08001d95 	.word	0x08001d95
 8001d88:	08001d67 	.word	0x08001d67
 8001d8c:	08001db7 	.word	0x08001db7
 8001d90:	08001db7 	.word	0x08001db7
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001d94:	2f01      	cmp	r7, #1
 8001d96:	d118      	bne.n	8001dca <HAL_HCD_HC_SubmitRequest+0x92>
 8001d98:	b9ba      	cbnz	r2, 8001dca <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 8001d9a:	b925      	cbnz	r5, 8001da6 <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 8001d9c:	2328      	movs	r3, #40	; 0x28
 8001d9e:	fb03 0301 	mla	r3, r3, r1, r0
 8001da2:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001da6:	2328      	movs	r3, #40	; 0x28
 8001da8:	fb03 0301 	mla	r3, r3, r1, r0
 8001dac:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001db0:	b14a      	cbz	r2, 8001dc6 <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001db2:	2202      	movs	r2, #2
 8001db4:	e007      	b.n	8001dc6 <HAL_HCD_HC_SubmitRequest+0x8e>
 8001db6:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001db8:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8001dbc:	b9d2      	cbnz	r2, 8001df4 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001dbe:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 8001dc2:	2c00      	cmp	r4, #0
 8001dc4:	d1f5      	bne.n	8001db2 <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001dca:	2428      	movs	r4, #40	; 0x28
 8001dcc:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001dd0:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8001dd2:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001dd6:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001dd8:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8001dda:	649d      	str	r5, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ddc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8001de0:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8001de2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001de6:	3138      	adds	r1, #56	; 0x38
 8001de8:	7c02      	ldrb	r2, [r0, #16]
 8001dea:	6800      	ldr	r0, [r0, #0]
}
 8001dec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001df0:	f002 bd28 	b.w	8004844 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001df4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001df8:	e7da      	b.n	8001db0 <HAL_HCD_HC_SubmitRequest+0x78>
 8001dfa:	bf00      	nop

08001dfc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e00:	6806      	ldr	r6, [r0, #0]
{
 8001e02:	b087      	sub	sp, #28
 8001e04:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e06:	4630      	mov	r0, r6
 8001e08:	f002 fb50 	bl	80044ac <USB_GetMode>
 8001e0c:	2801      	cmp	r0, #1
 8001e0e:	f040 80b4 	bne.w	8001f7a <HAL_HCD_IRQHandler+0x17e>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e12:	6820      	ldr	r0, [r4, #0]
 8001e14:	f002 fb46 	bl	80044a4 <USB_ReadInterrupts>
 8001e18:	2800      	cmp	r0, #0
 8001e1a:	f000 80ae 	beq.w	8001f7a <HAL_HCD_IRQHandler+0x17e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e1e:	6820      	ldr	r0, [r4, #0]
 8001e20:	f002 fb40 	bl	80044a4 <USB_ReadInterrupts>
 8001e24:	0287      	lsls	r7, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e26:	bf48      	it	mi
 8001e28:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e2a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e2c:	bf44      	itt	mi
 8001e2e:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8001e32:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e34:	f002 fb36 	bl	80044a4 <USB_ReadInterrupts>
 8001e38:	02c5      	lsls	r5, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e3a:	bf48      	it	mi
 8001e3c:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e3e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e40:	bf44      	itt	mi
 8001e42:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8001e46:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e48:	f002 fb2c 	bl	80044a4 <USB_ReadInterrupts>
 8001e4c:	0140      	lsls	r0, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e4e:	bf48      	it	mi
 8001e50:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e52:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e54:	bf44      	itt	mi
 8001e56:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8001e5a:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e5c:	f002 fb22 	bl	80044a4 <USB_ReadInterrupts>
 8001e60:	0781      	lsls	r1, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e62:	bf48      	it	mi
 8001e64:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e66:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e68:	bf44      	itt	mi
 8001e6a:	2202      	movmi	r2, #2
 8001e6c:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e6e:	f002 fb19 	bl	80044a4 <USB_ReadInterrupts>
 8001e72:	0082      	lsls	r2, r0, #2
 8001e74:	d510      	bpl.n	8001e98 <HAL_HCD_IRQHandler+0x9c>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001e76:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8001e7a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001e7e:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001e82:	4620      	mov	r0, r4
 8001e84:	f005 f828 	bl	8006ed8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e88:	2101      	movs	r1, #1
 8001e8a:	6820      	ldr	r0, [r4, #0]
 8001e8c:	f002 fb12 	bl	80044b4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e98:	6820      	ldr	r0, [r4, #0]
 8001e9a:	f002 fb03 	bl	80044a4 <USB_ReadInterrupts>
 8001e9e:	01c3      	lsls	r3, r0, #7
 8001ea0:	d542      	bpl.n	8001f28 <HAL_HCD_IRQHandler+0x12c>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ea2:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001ea4:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001ea8:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8001eaa:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001eae:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001eb0:	9b05      	ldr	r3, [sp, #20]
 8001eb2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001eb6:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001eb8:	9b04      	ldr	r3, [sp, #16]
 8001eba:	079f      	lsls	r7, r3, #30
 8001ebc:	d50d      	bpl.n	8001eda <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001ebe:	9b04      	ldr	r3, [sp, #16]
 8001ec0:	07d8      	lsls	r0, r3, #31
 8001ec2:	d506      	bpl.n	8001ed2 <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001ec4:	69ab      	ldr	r3, [r5, #24]
 8001ec6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001eca:	61ab      	str	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f004 ffff 	bl	8006ed0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8001ed2:	9b05      	ldr	r3, [sp, #20]
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001eda:	9b04      	ldr	r3, [sp, #16]
 8001edc:	0719      	lsls	r1, r3, #28
 8001ede:	d519      	bpl.n	8001f14 <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001ee0:	9b05      	ldr	r3, [sp, #20]
 8001ee2:	f043 0308 	orr.w	r3, r3, #8
 8001ee6:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001ee8:	9b04      	ldr	r3, [sp, #16]
 8001eea:	075a      	lsls	r2, r3, #29
 8001eec:	d550      	bpl.n	8001f90 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001eee:	69a1      	ldr	r1, [r4, #24]
 8001ef0:	2902      	cmp	r1, #2
 8001ef2:	d145      	bne.n	8001f80 <HAL_HCD_IRQHandler+0x184>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001ef4:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ef6:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001ef8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001efc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f00:	bf18      	it	ne
 8001f02:	2101      	movne	r1, #1
 8001f04:	f002 fad6 	bl	80044b4 <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f004 ffea 	bl	8006ee2 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f004 ffde 	bl	8006ed0 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001f14:	9b04      	ldr	r3, [sp, #16]
 8001f16:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001f18:	bf42      	ittt	mi
 8001f1a:	9b05      	ldrmi	r3, [sp, #20]
 8001f1c:	f043 0320 	orrmi.w	r3, r3, #32
 8001f20:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001f22:	9b05      	ldr	r3, [sp, #20]
 8001f24:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f28:	6820      	ldr	r0, [r4, #0]
 8001f2a:	f002 fabb 	bl	80044a4 <USB_ReadInterrupts>
 8001f2e:	0707      	lsls	r7, r0, #28
 8001f30:	d505      	bpl.n	8001f3e <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 8001f32:	4620      	mov	r0, r4
 8001f34:	f004 ffc8 	bl	8006ec8 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f3e:	6820      	ldr	r0, [r4, #0]
 8001f40:	f002 fab0 	bl	80044a4 <USB_ReadInterrupts>
 8001f44:	0185      	lsls	r5, r0, #6
 8001f46:	d512      	bpl.n	8001f6e <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f48:	6820      	ldr	r0, [r4, #0]
 8001f4a:	f002 fc12 	bl	8004772 <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f4e:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f52:	9001      	str	r0, [sp, #4]
 8001f54:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f58:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001f5a:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001f5e:	46d3      	mov	fp, sl
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f60:	68a3      	ldr	r3, [r4, #8]
 8001f62:	459a      	cmp	sl, r3
 8001f64:	d323      	bcc.n	8001fae <HAL_HCD_IRQHandler+0x1b2>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f6c:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f6e:	6820      	ldr	r0, [r4, #0]
 8001f70:	f002 fa98 	bl	80044a4 <USB_ReadInterrupts>
 8001f74:	06c3      	lsls	r3, r0, #27
 8001f76:	f100 8220 	bmi.w	80023ba <HAL_HCD_IRQHandler+0x5be>
}
 8001f7a:	b007      	add	sp, #28
 8001f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001f80:	68e3      	ldr	r3, [r4, #12]
 8001f82:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8001f84:	bf04      	itt	eq
 8001f86:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8001f8a:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8001f8e:	e7bb      	b.n	8001f08 <HAL_HCD_IRQHandler+0x10c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001f90:	4620      	mov	r0, r4
 8001f92:	f004 ffaa 	bl	8006eea <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001f96:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001f9a:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001f9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001fa0:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001fa4:	6993      	ldr	r3, [r2, #24]
 8001fa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001faa:	6193      	str	r3, [r2, #24]
 8001fac:	e7b2      	b.n	8001f14 <HAL_HCD_IRQHandler+0x118>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001fae:	9a01      	ldr	r2, [sp, #4]
 8001fb0:	f00a 030f 	and.w	r3, sl, #15
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb8:	07d8      	lsls	r0, r3, #31
 8001fba:	f140 808a 	bpl.w	80020d2 <HAL_HCD_IRQHandler+0x2d6>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8001fc2:	6820      	ldr	r0, [r4, #0]
 8001fc4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001fc8:	fa5f f58a 	uxtb.w	r5, sl
 8001fcc:	f000 8104 	beq.w	80021d8 <HAL_HCD_IRQHandler+0x3dc>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001fd0:	016a      	lsls	r2, r5, #5
 8001fd2:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8001fd6:	18d6      	adds	r6, r2, r3
 8001fd8:	68b1      	ldr	r1, [r6, #8]
 8001fda:	0749      	lsls	r1, r1, #29
 8001fdc:	d513      	bpl.n	8002006 <HAL_HCD_IRQHandler+0x20a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001fde:	2104      	movs	r1, #4
 8001fe0:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fe2:	68f1      	ldr	r1, [r6, #12]
 8001fe4:	f041 0102 	orr.w	r1, r1, #2
 8001fe8:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001fea:	68b1      	ldr	r1, [r6, #8]
 8001fec:	0589      	lsls	r1, r1, #22
 8001fee:	d542      	bpl.n	8002076 <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ff0:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff2:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ffa:	4629      	mov	r1, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ffc:	f002 fbbe 	bl	800477c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002004:	e0c7      	b.n	8002196 <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002006:	68b1      	ldr	r1, [r6, #8]
 8002008:	0689      	lsls	r1, r1, #26
 800200a:	d502      	bpl.n	8002012 <HAL_HCD_IRQHandler+0x216>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800200c:	2120      	movs	r1, #32
 800200e:	60b1      	str	r1, [r6, #8]
 8002010:	e7eb      	b.n	8001fea <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002012:	68b1      	ldr	r1, [r6, #8]
 8002014:	0709      	lsls	r1, r1, #28
 8002016:	d515      	bpl.n	8002044 <HAL_HCD_IRQHandler+0x248>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002018:	68f1      	ldr	r1, [r6, #12]
 800201a:	9303      	str	r3, [sp, #12]
 800201c:	f041 0102 	orr.w	r1, r1, #2
 8002020:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002022:	fb07 4105 	mla	r1, r7, r5, r4
 8002026:	f04f 0e05 	mov.w	lr, #5
 800202a:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800202e:	2110      	movs	r1, #16
 8002030:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002032:	2108      	movs	r1, #8
 8002034:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002036:	4629      	mov	r1, r5
 8002038:	9202      	str	r2, [sp, #8]
 800203a:	f002 fb9f 	bl	800477c <USB_HC_Halt>
 800203e:	9a02      	ldr	r2, [sp, #8]
 8002040:	9b03      	ldr	r3, [sp, #12]
 8002042:	e7d2      	b.n	8001fea <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002044:	68b1      	ldr	r1, [r6, #8]
 8002046:	0549      	lsls	r1, r1, #21
 8002048:	d5cf      	bpl.n	8001fea <HAL_HCD_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800204a:	68f1      	ldr	r1, [r6, #12]
 800204c:	9303      	str	r3, [sp, #12]
 800204e:	f041 0102 	orr.w	r1, r1, #2
 8002052:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002054:	4629      	mov	r1, r5
 8002056:	9202      	str	r2, [sp, #8]
 8002058:	f002 fb90 	bl	800477c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800205c:	2110      	movs	r1, #16
 800205e:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002060:	fb07 4105 	mla	r1, r7, r5, r4
 8002064:	2008      	movs	r0, #8
 8002066:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800206a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800206e:	60b1      	str	r1, [r6, #8]
 8002070:	9b03      	ldr	r3, [sp, #12]
 8002072:	9a02      	ldr	r2, [sp, #8]
 8002074:	e7b9      	b.n	8001fea <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002076:	68b1      	ldr	r1, [r6, #8]
 8002078:	07c8      	lsls	r0, r1, #31
 800207a:	d53d      	bpl.n	80020f8 <HAL_HCD_IRQHandler+0x2fc>
    if (hhcd->Init.dma_enable != 0U)
 800207c:	6921      	ldr	r1, [r4, #16]
 800207e:	b149      	cbz	r1, 8002094 <HAL_HCD_IRQHandler+0x298>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002080:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002084:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002086:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800208a:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800208e:	1a09      	subs	r1, r1, r0
 8002090:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8002094:	fb07 4e05 	mla	lr, r7, r5, r4
 8002098:	2001      	movs	r0, #1
 800209a:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 800209e:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020a2:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020a4:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 80020a8:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 80020ac:	d116      	bne.n	80020dc <HAL_HCD_IRQHandler+0x2e0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020ae:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020b0:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020b2:	f043 0302 	orr.w	r3, r3, #2
 80020b6:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020b8:	4629      	mov	r1, r5
 80020ba:	f002 fb5f 	bl	800477c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020be:	2310      	movs	r3, #16
 80020c0:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80020c2:	fb07 4505 	mla	r5, r7, r5, r4
 80020c6:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80020ca:	f083 0301 	eor.w	r3, r3, #1
 80020ce:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020d2:	f10a 0a01 	add.w	sl, sl, #1
 80020d6:	f108 0820 	add.w	r8, r8, #32
 80020da:	e741      	b.n	8001f60 <HAL_HCD_IRQHandler+0x164>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020dc:	2903      	cmp	r1, #3
 80020de:	d1f0      	bne.n	80020c2 <HAL_HCD_IRQHandler+0x2c6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020e0:	58d1      	ldr	r1, [r2, r3]
 80020e2:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80020e6:	50d1      	str	r1, [r2, r3]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020e8:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020ec:	4602      	mov	r2, r0
 80020ee:	4629      	mov	r1, r5
 80020f0:	4620      	mov	r0, r4
 80020f2:	f004 fef5 	bl	8006ee0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80020f6:	e7e4      	b.n	80020c2 <HAL_HCD_IRQHandler+0x2c6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020f8:	68b1      	ldr	r1, [r6, #8]
 80020fa:	0789      	lsls	r1, r1, #30
 80020fc:	d536      	bpl.n	800216c <HAL_HCD_IRQHandler+0x370>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020fe:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002100:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002104:	f021 0102 	bic.w	r1, r1, #2
 8002108:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800210a:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 800210e:	2901      	cmp	r1, #1
 8002110:	d10c      	bne.n	800212c <HAL_HCD_IRQHandler+0x330>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002112:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002116:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800211a:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800211e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8002122:	4629      	mov	r1, r5
 8002124:	4620      	mov	r0, r4
 8002126:	f004 fedb 	bl	8006ee0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800212a:	e7d2      	b.n	80020d2 <HAL_HCD_IRQHandler+0x2d6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800212c:	2905      	cmp	r1, #5
 800212e:	d0f0      	beq.n	8002112 <HAL_HCD_IRQHandler+0x316>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002130:	2906      	cmp	r1, #6
 8002132:	d001      	beq.n	8002138 <HAL_HCD_IRQHandler+0x33c>
 8002134:	2908      	cmp	r1, #8
 8002136:	d114      	bne.n	8002162 <HAL_HCD_IRQHandler+0x366>
      hhcd->hc[ch_num].ErrCnt++;
 8002138:	fb07 4105 	mla	r1, r7, r5, r4
 800213c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800213e:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002140:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 8002142:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002144:	bf83      	ittte	hi
 8002146:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002148:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800214c:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002150:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002154:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002156:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800215a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800215e:	50d1      	str	r1, [r2, r3]
 8002160:	e7d9      	b.n	8002116 <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002162:	2903      	cmp	r1, #3
 8002164:	d1d7      	bne.n	8002116 <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002166:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 800216a:	e7f3      	b.n	8002154 <HAL_HCD_IRQHandler+0x358>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800216c:	68b1      	ldr	r1, [r6, #8]
 800216e:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8002172:	d012      	beq.n	800219a <HAL_HCD_IRQHandler+0x39e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002174:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002176:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800217e:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002182:	4629      	mov	r1, r5
    hhcd->hc[ch_num].ErrCnt++;
 8002184:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002186:	3201      	adds	r2, #1
 8002188:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 800218a:	2206      	movs	r2, #6
 800218c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002190:	f002 faf4 	bl	800477c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	60b3      	str	r3, [r6, #8]
 8002198:	e79b      	b.n	80020d2 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800219a:	68b3      	ldr	r3, [r6, #8]
 800219c:	06da      	lsls	r2, r3, #27
 800219e:	d598      	bpl.n	80020d2 <HAL_HCD_IRQHandler+0x2d6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021a0:	fb07 4205 	mla	r2, r7, r5, r4
 80021a4:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d10a      	bne.n	80021c2 <HAL_HCD_IRQHandler+0x3c6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80021ac:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021ae:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021b0:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021b2:	f043 0302 	orr.w	r3, r3, #2
 80021b6:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021b8:	4629      	mov	r1, r5
 80021ba:	f002 fadf 	bl	800477c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021be:	2310      	movs	r3, #16
 80021c0:	e7e9      	b.n	8002196 <HAL_HCD_IRQHandler+0x39a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021c2:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 80021c6:	d1fa      	bne.n	80021be <HAL_HCD_IRQHandler+0x3c2>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80021c8:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 80021ca:	6923      	ldr	r3, [r4, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f6      	bne.n	80021be <HAL_HCD_IRQHandler+0x3c2>
        hhcd->hc[ch_num].state = HC_NAK;
 80021d0:	2303      	movs	r3, #3
 80021d2:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 80021d6:	e7ea      	b.n	80021ae <HAL_HCD_IRQHandler+0x3b2>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021d8:	0169      	lsls	r1, r5, #5
 80021da:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 80021de:	188e      	adds	r6, r1, r2
 80021e0:	68b3      	ldr	r3, [r6, #8]
 80021e2:	f013 0e04 	ands.w	lr, r3, #4
 80021e6:	d006      	beq.n	80021f6 <HAL_HCD_IRQHandler+0x3fa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021e8:	2304      	movs	r3, #4
 80021ea:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021ec:	68f3      	ldr	r3, [r6, #12]
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	60f3      	str	r3, [r6, #12]
 80021f4:	e76d      	b.n	80020d2 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021f6:	68b3      	ldr	r3, [r6, #8]
 80021f8:	f013 0320 	ands.w	r3, r3, #32
 80021fc:	d014      	beq.n	8002228 <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021fe:	2320      	movs	r3, #32
 8002200:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002202:	fb07 4305 	mla	r3, r7, r5, r4
 8002206:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800220a:	2a01      	cmp	r2, #1
 800220c:	f47f af61 	bne.w	80020d2 <HAL_HCD_IRQHandler+0x2d6>
      hhcd->hc[ch_num].do_ping = 0U;
 8002210:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002214:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002218:	68f3      	ldr	r3, [r6, #12]
 800221a:	f043 0302 	orr.w	r3, r3, #2
 800221e:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002220:	4629      	mov	r1, r5
 8002222:	f002 faab 	bl	800477c <USB_HC_Halt>
 8002226:	e754      	b.n	80020d2 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002228:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800222c:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8002230:	d011      	beq.n	8002256 <HAL_HCD_IRQHandler+0x45a>
    hhcd->hc[ch_num].state = HC_NYET;
 8002232:	fb07 4205 	mla	r2, r7, r5, r4
 8002236:	2104      	movs	r1, #4
 8002238:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 800223c:	2101      	movs	r1, #1
 800223e:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002242:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002244:	68f3      	ldr	r3, [r6, #12]
 8002246:	f043 0302 	orr.w	r3, r3, #2
 800224a:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800224c:	4629      	mov	r1, r5
 800224e:	f002 fa95 	bl	800477c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002252:	2340      	movs	r3, #64	; 0x40
 8002254:	e79f      	b.n	8002196 <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002256:	68b3      	ldr	r3, [r6, #8]
 8002258:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 800225c:	d005      	beq.n	800226a <HAL_HCD_IRQHandler+0x46e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800225e:	68f3      	ldr	r3, [r6, #12]
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002266:	4629      	mov	r1, r5
 8002268:	e6c8      	b.n	8001ffc <HAL_HCD_IRQHandler+0x200>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800226a:	68b3      	ldr	r3, [r6, #8]
 800226c:	07db      	lsls	r3, r3, #31
 800226e:	d511      	bpl.n	8002294 <HAL_HCD_IRQHandler+0x498>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002270:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002272:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002276:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 800227a:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800227e:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002280:	60f2      	str	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002282:	9302      	str	r3, [sp, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002284:	f002 fa7a 	bl	800477c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002288:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800228a:	2201      	movs	r2, #1
 800228c:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800228e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8002292:	e71e      	b.n	80020d2 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002294:	68b3      	ldr	r3, [r6, #8]
 8002296:	071b      	lsls	r3, r3, #28
 8002298:	d50e      	bpl.n	80022b8 <HAL_HCD_IRQHandler+0x4bc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800229a:	2308      	movs	r3, #8
 800229c:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800229e:	68f3      	ldr	r3, [r6, #12]
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a6:	4629      	mov	r1, r5
 80022a8:	f002 fa68 	bl	800477c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80022ac:	fb07 4505 	mla	r5, r7, r5, r4
 80022b0:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80022b2:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 80022b6:	e70c      	b.n	80020d2 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022b8:	68b3      	ldr	r3, [r6, #8]
 80022ba:	06db      	lsls	r3, r3, #27
 80022bc:	d515      	bpl.n	80022ea <HAL_HCD_IRQHandler+0x4ee>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022be:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 80022c2:	2203      	movs	r2, #3
 80022c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 80022c8:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022cc:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 80022d0:	b92a      	cbnz	r2, 80022de <HAL_HCD_IRQHandler+0x4e2>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80022d2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80022d6:	b912      	cbnz	r2, 80022de <HAL_HCD_IRQHandler+0x4e2>
        hhcd->hc[ch_num].do_ping = 1U;
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022de:	68f3      	ldr	r3, [r6, #12]
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e6:	4629      	mov	r1, r5
 80022e8:	e767      	b.n	80021ba <HAL_HCD_IRQHandler+0x3be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022ea:	68b3      	ldr	r3, [r6, #8]
 80022ec:	061b      	lsls	r3, r3, #24
 80022ee:	d50c      	bpl.n	800230a <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f0:	68f3      	ldr	r3, [r6, #12]
 80022f2:	f043 0302 	orr.w	r3, r3, #2
 80022f6:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022f8:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022fa:	fb07 4505 	mla	r5, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022fe:	f002 fa3d 	bl	800477c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002302:	2306      	movs	r3, #6
 8002304:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8002308:	e744      	b.n	8002194 <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800230a:	68b3      	ldr	r3, [r6, #8]
 800230c:	055b      	lsls	r3, r3, #21
 800230e:	d50f      	bpl.n	8002330 <HAL_HCD_IRQHandler+0x534>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002310:	68f3      	ldr	r3, [r6, #12]
 8002312:	f043 0302 	orr.w	r3, r3, #2
 8002316:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002318:	4629      	mov	r1, r5
 800231a:	f002 fa2f 	bl	800477c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800231e:	2310      	movs	r3, #16
 8002320:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002326:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002328:	fb07 4505 	mla	r5, r7, r5, r4
 800232c:	2308      	movs	r3, #8
 800232e:	e7c0      	b.n	80022b2 <HAL_HCD_IRQHandler+0x4b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002330:	68b3      	ldr	r3, [r6, #8]
 8002332:	0798      	lsls	r0, r3, #30
 8002334:	f57f aecd 	bpl.w	80020d2 <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002338:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800233a:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800233e:	f023 0302 	bic.w	r3, r3, #2
 8002342:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002344:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002348:	2b01      	cmp	r3, #1
 800234a:	d10e      	bne.n	800236a <HAL_HCD_IRQHandler+0x56e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800234c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002350:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8002354:	3b02      	subs	r3, #2
 8002356:	2b01      	cmp	r3, #1
 8002358:	f63f aedd 	bhi.w	8002116 <HAL_HCD_IRQHandler+0x31a>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800235c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002360:	f083 0301 	eor.w	r3, r3, #1
 8002364:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8002368:	e6d5      	b.n	8002116 <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800236a:	2b03      	cmp	r3, #3
 800236c:	d102      	bne.n	8002374 <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800236e:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8002372:	e6d0      	b.n	8002116 <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002374:	2b04      	cmp	r3, #4
 8002376:	d0fa      	beq.n	800236e <HAL_HCD_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002378:	2b05      	cmp	r3, #5
 800237a:	d102      	bne.n	8002382 <HAL_HCD_IRQHandler+0x586>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800237c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8002380:	e6c9      	b.n	8002116 <HAL_HCD_IRQHandler+0x31a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002382:	2b06      	cmp	r3, #6
 8002384:	d002      	beq.n	800238c <HAL_HCD_IRQHandler+0x590>
 8002386:	2b08      	cmp	r3, #8
 8002388:	f47f aec5 	bne.w	8002116 <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].ErrCnt++;
 800238c:	fb07 4005 	mla	r0, r7, r5, r4
 8002390:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002392:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002394:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 8002396:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002398:	bf84      	itt	hi
 800239a:	2304      	movhi	r3, #4
 800239c:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023a0:	588b      	ldr	r3, [r1, r2]
        hhcd->hc[ch_num].ErrCnt = 0U;
 80023a2:	bf88      	it	hi
 80023a4:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023b0:	bf98      	it	ls
 80023b2:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023b6:	508b      	str	r3, [r1, r2]
 80023b8:	e6ad      	b.n	8002116 <HAL_HCD_IRQHandler+0x31a>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023ba:	6826      	ldr	r6, [r4, #0]
 80023bc:	69b3      	ldr	r3, [r6, #24]
 80023be:	f023 0310 	bic.w	r3, r3, #16
 80023c2:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 80023c4:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80023c6:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 80023ca:	2a02      	cmp	r2, #2
 80023cc:	d129      	bne.n	8002422 <HAL_HCD_IRQHandler+0x626>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023ce:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80023d2:	f1b8 0f00 	cmp.w	r8, #0
 80023d6:	d024      	beq.n	8002422 <HAL_HCD_IRQHandler+0x626>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80023d8:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80023dc:	2728      	movs	r7, #40	; 0x28
 80023de:	fb07 4705 	mla	r7, r7, r5, r4
 80023e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80023e4:	b1e9      	cbz	r1, 8002422 <HAL_HCD_IRQHandler+0x626>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80023e6:	4642      	mov	r2, r8
 80023e8:	4630      	mov	r0, r6
 80023ea:	f002 f84d 	bl	8004488 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80023ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f0:	4443      	add	r3, r8
 80023f2:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80023f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f6:	4443      	add	r3, r8
 80023f8:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80023fa:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 80023fe:	016b      	lsls	r3, r5, #5
 8002400:	199a      	adds	r2, r3, r6
 8002402:	6911      	ldr	r1, [r2, #16]
 8002404:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <HAL_HCD_IRQHandler+0x634>)
 8002406:	400a      	ands	r2, r1
 8002408:	b15a      	cbz	r2, 8002422 <HAL_HCD_IRQHandler+0x626>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800240a:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800240c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002410:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002414:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002416:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800241a:	f083 0301 	eor.w	r3, r3, #1
 800241e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002422:	6822      	ldr	r2, [r4, #0]
 8002424:	6993      	ldr	r3, [r2, #24]
 8002426:	f043 0310 	orr.w	r3, r3, #16
 800242a:	6193      	str	r3, [r2, #24]
 800242c:	e5a5      	b.n	8001f7a <HAL_HCD_IRQHandler+0x17e>
 800242e:	bf00      	nop
 8002430:	1ff80000 	.word	0x1ff80000

08002434 <HAL_HCD_Start>:
{
 8002434:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8002436:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800243a:	2b01      	cmp	r3, #1
{
 800243c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800243e:	d00d      	beq.n	800245c <HAL_HCD_Start+0x28>
 8002440:	2501      	movs	r5, #1
 8002442:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002446:	6800      	ldr	r0, [r0, #0]
 8002448:	f001 ffc4 	bl	80043d4 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800244c:	4629      	mov	r1, r5
 800244e:	6820      	ldr	r0, [r4, #0]
 8002450:	f002 f86a 	bl	8004528 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002454:	2000      	movs	r0, #0
 8002456:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 800245a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 800245c:	2002      	movs	r0, #2
}
 800245e:	bd38      	pop	{r3, r4, r5, pc}

08002460 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002460:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8002464:	2b01      	cmp	r3, #1
{
 8002466:	b510      	push	{r4, lr}
 8002468:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800246a:	d009      	beq.n	8002480 <HAL_HCD_Stop+0x20>
 800246c:	2301      	movs	r3, #1
 800246e:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002472:	6800      	ldr	r0, [r0, #0]
 8002474:	f002 fa98 	bl	80049a8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002478:	2000      	movs	r0, #0
 800247a:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 800247e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002480:	2002      	movs	r0, #2
}
 8002482:	bd10      	pop	{r4, pc}

08002484 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8002484:	6800      	ldr	r0, [r0, #0]
 8002486:	f002 b831 	b.w	80044ec <USB_ResetPort>

0800248a <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800248a:	2328      	movs	r3, #40	; 0x28
 800248c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002490:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8002494:	4770      	bx	lr

08002496 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8002496:	2328      	movs	r3, #40	; 0x28
 8002498:	fb03 0101 	mla	r1, r3, r1, r0
}
 800249c:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800249e:	4770      	bx	lr

080024a0 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 80024a0:	6800      	ldr	r0, [r0, #0]
 80024a2:	f002 b8dc 	b.w	800465e <USB_GetCurrentFrame>

080024a6 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 80024a6:	6800      	ldr	r0, [r0, #0]
 80024a8:	f002 b8ce 	b.w	8004648 <USB_GetHostSpeed>

080024ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024ac:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024ae:	4604      	mov	r4, r0
 80024b0:	b908      	cbnz	r0, 80024b6 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80024b2:	2001      	movs	r0, #1
 80024b4:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024be:	b91b      	cbnz	r3, 80024c8 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024c4:	f004 f954 	bl	8006770 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024c8:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80024ca:	2324      	movs	r3, #36	; 0x24
 80024cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80024d0:	6813      	ldr	r3, [r2, #0]
 80024d2:	f023 0301 	bic.w	r3, r3, #1
 80024d6:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024d8:	f000 fcdc 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024dc:	6865      	ldr	r5, [r4, #4]
 80024de:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <HAL_I2C_Init+0x138>)
 80024e0:	429d      	cmp	r5, r3
 80024e2:	d84d      	bhi.n	8002580 <HAL_I2C_Init+0xd4>
 80024e4:	4b40      	ldr	r3, [pc, #256]	; (80025e8 <HAL_I2C_Init+0x13c>)
 80024e6:	4298      	cmp	r0, r3
 80024e8:	d9e3      	bls.n	80024b2 <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ea:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80024ec:	493f      	ldr	r1, [pc, #252]	; (80025ec <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ee:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80024f0:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024f8:	430b      	orrs	r3, r1
 80024fa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024fc:	6a13      	ldr	r3, [r2, #32]
 80024fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002502:	3101      	adds	r1, #1
 8002504:	4319      	orrs	r1, r3
 8002506:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002508:	69d1      	ldr	r1, [r2, #28]
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_I2C_Init+0x138>)
 800250c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002510:	429d      	cmp	r5, r3
 8002512:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002516:	f100 30ff 	add.w	r0, r0, #4294967295
 800251a:	d848      	bhi.n	80025ae <HAL_I2C_Init+0x102>
 800251c:	006d      	lsls	r5, r5, #1
 800251e:	fbb0 f0f5 	udiv	r0, r0, r5
 8002522:	3001      	adds	r0, #1
 8002524:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002528:	2b04      	cmp	r3, #4
 800252a:	bf38      	it	cc
 800252c:	2304      	movcc	r3, #4
 800252e:	430b      	orrs	r3, r1
 8002530:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002532:	6811      	ldr	r1, [r2, #0]
 8002534:	6a20      	ldr	r0, [r4, #32]
 8002536:	69e3      	ldr	r3, [r4, #28]
 8002538:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800253c:	4303      	orrs	r3, r0
 800253e:	430b      	orrs	r3, r1
 8002540:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002542:	6891      	ldr	r1, [r2, #8]
 8002544:	68e0      	ldr	r0, [r4, #12]
 8002546:	6923      	ldr	r3, [r4, #16]
 8002548:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800254c:	4303      	orrs	r3, r0
 800254e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002552:	430b      	orrs	r3, r1
 8002554:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002556:	68d1      	ldr	r1, [r2, #12]
 8002558:	69a0      	ldr	r0, [r4, #24]
 800255a:	6963      	ldr	r3, [r4, #20]
 800255c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002560:	4303      	orrs	r3, r0
 8002562:	430b      	orrs	r3, r1
 8002564:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002566:	6813      	ldr	r3, [r2, #0]
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800256e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002570:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002572:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002574:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002578:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800257a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 800257e:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <HAL_I2C_Init+0x144>)
 8002582:	4298      	cmp	r0, r3
 8002584:	d995      	bls.n	80024b2 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002586:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002588:	4e18      	ldr	r6, [pc, #96]	; (80025ec <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800258a:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800258c:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002590:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002594:	4333      	orrs	r3, r6
 8002596:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002598:	6a13      	ldr	r3, [r2, #32]
 800259a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800259e:	4371      	muls	r1, r6
 80025a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025a4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80025a8:	fbb1 f1f6 	udiv	r1, r1, r6
 80025ac:	e7a9      	b.n	8002502 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025ae:	68a3      	ldr	r3, [r4, #8]
 80025b0:	b953      	cbnz	r3, 80025c8 <HAL_I2C_Init+0x11c>
 80025b2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80025b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80025ba:	1c43      	adds	r3, r0, #1
 80025bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c0:	b16b      	cbz	r3, 80025de <HAL_I2C_Init+0x132>
 80025c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c6:	e7b2      	b.n	800252e <HAL_I2C_Init+0x82>
 80025c8:	2319      	movs	r3, #25
 80025ca:	436b      	muls	r3, r5
 80025cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80025d0:	1c43      	adds	r3, r0, #1
 80025d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d6:	b113      	cbz	r3, 80025de <HAL_I2C_Init+0x132>
 80025d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025dc:	e7a7      	b.n	800252e <HAL_I2C_Init+0x82>
 80025de:	2301      	movs	r3, #1
 80025e0:	e7a5      	b.n	800252e <HAL_I2C_Init+0x82>
 80025e2:	bf00      	nop
 80025e4:	000186a0 	.word	0x000186a0
 80025e8:	001e847f 	.word	0x001e847f
 80025ec:	000f4240 	.word	0x000f4240
 80025f0:	003d08ff 	.word	0x003d08ff

080025f4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	2a20      	cmp	r2, #32
{
 80025fc:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025fe:	d116      	bne.n	800262e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002600:	2324      	movs	r3, #36	; 0x24
 8002602:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002606:	6803      	ldr	r3, [r0, #0]
 8002608:	681c      	ldr	r4, [r3, #0]
 800260a:	f024 0401 	bic.w	r4, r4, #1
 800260e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002610:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002612:	f024 0410 	bic.w	r4, r4, #16
 8002616:	625c      	str	r4, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002618:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800261a:	4321      	orrs	r1, r4
 800261c:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800261e:	6819      	ldr	r1, [r3, #0]
 8002620:	f041 0101 	orr.w	r1, r1, #1
 8002624:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002626:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_OK;
 800262a:	2000      	movs	r0, #0
 800262c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800262e:	2002      	movs	r0, #2
  }
}
 8002630:	bd10      	pop	{r4, pc}

08002632 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002632:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002634:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8002638:	b2e4      	uxtb	r4, r4
 800263a:	2c20      	cmp	r4, #32
 800263c:	d116      	bne.n	800266c <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800263e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002640:	2324      	movs	r3, #36	; 0x24
 8002642:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8002646:	6815      	ldr	r5, [r2, #0]
 8002648:	f025 0501 	bic.w	r5, r5, #1
 800264c:	6015      	str	r5, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800264e:	6a55      	ldr	r5, [r2, #36]	; 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002650:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002654:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002656:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002658:	b29b      	uxth	r3, r3
 800265a:	6253      	str	r3, [r2, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800265c:	6813      	ldr	r3, [r2, #0]
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002664:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d

    return HAL_OK;
 8002668:	2000      	movs	r0, #0
 800266a:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 800266c:	2002      	movs	r0, #2
  }
}
 800266e:	bd30      	pop	{r4, r5, pc}

08002670 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002674:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002676:	6804      	ldr	r4, [r0, #0]
 8002678:	684f      	ldr	r7, [r1, #4]
 800267a:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800267c:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002680:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002684:	3284      	adds	r2, #132	; 0x84
 8002686:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002688:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800268c:	6858      	ldr	r0, [r3, #4]
 800268e:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8002692:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002694:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002696:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800269a:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800269e:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80026a0:	4430      	add	r0, r6
 80026a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80026a6:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80026a8:	68e0      	ldr	r0, [r4, #12]
 80026aa:	68cd      	ldr	r5, [r1, #12]
 80026ac:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80026b0:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80026b2:	6898      	ldr	r0, [r3, #8]
 80026b4:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80026b8:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80026ba:	68e6      	ldr	r6, [r4, #12]
 80026bc:	6888      	ldr	r0, [r1, #8]
 80026be:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80026c2:	3001      	adds	r0, #1
 80026c4:	4430      	add	r0, r6
 80026c6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80026ca:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80026cc:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80026ce:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80026d0:	f020 0007 	bic.w	r0, r0, #7
 80026d4:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80026d6:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80026da:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80026dc:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80026de:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80026e2:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80026e6:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80026ea:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80026ee:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80026f2:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80026f6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80026fa:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80026fc:	6958      	ldr	r0, [r3, #20]
 80026fe:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002702:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002704:	6948      	ldr	r0, [r1, #20]
 8002706:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002708:	69d8      	ldr	r0, [r3, #28]
 800270a:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800270e:	f020 0007 	bic.w	r0, r0, #7
 8002712:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002714:	6a08      	ldr	r0, [r1, #32]
 8002716:	69cd      	ldr	r5, [r1, #28]
 8002718:	4305      	orrs	r5, r0
 800271a:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800271c:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800271e:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002720:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002724:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002726:	b31e      	cbz	r6, 8002770 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002728:	2e01      	cmp	r6, #1
 800272a:	d023      	beq.n	8002774 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800272c:	1eb0      	subs	r0, r6, #2
 800272e:	2802      	cmp	r0, #2
 8002730:	d922      	bls.n	8002778 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002732:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8002734:	bf0c      	ite	eq
 8002736:	2002      	moveq	r0, #2
 8002738:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800273a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800273c:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8002740:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002742:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002744:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002746:	eba7 070e 	sub.w	r7, r7, lr
 800274a:	4345      	muls	r5, r0
 800274c:	4378      	muls	r0, r7
 800274e:	3003      	adds	r0, #3
 8002750:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002754:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002756:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002758:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 800275c:	f020 0007 	bic.w	r0, r0, #7
 8002760:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002762:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002764:	58a3      	ldr	r3, [r4, r2]
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	50a3      	str	r3, [r4, r2]
 800276c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8002770:	2004      	movs	r0, #4
 8002772:	e7e2      	b.n	800273a <LTDC_SetConfig+0xca>
    tmp = 3U;
 8002774:	2003      	movs	r0, #3
 8002776:	e7e0      	b.n	800273a <LTDC_SetConfig+0xca>
    tmp = 2U;
 8002778:	2002      	movs	r0, #2
 800277a:	e7de      	b.n	800273a <LTDC_SetConfig+0xca>

0800277c <HAL_LTDC_Init>:
{
 800277c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800277e:	4604      	mov	r4, r0
 8002780:	2800      	cmp	r0, #0
 8002782:	d063      	beq.n	800284c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002784:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8002788:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800278c:	b91b      	cbnz	r3, 8002796 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800278e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002792:	f004 f841 	bl	8006818 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002796:	2302      	movs	r3, #2
 8002798:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800279c:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800279e:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80027a6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80027a8:	6862      	ldr	r2, [r4, #4]
 80027aa:	6999      	ldr	r1, [r3, #24]
 80027ac:	4302      	orrs	r2, r0
 80027ae:	68e0      	ldr	r0, [r4, #12]
 80027b0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80027b2:	6920      	ldr	r0, [r4, #16]
 80027b4:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80027b6:	430a      	orrs	r2, r1
 80027b8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	4924      	ldr	r1, [pc, #144]	; (8002850 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80027be:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80027c0:	400a      	ands	r2, r1
 80027c2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80027ca:	69a0      	ldr	r0, [r4, #24]
 80027cc:	4302      	orrs	r2, r0
 80027ce:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80027d0:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80027d2:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80027d4:	400a      	ands	r2, r1
 80027d6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80027de:	6a20      	ldr	r0, [r4, #32]
 80027e0:	4302      	orrs	r2, r0
 80027e2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80027e4:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80027e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80027e8:	400a      	ands	r2, r1
 80027ea:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80027f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80027f4:	4302      	orrs	r2, r0
 80027f6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	4011      	ands	r1, r2
 80027fc:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80027fe:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002800:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002802:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002806:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002808:	430a      	orrs	r2, r1
 800280a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800280c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800280e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002812:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002816:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800281a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800281c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800281e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8002822:	430a      	orrs	r2, r1
 8002824:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002828:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800282c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800282e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002830:	f042 0206 	orr.w	r2, r2, #6
 8002834:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	f042 0201 	orr.w	r2, r2, #1
 800283c:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800283e:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8002840:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002842:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002846:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 800284a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800284c:	2001      	movs	r0, #1
}
 800284e:	bd38      	pop	{r3, r4, r5, pc}
 8002850:	f000f800 	.word	0xf000f800

08002854 <HAL_LTDC_ErrorCallback>:
 8002854:	4770      	bx	lr

08002856 <HAL_LTDC_LineEventCallback>:
 8002856:	4770      	bx	lr

08002858 <HAL_LTDC_ReloadEventCallback>:
{
 8002858:	4770      	bx	lr

0800285a <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800285a:	6803      	ldr	r3, [r0, #0]
{
 800285c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800285e:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002860:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002862:	0772      	lsls	r2, r6, #29
{
 8002864:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002866:	d514      	bpl.n	8002892 <HAL_LTDC_IRQHandler+0x38>
 8002868:	0769      	lsls	r1, r5, #29
 800286a:	d512      	bpl.n	8002892 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800286c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800286e:	f022 0204 	bic.w	r2, r2, #4
 8002872:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002874:	2204      	movs	r2, #4
 8002876:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002878:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8002884:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002886:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800288a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800288e:	f7ff ffe1 	bl	8002854 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002892:	07b2      	lsls	r2, r6, #30
 8002894:	d516      	bpl.n	80028c4 <HAL_LTDC_IRQHandler+0x6a>
 8002896:	07ab      	lsls	r3, r5, #30
 8002898:	d514      	bpl.n	80028c4 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800289e:	f022 0202 	bic.w	r2, r2, #2
 80028a2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80028a4:	2202      	movs	r2, #2
 80028a6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80028a8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80028b2:	2304      	movs	r3, #4
 80028b4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80028b8:	2300      	movs	r3, #0
 80028ba:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80028be:	4620      	mov	r0, r4
 80028c0:	f7ff ffc8 	bl	8002854 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80028c4:	07f0      	lsls	r0, r6, #31
 80028c6:	d510      	bpl.n	80028ea <HAL_LTDC_IRQHandler+0x90>
 80028c8:	07e9      	lsls	r1, r5, #31
 80028ca:	d50e      	bpl.n	80028ea <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d0:	f022 0201 	bic.w	r2, r2, #1
 80028d4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80028d6:	2201      	movs	r2, #1
 80028d8:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80028da:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80028dc:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80028e0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80028e4:	4620      	mov	r0, r4
 80028e6:	f7ff ffb6 	bl	8002856 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80028ea:	0732      	lsls	r2, r6, #28
 80028ec:	d511      	bpl.n	8002912 <HAL_LTDC_IRQHandler+0xb8>
 80028ee:	072b      	lsls	r3, r5, #28
 80028f0:	d50f      	bpl.n	8002912 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f6:	f022 0208 	bic.w	r2, r2, #8
 80028fa:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80028fc:	2208      	movs	r2, #8
 80028fe:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8002900:	2301      	movs	r3, #1
 8002902:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8002906:	2300      	movs	r3, #0
 8002908:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800290c:	4620      	mov	r0, r4
 800290e:	f7ff ffa3 	bl	8002858 <HAL_LTDC_ReloadEventCallback>
 8002912:	bd70      	pop	{r4, r5, r6, pc}

08002914 <HAL_LTDC_ConfigLayer>:
{
 8002914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8002916:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800291a:	2b01      	cmp	r3, #1
{
 800291c:	4606      	mov	r6, r0
 800291e:	468e      	mov	lr, r1
 8002920:	4694      	mov	ip, r2
 8002922:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8002926:	d01d      	beq.n	8002964 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002928:	2434      	movs	r4, #52	; 0x34
 800292a:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800292c:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002930:	fb04 6402 	mla	r4, r4, r2, r6
 8002934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 8002936:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002938:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 800293a:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800293e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002948:	682b      	ldr	r3, [r5, #0]
 800294a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800294c:	4630      	mov	r0, r6
 800294e:	4662      	mov	r2, ip
 8002950:	4671      	mov	r1, lr
 8002952:	f7ff fe8d 	bl	8002670 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002956:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8002958:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800295a:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800295c:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002960:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8002964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002966 <HAL_LTDC_ConfigColorKeying>:
  __HAL_LOCK(hltdc);
 8002966:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800296a:	2b01      	cmp	r3, #1
{
 800296c:	b510      	push	{r4, lr}
 800296e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hltdc);
 8002972:	d013      	beq.n	800299c <HAL_LTDC_ConfigColorKeying+0x36>
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8002974:	6804      	ldr	r4, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002976:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800297a:	eb04 12c2 	add.w	r2, r4, r2, lsl #7
 800297e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002982:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002986:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800298a:	2301      	movs	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 800298c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002990:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8002992:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002996:	2300      	movs	r3, #0
 8002998:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 800299c:	4618      	mov	r0, r3
}
 800299e:	bd10      	pop	{r4, pc}

080029a0 <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 80029a0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	f04f 0302 	mov.w	r3, #2
 80029aa:	d00f      	beq.n	80029cc <HAL_LTDC_EnableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80029ac:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80029ae:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80029b2:	3184      	adds	r1, #132	; 0x84
 80029b4:	6803      	ldr	r3, [r0, #0]
 80029b6:	585a      	ldr	r2, [r3, r1]
 80029b8:	f042 0202 	orr.w	r2, r2, #2
 80029bc:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80029be:	2201      	movs	r2, #1
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 80029c2:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80029c4:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80029c8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80029cc:	4618      	mov	r0, r3
}
 80029ce:	4770      	bx	lr

080029d0 <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 80029d0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	f04f 0302 	mov.w	r3, #2
 80029da:	d00c      	beq.n	80029f6 <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80029dc:	4a07      	ldr	r2, [pc, #28]	; (80029fc <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80029de:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80029e2:	6993      	ldr	r3, [r2, #24]
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e8:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80029f0:	2300      	movs	r3, #0
 80029f2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80029f6:	4618      	mov	r0, r3
}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40016800 	.word	0x40016800

08002a00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a04:	4604      	mov	r4, r0
 8002a06:	b918      	cbnz	r0, 8002a10 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002a08:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002a0a:	b002      	add	sp, #8
 8002a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a10:	6803      	ldr	r3, [r0, #0]
 8002a12:	07dd      	lsls	r5, r3, #31
 8002a14:	d410      	bmi.n	8002a38 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a16:	6823      	ldr	r3, [r4, #0]
 8002a18:	0798      	lsls	r0, r3, #30
 8002a1a:	d458      	bmi.n	8002ace <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	071a      	lsls	r2, r3, #28
 8002a20:	f100 809a 	bmi.w	8002b58 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	075b      	lsls	r3, r3, #29
 8002a28:	f100 80b8 	bmi.w	8002b9c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a2c:	69a2      	ldr	r2, [r4, #24]
 8002a2e:	2a00      	cmp	r2, #0
 8002a30:	f040 8119 	bne.w	8002c66 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002a34:	2000      	movs	r0, #0
 8002a36:	e7e8      	b.n	8002a0a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a38:	4ba6      	ldr	r3, [pc, #664]	; (8002cd4 <HAL_RCC_OscConfig+0x2d4>)
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	f002 020c 	and.w	r2, r2, #12
 8002a40:	2a04      	cmp	r2, #4
 8002a42:	d007      	beq.n	8002a54 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a4a:	2a08      	cmp	r2, #8
 8002a4c:	d10a      	bne.n	8002a64 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	0259      	lsls	r1, r3, #9
 8002a52:	d507      	bpl.n	8002a64 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	4b9f      	ldr	r3, [pc, #636]	; (8002cd4 <HAL_RCC_OscConfig+0x2d4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	039a      	lsls	r2, r3, #14
 8002a5a:	d5dc      	bpl.n	8002a16 <HAL_RCC_OscConfig+0x16>
 8002a5c:	6863      	ldr	r3, [r4, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1d9      	bne.n	8002a16 <HAL_RCC_OscConfig+0x16>
 8002a62:	e7d1      	b.n	8002a08 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a64:	6863      	ldr	r3, [r4, #4]
 8002a66:	4d9b      	ldr	r5, [pc, #620]	; (8002cd4 <HAL_RCC_OscConfig+0x2d4>)
 8002a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6c:	d111      	bne.n	8002a92 <HAL_RCC_OscConfig+0x92>
 8002a6e:	682b      	ldr	r3, [r5, #0]
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a74:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a76:	f7fe fc0f 	bl	8001298 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4d96      	ldr	r5, [pc, #600]	; (8002cd4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002a7c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	682b      	ldr	r3, [r5, #0]
 8002a80:	039b      	lsls	r3, r3, #14
 8002a82:	d4c8      	bmi.n	8002a16 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a84:	f7fe fc08 	bl	8001298 <HAL_GetTick>
 8002a88:	1b80      	subs	r0, r0, r6
 8002a8a:	2864      	cmp	r0, #100	; 0x64
 8002a8c:	d9f7      	bls.n	8002a7e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002a8e:	2003      	movs	r0, #3
 8002a90:	e7bb      	b.n	8002a0a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a96:	d104      	bne.n	8002aa2 <HAL_RCC_OscConfig+0xa2>
 8002a98:	682b      	ldr	r3, [r5, #0]
 8002a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9e:	602b      	str	r3, [r5, #0]
 8002aa0:	e7e5      	b.n	8002a6e <HAL_RCC_OscConfig+0x6e>
 8002aa2:	682a      	ldr	r2, [r5, #0]
 8002aa4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002aa8:	602a      	str	r2, [r5, #0]
 8002aaa:	682a      	ldr	r2, [r5, #0]
 8002aac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ab0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1df      	bne.n	8002a76 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fbef 	bl	8001298 <HAL_GetTick>
 8002aba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002abc:	682b      	ldr	r3, [r5, #0]
 8002abe:	039f      	lsls	r7, r3, #14
 8002ac0:	d5a9      	bpl.n	8002a16 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac2:	f7fe fbe9 	bl	8001298 <HAL_GetTick>
 8002ac6:	1b80      	subs	r0, r0, r6
 8002ac8:	2864      	cmp	r0, #100	; 0x64
 8002aca:	d9f7      	bls.n	8002abc <HAL_RCC_OscConfig+0xbc>
 8002acc:	e7df      	b.n	8002a8e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ace:	4b81      	ldr	r3, [pc, #516]	; (8002cd4 <HAL_RCC_OscConfig+0x2d4>)
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	f012 0f0c 	tst.w	r2, #12
 8002ad6:	d007      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ade:	2a08      	cmp	r2, #8
 8002ae0:	d111      	bne.n	8002b06 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	025e      	lsls	r6, r3, #9
 8002ae6:	d40e      	bmi.n	8002b06 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae8:	4b7a      	ldr	r3, [pc, #488]	; (8002cd4 <HAL_RCC_OscConfig+0x2d4>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	0795      	lsls	r5, r2, #30
 8002aee:	d502      	bpl.n	8002af6 <HAL_RCC_OscConfig+0xf6>
 8002af0:	68e2      	ldr	r2, [r4, #12]
 8002af2:	2a01      	cmp	r2, #1
 8002af4:	d188      	bne.n	8002a08 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	6921      	ldr	r1, [r4, #16]
 8002afa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002afe:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002b02:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b04:	e78a      	b.n	8002a1c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b06:	68e2      	ldr	r2, [r4, #12]
 8002b08:	4b73      	ldr	r3, [pc, #460]	; (8002cd8 <HAL_RCC_OscConfig+0x2d8>)
 8002b0a:	b1b2      	cbz	r2, 8002b3a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b10:	f7fe fbc2 	bl	8001298 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b14:	4d6f      	ldr	r5, [pc, #444]	; (8002cd4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002b16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b18:	682b      	ldr	r3, [r5, #0]
 8002b1a:	0798      	lsls	r0, r3, #30
 8002b1c:	d507      	bpl.n	8002b2e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1e:	682b      	ldr	r3, [r5, #0]
 8002b20:	6922      	ldr	r2, [r4, #16]
 8002b22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b26:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002b2a:	602b      	str	r3, [r5, #0]
 8002b2c:	e776      	b.n	8002a1c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b2e:	f7fe fbb3 	bl	8001298 <HAL_GetTick>
 8002b32:	1b80      	subs	r0, r0, r6
 8002b34:	2802      	cmp	r0, #2
 8002b36:	d9ef      	bls.n	8002b18 <HAL_RCC_OscConfig+0x118>
 8002b38:	e7a9      	b.n	8002a8e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002b3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fbac 	bl	8001298 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b40:	4d64      	ldr	r5, [pc, #400]	; (8002cd4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002b42:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b44:	682b      	ldr	r3, [r5, #0]
 8002b46:	0799      	lsls	r1, r3, #30
 8002b48:	f57f af68 	bpl.w	8002a1c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4c:	f7fe fba4 	bl	8001298 <HAL_GetTick>
 8002b50:	1b80      	subs	r0, r0, r6
 8002b52:	2802      	cmp	r0, #2
 8002b54:	d9f6      	bls.n	8002b44 <HAL_RCC_OscConfig+0x144>
 8002b56:	e79a      	b.n	8002a8e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b58:	6962      	ldr	r2, [r4, #20]
 8002b5a:	4b60      	ldr	r3, [pc, #384]	; (8002cdc <HAL_RCC_OscConfig+0x2dc>)
 8002b5c:	b17a      	cbz	r2, 8002b7e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002b62:	f7fe fb99 	bl	8001298 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b66:	4d5b      	ldr	r5, [pc, #364]	; (8002cd4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002b68:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002b6c:	079f      	lsls	r7, r3, #30
 8002b6e:	f53f af59 	bmi.w	8002a24 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b72:	f7fe fb91 	bl	8001298 <HAL_GetTick>
 8002b76:	1b80      	subs	r0, r0, r6
 8002b78:	2802      	cmp	r0, #2
 8002b7a:	d9f6      	bls.n	8002b6a <HAL_RCC_OscConfig+0x16a>
 8002b7c:	e787      	b.n	8002a8e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002b7e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002b80:	f7fe fb8a 	bl	8001298 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b84:	4d53      	ldr	r5, [pc, #332]	; (8002cd4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002b86:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b88:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002b8a:	0798      	lsls	r0, r3, #30
 8002b8c:	f57f af4a 	bpl.w	8002a24 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b90:	f7fe fb82 	bl	8001298 <HAL_GetTick>
 8002b94:	1b80      	subs	r0, r0, r6
 8002b96:	2802      	cmp	r0, #2
 8002b98:	d9f6      	bls.n	8002b88 <HAL_RCC_OscConfig+0x188>
 8002b9a:	e778      	b.n	8002a8e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9c:	4b4d      	ldr	r3, [pc, #308]	; (8002cd4 <HAL_RCC_OscConfig+0x2d4>)
 8002b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002ba4:	d128      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba6:	9201      	str	r2, [sp, #4]
 8002ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002baa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	9301      	str	r3, [sp, #4]
 8002bb8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002bba:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	4d48      	ldr	r5, [pc, #288]	; (8002ce0 <HAL_RCC_OscConfig+0x2e0>)
 8002bbe:	682b      	ldr	r3, [r5, #0]
 8002bc0:	05d9      	lsls	r1, r3, #23
 8002bc2:	d51b      	bpl.n	8002bfc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc4:	68a3      	ldr	r3, [r4, #8]
 8002bc6:	4d43      	ldr	r5, [pc, #268]	; (8002cd4 <HAL_RCC_OscConfig+0x2d4>)
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d127      	bne.n	8002c1c <HAL_RCC_OscConfig+0x21c>
 8002bcc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002bd4:	f7fe fb60 	bl	8001298 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd8:	4d3e      	ldr	r5, [pc, #248]	; (8002cd4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002bda:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002be2:	079b      	lsls	r3, r3, #30
 8002be4:	d539      	bpl.n	8002c5a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002be6:	2e00      	cmp	r6, #0
 8002be8:	f43f af20 	beq.w	8002a2c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bec:	4a39      	ldr	r2, [pc, #228]	; (8002cd4 <HAL_RCC_OscConfig+0x2d4>)
 8002bee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf6:	e719      	b.n	8002a2c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002bf8:	2600      	movs	r6, #0
 8002bfa:	e7df      	b.n	8002bbc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfc:	682b      	ldr	r3, [r5, #0]
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c02:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002c04:	f7fe fb48 	bl	8001298 <HAL_GetTick>
 8002c08:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0a:	682b      	ldr	r3, [r5, #0]
 8002c0c:	05da      	lsls	r2, r3, #23
 8002c0e:	d4d9      	bmi.n	8002bc4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c10:	f7fe fb42 	bl	8001298 <HAL_GetTick>
 8002c14:	1bc0      	subs	r0, r0, r7
 8002c16:	2802      	cmp	r0, #2
 8002c18:	d9f7      	bls.n	8002c0a <HAL_RCC_OscConfig+0x20a>
 8002c1a:	e738      	b.n	8002a8e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c1c:	2b05      	cmp	r3, #5
 8002c1e:	d104      	bne.n	8002c2a <HAL_RCC_OscConfig+0x22a>
 8002c20:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c22:	f043 0304 	orr.w	r3, r3, #4
 8002c26:	672b      	str	r3, [r5, #112]	; 0x70
 8002c28:	e7d0      	b.n	8002bcc <HAL_RCC_OscConfig+0x1cc>
 8002c2a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002c2c:	f022 0201 	bic.w	r2, r2, #1
 8002c30:	672a      	str	r2, [r5, #112]	; 0x70
 8002c32:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002c34:	f022 0204 	bic.w	r2, r2, #4
 8002c38:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1ca      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8002c3e:	f7fe fb2b 	bl	8001298 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002c46:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c4a:	0798      	lsls	r0, r3, #30
 8002c4c:	d5cb      	bpl.n	8002be6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c4e:	f7fe fb23 	bl	8001298 <HAL_GetTick>
 8002c52:	1bc0      	subs	r0, r0, r7
 8002c54:	4540      	cmp	r0, r8
 8002c56:	d9f7      	bls.n	8002c48 <HAL_RCC_OscConfig+0x248>
 8002c58:	e719      	b.n	8002a8e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe fb1d 	bl	8001298 <HAL_GetTick>
 8002c5e:	1bc0      	subs	r0, r0, r7
 8002c60:	4540      	cmp	r0, r8
 8002c62:	d9bd      	bls.n	8002be0 <HAL_RCC_OscConfig+0x1e0>
 8002c64:	e713      	b.n	8002a8e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c66:	4d1b      	ldr	r5, [pc, #108]	; (8002cd4 <HAL_RCC_OscConfig+0x2d4>)
 8002c68:	68ab      	ldr	r3, [r5, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	f43f aeca 	beq.w	8002a08 <HAL_RCC_OscConfig+0x8>
 8002c74:	4e1b      	ldr	r6, [pc, #108]	; (8002ce4 <HAL_RCC_OscConfig+0x2e4>)
 8002c76:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c78:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002c7a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c7c:	d134      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002c7e:	f7fe fb0b 	bl	8001298 <HAL_GetTick>
 8002c82:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c84:	682b      	ldr	r3, [r5, #0]
 8002c86:	0199      	lsls	r1, r3, #6
 8002c88:	d41e      	bmi.n	8002cc8 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c8a:	6a22      	ldr	r2, [r4, #32]
 8002c8c:	69e3      	ldr	r3, [r4, #28]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c92:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002c96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c98:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c9c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9e:	4c0d      	ldr	r4, [pc, #52]	; (8002cd4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ca0:	0852      	lsrs	r2, r2, #1
 8002ca2:	3a01      	subs	r2, #1
 8002ca4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ca8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002caa:	2301      	movs	r3, #1
 8002cac:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002cae:	f7fe faf3 	bl	8001298 <HAL_GetTick>
 8002cb2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	019a      	lsls	r2, r3, #6
 8002cb8:	f53f aebc 	bmi.w	8002a34 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe faec 	bl	8001298 <HAL_GetTick>
 8002cc0:	1b40      	subs	r0, r0, r5
 8002cc2:	2802      	cmp	r0, #2
 8002cc4:	d9f6      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x2b4>
 8002cc6:	e6e2      	b.n	8002a8e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe fae6 	bl	8001298 <HAL_GetTick>
 8002ccc:	1bc0      	subs	r0, r0, r7
 8002cce:	2802      	cmp	r0, #2
 8002cd0:	d9d8      	bls.n	8002c84 <HAL_RCC_OscConfig+0x284>
 8002cd2:	e6dc      	b.n	8002a8e <HAL_RCC_OscConfig+0x8e>
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	42470000 	.word	0x42470000
 8002cdc:	42470e80 	.word	0x42470e80
 8002ce0:	40007000 	.word	0x40007000
 8002ce4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fad6 	bl	8001298 <HAL_GetTick>
 8002cec:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cee:	682b      	ldr	r3, [r5, #0]
 8002cf0:	019b      	lsls	r3, r3, #6
 8002cf2:	f57f ae9f 	bpl.w	8002a34 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf6:	f7fe facf 	bl	8001298 <HAL_GetTick>
 8002cfa:	1b00      	subs	r0, r0, r4
 8002cfc:	2802      	cmp	r0, #2
 8002cfe:	d9f6      	bls.n	8002cee <HAL_RCC_OscConfig+0x2ee>
 8002d00:	e6c5      	b.n	8002a8e <HAL_RCC_OscConfig+0x8e>
 8002d02:	bf00      	nop

08002d04 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d04:	4913      	ldr	r1, [pc, #76]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002d06:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d08:	688b      	ldr	r3, [r1, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d003      	beq.n	8002d1a <HAL_RCC_GetSysClockFreq+0x16>
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d003      	beq.n	8002d1e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d16:	4810      	ldr	r0, [pc, #64]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002d18:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002d1a:	4810      	ldr	r0, [pc, #64]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x58>)
 8002d1c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d1e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d20:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d22:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d24:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d28:	bf14      	ite	ne
 8002d2a:	480c      	ldrne	r0, [pc, #48]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2c:	480a      	ldreq	r0, [pc, #40]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002d32:	bf18      	it	ne
 8002d34:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d36:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3a:	fba1 0100 	umull	r0, r1, r1, r0
 8002d3e:	f7fd fa5d 	bl	80001fc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d42:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x50>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002d4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d52:	bd08      	pop	{r3, pc}
 8002d54:	40023800 	.word	0x40023800
 8002d58:	00f42400 	.word	0x00f42400
 8002d5c:	007a1200 	.word	0x007a1200

08002d60 <HAL_RCC_ClockConfig>:
{
 8002d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d64:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002d66:	4604      	mov	r4, r0
 8002d68:	b910      	cbnz	r0, 8002d70 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d70:	4b44      	ldr	r3, [pc, #272]	; (8002e84 <HAL_RCC_ClockConfig+0x124>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	f002 020f 	and.w	r2, r2, #15
 8002d78:	428a      	cmp	r2, r1
 8002d7a:	d328      	bcc.n	8002dce <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7c:	6821      	ldr	r1, [r4, #0]
 8002d7e:	078f      	lsls	r7, r1, #30
 8002d80:	d42d      	bmi.n	8002dde <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d82:	07c8      	lsls	r0, r1, #31
 8002d84:	d440      	bmi.n	8002e08 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d86:	4b3f      	ldr	r3, [pc, #252]	; (8002e84 <HAL_RCC_ClockConfig+0x124>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	f002 020f 	and.w	r2, r2, #15
 8002d8e:	4295      	cmp	r5, r2
 8002d90:	d366      	bcc.n	8002e60 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d92:	6822      	ldr	r2, [r4, #0]
 8002d94:	0751      	lsls	r1, r2, #29
 8002d96:	d46c      	bmi.n	8002e72 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d98:	0713      	lsls	r3, r2, #28
 8002d9a:	d507      	bpl.n	8002dac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d9c:	4a3a      	ldr	r2, [pc, #232]	; (8002e88 <HAL_RCC_ClockConfig+0x128>)
 8002d9e:	6921      	ldr	r1, [r4, #16]
 8002da0:	6893      	ldr	r3, [r2, #8]
 8002da2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002da6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002daa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dac:	f7ff ffaa 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8002db0:	4b35      	ldr	r3, [pc, #212]	; (8002e88 <HAL_RCC_ClockConfig+0x128>)
 8002db2:	4a36      	ldr	r2, [pc, #216]	; (8002e8c <HAL_RCC_ClockConfig+0x12c>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002dba:	5cd3      	ldrb	r3, [r2, r3]
 8002dbc:	40d8      	lsrs	r0, r3
 8002dbe:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <HAL_RCC_ClockConfig+0x130>)
 8002dc0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f003 ff5c 	bl	8006c80 <HAL_InitTick>
  return HAL_OK;
 8002dc8:	2000      	movs	r0, #0
 8002dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	b2ca      	uxtb	r2, r1
 8002dd0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	4299      	cmp	r1, r3
 8002dda:	d1c6      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xa>
 8002ddc:	e7ce      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1c>
 8002dde:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002de4:	bf1e      	ittt	ne
 8002de6:	689a      	ldrne	r2, [r3, #8]
 8002de8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002dec:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dee:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df0:	bf42      	ittt	mi
 8002df2:	689a      	ldrmi	r2, [r3, #8]
 8002df4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002df8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	68a0      	ldr	r0, [r4, #8]
 8002dfe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e02:	4302      	orrs	r2, r0
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	e7bc      	b.n	8002d82 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e08:	6862      	ldr	r2, [r4, #4]
 8002e0a:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <HAL_RCC_ClockConfig+0x128>)
 8002e0c:	2a01      	cmp	r2, #1
 8002e0e:	d11d      	bne.n	8002e4c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e16:	d0a8      	beq.n	8002d6a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e18:	4e1b      	ldr	r6, [pc, #108]	; (8002e88 <HAL_RCC_ClockConfig+0x128>)
 8002e1a:	68b3      	ldr	r3, [r6, #8]
 8002e1c:	f023 0303 	bic.w	r3, r3, #3
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002e24:	f7fe fa38 	bl	8001298 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e28:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002e2c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	68b3      	ldr	r3, [r6, #8]
 8002e30:	6862      	ldr	r2, [r4, #4]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002e3a:	d0a4      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3c:	f7fe fa2c 	bl	8001298 <HAL_GetTick>
 8002e40:	1bc0      	subs	r0, r0, r7
 8002e42:	4540      	cmp	r0, r8
 8002e44:	d9f3      	bls.n	8002e2e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002e46:	2003      	movs	r0, #3
}
 8002e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e4c:	1e91      	subs	r1, r2, #2
 8002e4e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e50:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e52:	d802      	bhi.n	8002e5a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e54:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e58:	e7dd      	b.n	8002e16 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5a:	f013 0f02 	tst.w	r3, #2
 8002e5e:	e7da      	b.n	8002e16 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e60:	b2ea      	uxtb	r2, r5
 8002e62:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	429d      	cmp	r5, r3
 8002e6c:	f47f af7d 	bne.w	8002d6a <HAL_RCC_ClockConfig+0xa>
 8002e70:	e78f      	b.n	8002d92 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e72:	4905      	ldr	r1, [pc, #20]	; (8002e88 <HAL_RCC_ClockConfig+0x128>)
 8002e74:	68e0      	ldr	r0, [r4, #12]
 8002e76:	688b      	ldr	r3, [r1, #8]
 8002e78:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002e7c:	4303      	orrs	r3, r0
 8002e7e:	608b      	str	r3, [r1, #8]
 8002e80:	e78a      	b.n	8002d98 <HAL_RCC_ClockConfig+0x38>
 8002e82:	bf00      	nop
 8002e84:	40023c00 	.word	0x40023c00
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	08009815 	.word	0x08009815
 8002e90:	20000074 	.word	0x20000074

08002e94 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e94:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002e96:	4a05      	ldr	r2, [pc, #20]	; (8002eac <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002e9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ea0:	4a03      	ldr	r2, [pc, #12]	; (8002eb0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ea2:	6810      	ldr	r0, [r2, #0]
}
 8002ea4:	40d8      	lsrs	r0, r3
 8002ea6:	4770      	bx	lr
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	08009825 	.word	0x08009825
 8002eb0:	20000074 	.word	0x20000074

08002eb4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002eb6:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <HAL_RCC_GetPCLK2Freq+0x18>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002ebe:	5cd3      	ldrb	r3, [r2, r3]
 8002ec0:	4a03      	ldr	r2, [pc, #12]	; (8002ed0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002ec2:	6810      	ldr	r0, [r2, #0]
}
 8002ec4:	40d8      	lsrs	r0, r3
 8002ec6:	4770      	bx	lr
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	08009825 	.word	0x08009825
 8002ed0:	20000074 	.word	0x20000074

08002ed4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ed4:	230f      	movs	r3, #15
 8002ed6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCC_GetClockConfig+0x34>)
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	f002 0203 	and.w	r2, r2, #3
 8002ee0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002ee8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002ef0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	08db      	lsrs	r3, r3, #3
 8002ef6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002efa:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <HAL_RCC_GetClockConfig+0x38>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	600b      	str	r3, [r1, #0]
 8002f06:	4770      	bx	lr
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40023c00 	.word	0x40023c00

08002f10 <HAL_RCCEx_PeriphCLKConfig>:

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f10:	6803      	ldr	r3, [r0, #0]
{
 8002f12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f14:	079a      	lsls	r2, r3, #30
{
 8002f16:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f18:	f040 8088 	bne.w	800302c <HAL_RCCEx_PeriphCLKConfig+0x11c>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	f013 0f0c 	tst.w	r3, #12
 8002f22:	d044      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f24:	4d80      	ldr	r5, [pc, #512]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x218>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f26:	4e81      	ldr	r6, [pc, #516]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8002f28:	2300      	movs	r3, #0
 8002f2a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002f2c:	f7fe f9b4 	bl	8001298 <HAL_GetTick>
 8002f30:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f32:	6833      	ldr	r3, [r6, #0]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	f100 80bd 	bmi.w	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002f3a:	6821      	ldr	r1, [r4, #0]
 8002f3c:	074f      	lsls	r7, r1, #29
 8002f3e:	d515      	bpl.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f40:	6963      	ldr	r3, [r4, #20]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f42:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f46:	6920      	ldr	r0, [r4, #16]
 8002f48:	061b      	lsls	r3, r3, #24
 8002f4a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002f4e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f58:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8002f5c:	6a22      	ldr	r2, [r4, #32]
 8002f5e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002f62:	3a01      	subs	r2, #1
 8002f64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f68:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f6c:	070e      	lsls	r6, r1, #28
 8002f6e:	d514      	bpl.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f70:	4a6e      	ldr	r2, [pc, #440]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f72:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f74:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f78:	6920      	ldr	r0, [r4, #16]
 8002f7a:	071b      	lsls	r3, r3, #28
 8002f7c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002f80:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002f84:	430b      	orrs	r3, r1
 8002f86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f8a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002f8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002f90:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f94:	430b      	orrs	r3, r1
 8002f96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f9e:	f7fe f97b 	bl	8001298 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fa2:	4d62      	ldr	r5, [pc, #392]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8002fa4:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fa6:	682b      	ldr	r3, [r5, #0]
 8002fa8:	0098      	lsls	r0, r3, #2
 8002faa:	f140 808a 	bpl.w	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fae:	6823      	ldr	r3, [r4, #0]
 8002fb0:	069a      	lsls	r2, r3, #26
 8002fb2:	d531      	bpl.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	4b5c      	ldr	r3, [pc, #368]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x21c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002fba:	4d5d      	ldr	r5, [pc, #372]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x220>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fbe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002fce:	682b      	ldr	r3, [r5, #0]
 8002fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd4:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fd6:	f7fe f95f 	bl	8001298 <HAL_GetTick>
 8002fda:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fdc:	682b      	ldr	r3, [r5, #0]
 8002fde:	05d9      	lsls	r1, r3, #23
 8002fe0:	d576      	bpl.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fe2:	4d52      	ldr	r5, [pc, #328]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002fe4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fe6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002fea:	d177      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002fee:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002ff2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002ff6:	4a4d      	ldr	r2, [pc, #308]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002ff8:	f040 8091 	bne.w	800311e <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8002ffc:	6891      	ldr	r1, [r2, #8]
 8002ffe:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8003002:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003006:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800300a:	4301      	orrs	r1, r0
 800300c:	6091      	str	r1, [r2, #8]
 800300e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003014:	430b      	orrs	r3, r1
 8003016:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003018:	6820      	ldr	r0, [r4, #0]
 800301a:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800301e:	bf1f      	itttt	ne
 8003020:	4b44      	ldrne	r3, [pc, #272]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003022:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 8003026:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 8003028:	2000      	movne	r0, #0
 800302a:	e041      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_PLLI2S_DISABLE();
 800302c:	4d42      	ldr	r5, [pc, #264]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x228>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800302e:	4e3f      	ldr	r6, [pc, #252]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8003030:	2300      	movs	r3, #0
 8003032:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003034:	f7fe f930 	bl	8001298 <HAL_GetTick>
 8003038:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800303a:	6833      	ldr	r3, [r6, #0]
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	d431      	bmi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003040:	6822      	ldr	r2, [r4, #0]
 8003042:	07d7      	lsls	r7, r2, #31
 8003044:	d506      	bpl.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003046:	68a3      	ldr	r3, [r4, #8]
 8003048:	6861      	ldr	r1, [r4, #4]
 800304a:	071b      	lsls	r3, r3, #28
 800304c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003050:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003054:	0790      	lsls	r0, r2, #30
 8003056:	d515      	bpl.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x174>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003058:	4a34      	ldr	r2, [pc, #208]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800305a:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800305c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003060:	6860      	ldr	r0, [r4, #4]
 8003062:	061b      	lsls	r3, r3, #24
 8003064:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003068:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800306c:	430b      	orrs	r3, r1
 800306e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003072:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003076:	69e3      	ldr	r3, [r4, #28]
 8003078:	f021 011f 	bic.w	r1, r1, #31
 800307c:	3b01      	subs	r3, #1
 800307e:	430b      	orrs	r3, r1
 8003080:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLI2S_ENABLE();
 8003084:	2301      	movs	r3, #1
 8003086:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003088:	f7fe f906 	bl	8001298 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800308c:	4d27      	ldr	r5, [pc, #156]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 800308e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003090:	682b      	ldr	r3, [r5, #0]
 8003092:	0119      	lsls	r1, r3, #4
 8003094:	f53f af42 	bmi.w	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003098:	f7fe f8fe 	bl	8001298 <HAL_GetTick>
 800309c:	1b80      	subs	r0, r0, r6
 800309e:	2802      	cmp	r0, #2
 80030a0:	d9f6      	bls.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80030a2:	e004      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030a4:	f7fe f8f8 	bl	8001298 <HAL_GetTick>
 80030a8:	1bc0      	subs	r0, r0, r7
 80030aa:	2802      	cmp	r0, #2
 80030ac:	d9c5      	bls.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        return HAL_TIMEOUT;
 80030ae:	2003      	movs	r0, #3
}
 80030b0:	b003      	add	sp, #12
 80030b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80030b4:	f7fe f8f0 	bl	8001298 <HAL_GetTick>
 80030b8:	1bc0      	subs	r0, r0, r7
 80030ba:	2802      	cmp	r0, #2
 80030bc:	f67f af39 	bls.w	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x22>
 80030c0:	e7f5      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80030c2:	f7fe f8e9 	bl	8001298 <HAL_GetTick>
 80030c6:	1b80      	subs	r0, r0, r6
 80030c8:	2802      	cmp	r0, #2
 80030ca:	f67f af6c 	bls.w	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x96>
 80030ce:	e7ee      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80030d0:	f7fe f8e2 	bl	8001298 <HAL_GetTick>
 80030d4:	1b80      	subs	r0, r0, r6
 80030d6:	2802      	cmp	r0, #2
 80030d8:	d980      	bls.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80030da:	e7e8      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80030de:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d082      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xdc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030e6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80030e8:	4a14      	ldr	r2, [pc, #80]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030ea:	2101      	movs	r1, #1
 80030ec:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030f2:	2100      	movs	r1, #0
 80030f4:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80030f6:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80030fa:	07da      	lsls	r2, r3, #31
 80030fc:	f57f af76 	bpl.w	8002fec <HAL_RCCEx_PeriphCLKConfig+0xdc>
        tickstart = HAL_GetTick();
 8003100:	f7fe f8ca 	bl	8001298 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003104:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003108:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800310c:	079b      	lsls	r3, r3, #30
 800310e:	f53f af6d 	bmi.w	8002fec <HAL_RCCEx_PeriphCLKConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003112:	f7fe f8c1 	bl	8001298 <HAL_GetTick>
 8003116:	1b80      	subs	r0, r0, r6
 8003118:	42b8      	cmp	r0, r7
 800311a:	d9f6      	bls.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800311c:	e7c7      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800311e:	6891      	ldr	r1, [r2, #8]
 8003120:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003124:	e772      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8003126:	bf00      	nop
 8003128:	42470070 	.word	0x42470070
 800312c:	40023800 	.word	0x40023800
 8003130:	40007000 	.word	0x40007000
 8003134:	424711e0 	.word	0x424711e0
 8003138:	42470068 	.word	0x42470068
 800313c:	42470e40 	.word	0x42470e40

08003140 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003140:	b538      	push	{r3, r4, r5, lr}
 8003142:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003144:	4604      	mov	r4, r0
 8003146:	b1c8      	cbz	r0, 800317c <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003148:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800314c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003150:	b91b      	cbnz	r3, 800315a <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003152:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003156:	f003 fd23 	bl	8006ba0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800315a:	2302      	movs	r3, #2
 800315c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003160:	1d21      	adds	r1, r4, #4
 8003162:	6820      	ldr	r0, [r4, #0]
 8003164:	f001 f82c 	bl	80041c0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003168:	6862      	ldr	r2, [r4, #4]
 800316a:	6820      	ldr	r0, [r4, #0]
 800316c:	4629      	mov	r1, r5
 800316e:	f001 f866 	bl	800423e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003172:	2301      	movs	r3, #1
 8003174:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8003178:	2000      	movs	r0, #0
 800317a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800317c:	2001      	movs	r0, #1
}
 800317e:	bd38      	pop	{r3, r4, r5, pc}

08003180 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003180:	b538      	push	{r3, r4, r5, lr}
 8003182:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003184:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8003188:	b2c0      	uxtb	r0, r0
 800318a:	2802      	cmp	r0, #2
{
 800318c:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800318e:	d00d      	beq.n	80031ac <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003190:	2302      	movs	r3, #2
 8003192:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003196:	6820      	ldr	r0, [r4, #0]
 8003198:	f001 f899 	bl	80042ce <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800319c:	682b      	ldr	r3, [r5, #0]
 800319e:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80031a0:	bf0c      	ite	eq
 80031a2:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80031a4:	2301      	movne	r3, #1
 80031a6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80031aa:	2000      	movs	r0, #0
}
 80031ac:	bd38      	pop	{r3, r4, r5, pc}

080031ae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80031ae:	b510      	push	{r4, lr}
 80031b0:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80031b2:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80031b6:	b2c0      	uxtb	r0, r0
 80031b8:	2802      	cmp	r0, #2
 80031ba:	d009      	beq.n	80031d0 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80031bc:	2302      	movs	r3, #2
 80031be:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80031c2:	6820      	ldr	r0, [r4, #0]
 80031c4:	f001 f8a8 	bl	8004318 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 80031ce:	2000      	movs	r0, #0
}
 80031d0:	bd10      	pop	{r4, pc}

080031d2 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80031d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d4:	4604      	mov	r4, r0
 80031d6:	460e      	mov	r6, r1
 80031d8:	4615      	mov	r5, r2
 80031da:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031dc:	6821      	ldr	r1, [r4, #0]
 80031de:	688a      	ldr	r2, [r1, #8]
 80031e0:	ea36 0302 	bics.w	r3, r6, r2
 80031e4:	d001      	beq.n	80031ea <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80031e6:	2000      	movs	r0, #0
}
 80031e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80031ea:	1c6b      	adds	r3, r5, #1
 80031ec:	d0f7      	beq.n	80031de <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80031ee:	f7fe f853 	bl	8001298 <HAL_GetTick>
 80031f2:	1bc0      	subs	r0, r0, r7
 80031f4:	4285      	cmp	r5, r0
 80031f6:	d8f1      	bhi.n	80031dc <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031f8:	6823      	ldr	r3, [r4, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003200:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003202:	6862      	ldr	r2, [r4, #4]
 8003204:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003208:	d10a      	bne.n	8003220 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 800320a:	68a2      	ldr	r2, [r4, #8]
 800320c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003210:	d002      	beq.n	8003218 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003212:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003216:	d103      	bne.n	8003220 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800321e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003220:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003222:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003226:	d107      	bne.n	8003238 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003236:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003238:	2301      	movs	r3, #1
 800323a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800323e:	2300      	movs	r3, #0
 8003240:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003244:	2003      	movs	r0, #3
 8003246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003248 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b538      	push	{r3, r4, r5, lr}
 800324a:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800324c:	6842      	ldr	r2, [r0, #4]
 800324e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8003252:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003254:	d11f      	bne.n	8003296 <SPI_EndRxTransaction+0x4e>
 8003256:	6882      	ldr	r2, [r0, #8]
 8003258:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800325c:	d002      	beq.n	8003264 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800325e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003262:	d107      	bne.n	8003274 <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003264:	6825      	ldr	r5, [r4, #0]
 8003266:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003268:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 800326c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8003270:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003272:	d007      	beq.n	8003284 <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003274:	460a      	mov	r2, r1
 8003276:	2180      	movs	r1, #128	; 0x80
 8003278:	4620      	mov	r0, r4
 800327a:	f7ff ffaa 	bl	80031d2 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 800327e:	b920      	cbnz	r0, 800328a <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003280:	2000      	movs	r0, #0
 8003282:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003284:	460a      	mov	r2, r1
 8003286:	2101      	movs	r1, #1
 8003288:	e7f6      	b.n	8003278 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800328a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800328c:	f043 0320 	orr.w	r3, r3, #32
 8003290:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003292:	2003      	movs	r0, #3
 8003294:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003296:	460a      	mov	r2, r1
 8003298:	2101      	movs	r1, #1
 800329a:	e7ee      	b.n	800327a <SPI_EndRxTransaction+0x32>

0800329c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800329e:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80032a0:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <SPI_EndRxTxTransaction+0x54>)
 80032a2:	4e14      	ldr	r6, [pc, #80]	; (80032f4 <SPI_EndRxTxTransaction+0x58>)
 80032a4:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032a6:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80032a8:	fbb5 f6f6 	udiv	r6, r5, r6
 80032ac:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80032b0:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032b2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80032b6:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80032b8:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032ba:	d10d      	bne.n	80032d8 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032bc:	460a      	mov	r2, r1
 80032be:	2180      	movs	r1, #128	; 0x80
 80032c0:	f7ff ff87 	bl	80031d2 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 80032c4:	b910      	cbnz	r0, 80032cc <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 80032c6:	2000      	movs	r0, #0
}
 80032c8:	b002      	add	sp, #8
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032ce:	f043 0320 	orr.w	r3, r3, #32
 80032d2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80032d4:	2003      	movs	r0, #3
 80032d6:	e7f7      	b.n	80032c8 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 80032d8:	9b01      	ldr	r3, [sp, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f3      	beq.n	80032c6 <SPI_EndRxTxTransaction+0x2a>
      count--;
 80032de:	9b01      	ldr	r3, [sp, #4]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	061b      	lsls	r3, r3, #24
 80032ea:	d4f5      	bmi.n	80032d8 <SPI_EndRxTxTransaction+0x3c>
 80032ec:	e7eb      	b.n	80032c6 <SPI_EndRxTxTransaction+0x2a>
 80032ee:	bf00      	nop
 80032f0:	20000074 	.word	0x20000074
 80032f4:	016e3600 	.word	0x016e3600

080032f8 <HAL_SPI_Init>:
{
 80032f8:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80032fa:	4604      	mov	r4, r0
 80032fc:	2800      	cmp	r0, #0
 80032fe:	d036      	beq.n	800336e <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003300:	2300      	movs	r3, #0
 8003302:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003304:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003308:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800330c:	b91b      	cbnz	r3, 8003316 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800330e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003312:	f003 fb47 	bl	80069a4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8003316:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003318:	68a0      	ldr	r0, [r4, #8]
 800331a:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800331c:	2302      	movs	r3, #2
 800331e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003322:	680b      	ldr	r3, [r1, #0]
 8003324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003328:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800332a:	6863      	ldr	r3, [r4, #4]
 800332c:	4303      	orrs	r3, r0
 800332e:	68e0      	ldr	r0, [r4, #12]
 8003330:	4303      	orrs	r3, r0
 8003332:	6920      	ldr	r0, [r4, #16]
 8003334:	4303      	orrs	r3, r0
 8003336:	6960      	ldr	r0, [r4, #20]
 8003338:	4303      	orrs	r3, r0
 800333a:	69e0      	ldr	r0, [r4, #28]
 800333c:	4303      	orrs	r3, r0
 800333e:	6a20      	ldr	r0, [r4, #32]
 8003340:	4303      	orrs	r3, r0
 8003342:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003344:	4303      	orrs	r3, r0
 8003346:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800334a:	4303      	orrs	r3, r0
 800334c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800334e:	0c12      	lsrs	r2, r2, #16
 8003350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003352:	f002 0204 	and.w	r2, r2, #4
 8003356:	431a      	orrs	r2, r3
 8003358:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800335a:	69cb      	ldr	r3, [r1, #28]
 800335c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003360:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003362:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003364:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003366:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003368:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 800336c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800336e:	2001      	movs	r0, #1
}
 8003370:	bd10      	pop	{r4, pc}

08003372 <HAL_SPI_DeInit>:
{
 8003372:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8003374:	4604      	mov	r4, r0
 8003376:	b180      	cbz	r0, 800339a <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8003378:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800337a:	2302      	movs	r3, #2
 800337c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003380:	6813      	ldr	r3, [r2, #0]
 8003382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003386:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8003388:	f003 fb40 	bl	8006a0c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800338c:	2000      	movs	r0, #0
 800338e:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8003390:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8003394:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  return HAL_OK;
 8003398:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800339a:	2001      	movs	r0, #1
}
 800339c:	bd10      	pop	{r4, pc}

0800339e <HAL_SPI_Transmit>:
{
 800339e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80033a2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80033a4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80033a8:	2b01      	cmp	r3, #1
{
 80033aa:	4604      	mov	r4, r0
 80033ac:	460d      	mov	r5, r1
 80033ae:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80033b0:	f000 809b 	beq.w	80034ea <HAL_SPI_Transmit+0x14c>
 80033b4:	2301      	movs	r3, #1
 80033b6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80033ba:	f7fd ff6d 	bl	8001298 <HAL_GetTick>
 80033be:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80033c0:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80033c4:	b2c0      	uxtb	r0, r0
 80033c6:	2801      	cmp	r0, #1
 80033c8:	f040 808d 	bne.w	80034e6 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 80033cc:	2d00      	cmp	r5, #0
 80033ce:	d05d      	beq.n	800348c <HAL_SPI_Transmit+0xee>
 80033d0:	f1b8 0f00 	cmp.w	r8, #0
 80033d4:	d05a      	beq.n	800348c <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033d6:	2303      	movs	r3, #3
 80033d8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033dc:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033de:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033e0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033e2:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80033e4:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 80033e8:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033ea:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80033ec:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033ee:	6420      	str	r0, [r4, #64]	; 0x40
 80033f0:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033f2:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 80033f8:	bf08      	it	eq
 80033fa:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 80033fc:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8003400:	bf04      	itt	eq
 8003402:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8003406:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003408:	6803      	ldr	r3, [r0, #0]
 800340a:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800340c:	bf5e      	ittt	pl
 800340e:	6803      	ldrpl	r3, [r0, #0]
 8003410:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8003414:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003416:	68e3      	ldr	r3, [r4, #12]
 8003418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800341c:	6863      	ldr	r3, [r4, #4]
 800341e:	d13e      	bne.n	800349e <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003420:	b113      	cbz	r3, 8003428 <HAL_SPI_Transmit+0x8a>
 8003422:	f1b8 0f01 	cmp.w	r8, #1
 8003426:	d107      	bne.n	8003438 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003428:	f835 3b02 	ldrh.w	r3, [r5], #2
 800342c:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800342e:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003430:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003432:	3b01      	subs	r3, #1
 8003434:	b29b      	uxth	r3, r3
 8003436:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003438:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800343a:	b29b      	uxth	r3, r3
 800343c:	b9a3      	cbnz	r3, 8003468 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800343e:	463a      	mov	r2, r7
 8003440:	4631      	mov	r1, r6
 8003442:	4620      	mov	r0, r4
 8003444:	f7ff ff2a 	bl	800329c <SPI_EndRxTxTransaction>
 8003448:	2800      	cmp	r0, #0
 800344a:	d149      	bne.n	80034e0 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800344c:	68a3      	ldr	r3, [r4, #8]
 800344e:	b933      	cbnz	r3, 800345e <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	9201      	str	r2, [sp, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800345e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003460:	3000      	adds	r0, #0
 8003462:	bf18      	it	ne
 8003464:	2001      	movne	r0, #1
 8003466:	e011      	b.n	800348c <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003468:	6822      	ldr	r2, [r4, #0]
 800346a:	6893      	ldr	r3, [r2, #8]
 800346c:	0798      	lsls	r0, r3, #30
 800346e:	d505      	bpl.n	800347c <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003470:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003472:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003476:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003478:	6323      	str	r3, [r4, #48]	; 0x30
 800347a:	e7d9      	b.n	8003430 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800347c:	f7fd ff0c 	bl	8001298 <HAL_GetTick>
 8003480:	1bc0      	subs	r0, r0, r7
 8003482:	42b0      	cmp	r0, r6
 8003484:	d3d8      	bcc.n	8003438 <HAL_SPI_Transmit+0x9a>
 8003486:	1c71      	adds	r1, r6, #1
 8003488:	d0d6      	beq.n	8003438 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 800348a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800348c:	2301      	movs	r3, #1
 800348e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003492:	2300      	movs	r3, #0
 8003494:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003498:	b002      	add	sp, #8
 800349a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800349e:	b113      	cbz	r3, 80034a6 <HAL_SPI_Transmit+0x108>
 80034a0:	f1b8 0f01 	cmp.w	r8, #1
 80034a4:	d108      	bne.n	80034b8 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034a6:	782b      	ldrb	r3, [r5, #0]
 80034a8:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034ac:	3301      	adds	r3, #1
 80034ae:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80034b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80034b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0be      	beq.n	800343e <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	0792      	lsls	r2, r2, #30
 80034c6:	d503      	bpl.n	80034d0 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80034ca:	7812      	ldrb	r2, [r2, #0]
 80034cc:	731a      	strb	r2, [r3, #12]
 80034ce:	e7ec      	b.n	80034aa <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034d0:	f7fd fee2 	bl	8001298 <HAL_GetTick>
 80034d4:	1bc0      	subs	r0, r0, r7
 80034d6:	4286      	cmp	r6, r0
 80034d8:	d8ee      	bhi.n	80034b8 <HAL_SPI_Transmit+0x11a>
 80034da:	1c73      	adds	r3, r6, #1
 80034dc:	d0ec      	beq.n	80034b8 <HAL_SPI_Transmit+0x11a>
 80034de:	e7d4      	b.n	800348a <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034e0:	2320      	movs	r3, #32
 80034e2:	6563      	str	r3, [r4, #84]	; 0x54
 80034e4:	e7b2      	b.n	800344c <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 80034e6:	2002      	movs	r0, #2
 80034e8:	e7d0      	b.n	800348c <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 80034ea:	2002      	movs	r0, #2
 80034ec:	e7d4      	b.n	8003498 <HAL_SPI_Transmit+0xfa>

080034ee <HAL_SPI_TransmitReceive>:
{
 80034ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80034f2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80034f4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80034f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80034fa:	2b01      	cmp	r3, #1
{
 80034fc:	4604      	mov	r4, r0
 80034fe:	460d      	mov	r5, r1
 8003500:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8003502:	f000 80e2 	beq.w	80036ca <HAL_SPI_TransmitReceive+0x1dc>
 8003506:	2301      	movs	r3, #1
 8003508:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800350c:	f7fd fec4 	bl	8001298 <HAL_GetTick>
  tmp_state           = hspi->State;
 8003510:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8003514:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8003516:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003518:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800351a:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800351c:	d00a      	beq.n	8003534 <HAL_SPI_TransmitReceive+0x46>
 800351e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8003522:	f040 80d0 	bne.w	80036c6 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003526:	68a0      	ldr	r0, [r4, #8]
 8003528:	2800      	cmp	r0, #0
 800352a:	f040 80cc 	bne.w	80036c6 <HAL_SPI_TransmitReceive+0x1d8>
 800352e:	2b04      	cmp	r3, #4
 8003530:	f040 80c9 	bne.w	80036c6 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003534:	2d00      	cmp	r5, #0
 8003536:	f000 80c4 	beq.w	80036c2 <HAL_SPI_TransmitReceive+0x1d4>
 800353a:	f1b9 0f00 	cmp.w	r9, #0
 800353e:	f000 80c0 	beq.w	80036c2 <HAL_SPI_TransmitReceive+0x1d4>
 8003542:	2e00      	cmp	r6, #0
 8003544:	f000 80bd 	beq.w	80036c2 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003548:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800354c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003550:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003552:	bf1c      	itt	ne
 8003554:	2305      	movne	r3, #5
 8003556:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800355a:	2300      	movs	r3, #0
 800355c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800355e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003560:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003562:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8003564:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8003566:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003568:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 800356a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800356c:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800356e:	bf58      	it	pl
 8003570:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003572:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8003574:	bf58      	it	pl
 8003576:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800357a:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800357c:	bf58      	it	pl
 800357e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003580:	68e2      	ldr	r2, [r4, #12]
 8003582:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003586:	d158      	bne.n	800363a <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003588:	b109      	cbz	r1, 800358e <HAL_SPI_TransmitReceive+0xa0>
 800358a:	2e01      	cmp	r6, #1
 800358c:	d107      	bne.n	800359e <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800358e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8003592:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8003594:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003596:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003598:	3b01      	subs	r3, #1
 800359a:	b29b      	uxth	r3, r3
 800359c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800359e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	b9ab      	cbnz	r3, 80035d2 <HAL_SPI_TransmitReceive+0xe4>
 80035a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	b993      	cbnz	r3, 80035d2 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035ac:	4642      	mov	r2, r8
 80035ae:	4639      	mov	r1, r7
 80035b0:	4620      	mov	r0, r4
 80035b2:	f7ff fe73 	bl	800329c <SPI_EndRxTxTransaction>
 80035b6:	2800      	cmp	r0, #0
 80035b8:	f040 8081 	bne.w	80036be <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035bc:	68a3      	ldr	r3, [r4, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d132      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	9001      	str	r0, [sp, #4]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	9201      	str	r2, [sp, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	9b01      	ldr	r3, [sp, #4]
 80035d0:	e02a      	b.n	8003628 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035d2:	6822      	ldr	r2, [r4, #0]
 80035d4:	6893      	ldr	r3, [r2, #8]
 80035d6:	0799      	lsls	r1, r3, #30
 80035d8:	d50d      	bpl.n	80035f6 <HAL_SPI_TransmitReceive+0x108>
 80035da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80035dc:	b29b      	uxth	r3, r3
 80035de:	b153      	cbz	r3, 80035f6 <HAL_SPI_TransmitReceive+0x108>
 80035e0:	b14d      	cbz	r5, 80035f6 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035e4:	f833 1b02 	ldrh.w	r1, [r3], #2
 80035e8:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ea:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80035ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80035f4:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035f6:	6893      	ldr	r3, [r2, #8]
 80035f8:	07db      	lsls	r3, r3, #31
 80035fa:	d50c      	bpl.n	8003616 <HAL_SPI_TransmitReceive+0x128>
 80035fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035fe:	b29b      	uxth	r3, r3
 8003600:	b14b      	cbz	r3, 8003616 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003602:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003604:	68d2      	ldr	r2, [r2, #12]
 8003606:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800360a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800360c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800360e:	3b01      	subs	r3, #1
 8003610:	b29b      	uxth	r3, r3
 8003612:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003614:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003616:	f7fd fe3f 	bl	8001298 <HAL_GetTick>
 800361a:	eba0 0008 	sub.w	r0, r0, r8
 800361e:	4287      	cmp	r7, r0
 8003620:	d8be      	bhi.n	80035a0 <HAL_SPI_TransmitReceive+0xb2>
 8003622:	1c7e      	adds	r6, r7, #1
 8003624:	d0bc      	beq.n	80035a0 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8003626:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003628:	2301      	movs	r3, #1
 800362a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800362e:	2300      	movs	r3, #0
 8003630:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003634:	b003      	add	sp, #12
 8003636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800363a:	b109      	cbz	r1, 8003640 <HAL_SPI_TransmitReceive+0x152>
 800363c:	2e01      	cmp	r6, #1
 800363e:	d108      	bne.n	8003652 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003640:	782a      	ldrb	r2, [r5, #0]
 8003642:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003644:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003646:	3301      	adds	r3, #1
 8003648:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800364a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800364c:	3b01      	subs	r3, #1
 800364e:	b29b      	uxth	r3, r3
 8003650:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003652:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003654:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003656:	b29b      	uxth	r3, r3
 8003658:	b91b      	cbnz	r3, 8003662 <HAL_SPI_TransmitReceive+0x174>
 800365a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0a4      	beq.n	80035ac <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003662:	6822      	ldr	r2, [r4, #0]
 8003664:	6893      	ldr	r3, [r2, #8]
 8003666:	0798      	lsls	r0, r3, #30
 8003668:	d50e      	bpl.n	8003688 <HAL_SPI_TransmitReceive+0x19a>
 800366a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800366c:	b29b      	uxth	r3, r3
 800366e:	b15b      	cbz	r3, 8003688 <HAL_SPI_TransmitReceive+0x19a>
 8003670:	b155      	cbz	r5, 8003688 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003672:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8003678:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800367a:	3301      	adds	r3, #1
 800367c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800367e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003680:	3b01      	subs	r3, #1
 8003682:	b29b      	uxth	r3, r3
 8003684:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003686:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003688:	6822      	ldr	r2, [r4, #0]
 800368a:	6893      	ldr	r3, [r2, #8]
 800368c:	07d9      	lsls	r1, r3, #31
 800368e:	d50d      	bpl.n	80036ac <HAL_SPI_TransmitReceive+0x1be>
 8003690:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003692:	b29b      	uxth	r3, r3
 8003694:	b153      	cbz	r3, 80036ac <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003698:	68d2      	ldr	r2, [r2, #12]
 800369a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800369c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800369e:	3301      	adds	r3, #1
 80036a0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80036a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80036aa:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036ac:	f7fd fdf4 	bl	8001298 <HAL_GetTick>
 80036b0:	eba0 0008 	sub.w	r0, r0, r8
 80036b4:	4287      	cmp	r7, r0
 80036b6:	d8cd      	bhi.n	8003654 <HAL_SPI_TransmitReceive+0x166>
 80036b8:	1c7b      	adds	r3, r7, #1
 80036ba:	d0cb      	beq.n	8003654 <HAL_SPI_TransmitReceive+0x166>
 80036bc:	e7b3      	b.n	8003626 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036be:	2320      	movs	r3, #32
 80036c0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80036c2:	2001      	movs	r0, #1
 80036c4:	e7b0      	b.n	8003628 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80036c6:	2002      	movs	r0, #2
 80036c8:	e7ae      	b.n	8003628 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80036ca:	2002      	movs	r0, #2
 80036cc:	e7b2      	b.n	8003634 <HAL_SPI_TransmitReceive+0x146>

080036ce <HAL_SPI_Receive>:
{
 80036ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80036d2:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80036d4:	6843      	ldr	r3, [r0, #4]
 80036d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80036da:	4604      	mov	r4, r0
 80036dc:	4688      	mov	r8, r1
 80036de:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80036e0:	d10c      	bne.n	80036fc <HAL_SPI_Receive+0x2e>
 80036e2:	6883      	ldr	r3, [r0, #8]
 80036e4:	b953      	cbnz	r3, 80036fc <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036e6:	2304      	movs	r3, #4
 80036e8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80036ec:	4613      	mov	r3, r2
 80036ee:	9500      	str	r5, [sp, #0]
 80036f0:	460a      	mov	r2, r1
 80036f2:	f7ff fefc 	bl	80034ee <HAL_SPI_TransmitReceive>
}
 80036f6:	b002      	add	sp, #8
 80036f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 80036fc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003700:	2b01      	cmp	r3, #1
 8003702:	d079      	beq.n	80037f8 <HAL_SPI_Receive+0x12a>
 8003704:	2301      	movs	r3, #1
 8003706:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800370a:	f7fd fdc5 	bl	8001298 <HAL_GetTick>
 800370e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003710:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8003714:	b2c0      	uxtb	r0, r0
 8003716:	2801      	cmp	r0, #1
 8003718:	d16c      	bne.n	80037f4 <HAL_SPI_Receive+0x126>
  if ((pData == NULL) || (Size == 0U))
 800371a:	f1b8 0f00 	cmp.w	r8, #0
 800371e:	d057      	beq.n	80037d0 <HAL_SPI_Receive+0x102>
 8003720:	2f00      	cmp	r7, #0
 8003722:	d055      	beq.n	80037d0 <HAL_SPI_Receive+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003724:	2304      	movs	r3, #4
 8003726:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800372a:	2300      	movs	r3, #0
 800372c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800372e:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8003730:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8003732:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003734:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003736:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003738:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800373a:	68a3      	ldr	r3, [r4, #8]
  hspi->RxXferSize  = Size;
 800373c:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800373e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003742:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003744:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 8003748:	bf02      	ittt	eq
 800374a:	681a      	ldreq	r2, [r3, #0]
 800374c:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8003750:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003756:	bf5e      	ittt	pl
 8003758:	681a      	ldrpl	r2, [r3, #0]
 800375a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800375e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003760:	68e3      	ldr	r3, [r4, #12]
 8003762:	b1f3      	cbz	r3, 80037a2 <HAL_SPI_Receive+0xd4>
    while (hspi->RxXferCount > 0U)
 8003764:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003766:	b29b      	uxth	r3, r3
 8003768:	b1fb      	cbz	r3, 80037aa <HAL_SPI_Receive+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	07d2      	lsls	r2, r2, #31
 8003770:	d535      	bpl.n	80037de <HAL_SPI_Receive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003776:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800377a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800377c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800377e:	3b01      	subs	r3, #1
 8003780:	b29b      	uxth	r3, r3
 8003782:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003784:	e7ee      	b.n	8003764 <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	07d0      	lsls	r0, r2, #31
 800378c:	d518      	bpl.n	80037c0 <HAL_SPI_Receive+0xf2>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800378e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003790:	7b1b      	ldrb	r3, [r3, #12]
 8003792:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003794:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003796:	3301      	adds	r3, #1
 8003798:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800379a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800379c:	3b01      	subs	r3, #1
 800379e:	b29b      	uxth	r3, r3
 80037a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 80037a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1ed      	bne.n	8003786 <HAL_SPI_Receive+0xb8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037aa:	4632      	mov	r2, r6
 80037ac:	4629      	mov	r1, r5
 80037ae:	4620      	mov	r0, r4
 80037b0:	f7ff fd4a 	bl	8003248 <SPI_EndRxTransaction>
 80037b4:	b9d8      	cbnz	r0, 80037ee <HAL_SPI_Receive+0x120>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80037b8:	3000      	adds	r0, #0
 80037ba:	bf18      	it	ne
 80037bc:	2001      	movne	r0, #1
 80037be:	e007      	b.n	80037d0 <HAL_SPI_Receive+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037c0:	f7fd fd6a 	bl	8001298 <HAL_GetTick>
 80037c4:	1b80      	subs	r0, r0, r6
 80037c6:	4285      	cmp	r5, r0
 80037c8:	d8eb      	bhi.n	80037a2 <HAL_SPI_Receive+0xd4>
 80037ca:	1c69      	adds	r1, r5, #1
 80037cc:	d0e9      	beq.n	80037a2 <HAL_SPI_Receive+0xd4>
          errorcode = HAL_TIMEOUT;
 80037ce:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80037d6:	2300      	movs	r3, #0
 80037d8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80037dc:	e78b      	b.n	80036f6 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037de:	f7fd fd5b 	bl	8001298 <HAL_GetTick>
 80037e2:	1b80      	subs	r0, r0, r6
 80037e4:	4285      	cmp	r5, r0
 80037e6:	d8bd      	bhi.n	8003764 <HAL_SPI_Receive+0x96>
 80037e8:	1c6b      	adds	r3, r5, #1
 80037ea:	d0bb      	beq.n	8003764 <HAL_SPI_Receive+0x96>
 80037ec:	e7ef      	b.n	80037ce <HAL_SPI_Receive+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037ee:	2320      	movs	r3, #32
 80037f0:	6563      	str	r3, [r4, #84]	; 0x54
 80037f2:	e7e0      	b.n	80037b6 <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 80037f4:	2002      	movs	r0, #2
 80037f6:	e7eb      	b.n	80037d0 <HAL_SPI_Receive+0x102>
  __HAL_LOCK(hspi);
 80037f8:	2002      	movs	r0, #2
 80037fa:	e77c      	b.n	80036f6 <HAL_SPI_Receive+0x28>

080037fc <HAL_SPI_GetState>:
  return hspi->State;
 80037fc:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8003800:	4770      	bx	lr

08003802 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003802:	6803      	ldr	r3, [r0, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003812:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8003814:	bf1e      	ittt	ne
 8003816:	681a      	ldrne	r2, [r3, #0]
 8003818:	f042 0201 	orrne.w	r2, r2, #1
 800381c:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800381e:	2000      	movs	r0, #0
 8003820:	4770      	bx	lr

08003822 <HAL_TIM_OC_DelayElapsedCallback>:
 8003822:	4770      	bx	lr

08003824 <HAL_TIM_IC_CaptureCallback>:
 8003824:	4770      	bx	lr

08003826 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003826:	4770      	bx	lr

08003828 <HAL_TIM_TriggerCallback>:
 8003828:	4770      	bx	lr

0800382a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800382a:	6803      	ldr	r3, [r0, #0]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	0791      	lsls	r1, r2, #30
{
 8003830:	b510      	push	{r4, lr}
 8003832:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003834:	d50e      	bpl.n	8003854 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	0792      	lsls	r2, r2, #30
 800383a:	d50b      	bpl.n	8003854 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800383c:	f06f 0202 	mvn.w	r2, #2
 8003840:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003842:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003844:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003846:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003848:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800384a:	d077      	beq.n	800393c <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800384c:	f7ff ffea 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003850:	2300      	movs	r3, #0
 8003852:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	0750      	lsls	r0, r2, #29
 800385a:	d510      	bpl.n	800387e <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	0751      	lsls	r1, r2, #29
 8003860:	d50d      	bpl.n	800387e <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003862:	f06f 0204 	mvn.w	r2, #4
 8003866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003868:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800386a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800386c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003870:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003874:	d068      	beq.n	8003948 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003876:	f7ff ffd5 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	2300      	movs	r3, #0
 800387c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	0712      	lsls	r2, r2, #28
 8003884:	d50f      	bpl.n	80038a6 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	0710      	lsls	r0, r2, #28
 800388a:	d50c      	bpl.n	80038a6 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800388c:	f06f 0208 	mvn.w	r2, #8
 8003890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003892:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003894:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003896:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003898:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800389c:	d05a      	beq.n	8003954 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800389e:	f7ff ffc1 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	2300      	movs	r3, #0
 80038a4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	06d2      	lsls	r2, r2, #27
 80038ac:	d510      	bpl.n	80038d0 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	06d0      	lsls	r0, r2, #27
 80038b2:	d50d      	bpl.n	80038d0 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038b4:	f06f 0210 	mvn.w	r2, #16
 80038b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ba:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038bc:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038be:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038c2:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038c6:	d04b      	beq.n	8003960 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80038c8:	f7ff ffac 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038cc:	2300      	movs	r3, #0
 80038ce:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	07d1      	lsls	r1, r2, #31
 80038d6:	d508      	bpl.n	80038ea <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	07d2      	lsls	r2, r2, #31
 80038dc:	d505      	bpl.n	80038ea <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038de:	f06f 0201 	mvn.w	r2, #1
 80038e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038e4:	4620      	mov	r0, r4
 80038e6:	f002 fea7 	bl	8006638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	0610      	lsls	r0, r2, #24
 80038f0:	d508      	bpl.n	8003904 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	0611      	lsls	r1, r2, #24
 80038f6:	d505      	bpl.n	8003904 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038fe:	4620      	mov	r0, r4
 8003900:	f000 f973 	bl	8003bea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	0652      	lsls	r2, r2, #25
 800390a:	d508      	bpl.n	800391e <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	0650      	lsls	r0, r2, #25
 8003910:	d505      	bpl.n	800391e <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003912:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003918:	4620      	mov	r0, r4
 800391a:	f7ff ff85 	bl	8003828 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	0691      	lsls	r1, r2, #26
 8003924:	d522      	bpl.n	800396c <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	0692      	lsls	r2, r2, #26
 800392a:	d51f      	bpl.n	800396c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800392c:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003930:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003932:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003938:	f000 b956 	b.w	8003be8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800393c:	f7ff ff71 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003940:	4620      	mov	r0, r4
 8003942:	f7ff ff70 	bl	8003826 <HAL_TIM_PWM_PulseFinishedCallback>
 8003946:	e783      	b.n	8003850 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003948:	f7ff ff6b 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394c:	4620      	mov	r0, r4
 800394e:	f7ff ff6a 	bl	8003826 <HAL_TIM_PWM_PulseFinishedCallback>
 8003952:	e792      	b.n	800387a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003954:	f7ff ff65 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003958:	4620      	mov	r0, r4
 800395a:	f7ff ff64 	bl	8003826 <HAL_TIM_PWM_PulseFinishedCallback>
 800395e:	e7a0      	b.n	80038a2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003960:	f7ff ff5f 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003964:	4620      	mov	r0, r4
 8003966:	f7ff ff5e 	bl	8003826 <HAL_TIM_PWM_PulseFinishedCallback>
 800396a:	e7af      	b.n	80038cc <HAL_TIM_IRQHandler+0xa2>
 800396c:	bd10      	pop	{r4, pc}
	...

08003970 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003970:	4a30      	ldr	r2, [pc, #192]	; (8003a34 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003972:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003974:	4290      	cmp	r0, r2
 8003976:	d012      	beq.n	800399e <TIM_Base_SetConfig+0x2e>
 8003978:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800397c:	d00f      	beq.n	800399e <TIM_Base_SetConfig+0x2e>
 800397e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003982:	4290      	cmp	r0, r2
 8003984:	d00b      	beq.n	800399e <TIM_Base_SetConfig+0x2e>
 8003986:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800398a:	4290      	cmp	r0, r2
 800398c:	d007      	beq.n	800399e <TIM_Base_SetConfig+0x2e>
 800398e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003992:	4290      	cmp	r0, r2
 8003994:	d003      	beq.n	800399e <TIM_Base_SetConfig+0x2e>
 8003996:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800399a:	4290      	cmp	r0, r2
 800399c:	d119      	bne.n	80039d2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800399e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80039a4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039a6:	4a23      	ldr	r2, [pc, #140]	; (8003a34 <TIM_Base_SetConfig+0xc4>)
 80039a8:	4290      	cmp	r0, r2
 80039aa:	d029      	beq.n	8003a00 <TIM_Base_SetConfig+0x90>
 80039ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80039b0:	d026      	beq.n	8003a00 <TIM_Base_SetConfig+0x90>
 80039b2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80039b6:	4290      	cmp	r0, r2
 80039b8:	d022      	beq.n	8003a00 <TIM_Base_SetConfig+0x90>
 80039ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039be:	4290      	cmp	r0, r2
 80039c0:	d01e      	beq.n	8003a00 <TIM_Base_SetConfig+0x90>
 80039c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039c6:	4290      	cmp	r0, r2
 80039c8:	d01a      	beq.n	8003a00 <TIM_Base_SetConfig+0x90>
 80039ca:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80039ce:	4290      	cmp	r0, r2
 80039d0:	d016      	beq.n	8003a00 <TIM_Base_SetConfig+0x90>
 80039d2:	4a19      	ldr	r2, [pc, #100]	; (8003a38 <TIM_Base_SetConfig+0xc8>)
 80039d4:	4290      	cmp	r0, r2
 80039d6:	d013      	beq.n	8003a00 <TIM_Base_SetConfig+0x90>
 80039d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039dc:	4290      	cmp	r0, r2
 80039de:	d00f      	beq.n	8003a00 <TIM_Base_SetConfig+0x90>
 80039e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039e4:	4290      	cmp	r0, r2
 80039e6:	d00b      	beq.n	8003a00 <TIM_Base_SetConfig+0x90>
 80039e8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80039ec:	4290      	cmp	r0, r2
 80039ee:	d007      	beq.n	8003a00 <TIM_Base_SetConfig+0x90>
 80039f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039f4:	4290      	cmp	r0, r2
 80039f6:	d003      	beq.n	8003a00 <TIM_Base_SetConfig+0x90>
 80039f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039fc:	4290      	cmp	r0, r2
 80039fe:	d103      	bne.n	8003a08 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a00:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a06:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a08:	694a      	ldr	r2, [r1, #20]
 8003a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a0e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003a10:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a12:	688b      	ldr	r3, [r1, #8]
 8003a14:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a16:	680b      	ldr	r3, [r1, #0]
 8003a18:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <TIM_Base_SetConfig+0xc4>)
 8003a1c:	4298      	cmp	r0, r3
 8003a1e:	d003      	beq.n	8003a28 <TIM_Base_SetConfig+0xb8>
 8003a20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a24:	4298      	cmp	r0, r3
 8003a26:	d101      	bne.n	8003a2c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a28:	690b      	ldr	r3, [r1, #16]
 8003a2a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	6143      	str	r3, [r0, #20]
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40010000 	.word	0x40010000
 8003a38:	40014000 	.word	0x40014000

08003a3c <HAL_TIM_Base_Init>:
{
 8003a3c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003a3e:	4604      	mov	r4, r0
 8003a40:	b1a0      	cbz	r0, 8003a6c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a42:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003a4a:	b91b      	cbnz	r3, 8003a54 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003a4c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003a50:	f002 fff2 	bl	8006a38 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	2302      	movs	r3, #2
 8003a56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a5a:	6820      	ldr	r0, [r4, #0]
 8003a5c:	1d21      	adds	r1, r4, #4
 8003a5e:	f7ff ff87 	bl	8003970 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003a68:	2000      	movs	r0, #0
 8003a6a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003a6c:	2001      	movs	r0, #1
}
 8003a6e:	bd10      	pop	{r4, pc}

08003a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a70:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a72:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a74:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a76:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a7a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003a7e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a80:	6083      	str	r3, [r0, #8]
 8003a82:	bd10      	pop	{r4, pc}

08003a84 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003a84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a88:	2b01      	cmp	r3, #1
{
 8003a8a:	b570      	push	{r4, r5, r6, lr}
 8003a8c:	4604      	mov	r4, r0
 8003a8e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003a92:	d019      	beq.n	8003ac8 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003a98:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003aa0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003aaa:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003aac:	680b      	ldr	r3, [r1, #0]
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d065      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0xfa>
 8003ab2:	d815      	bhi.n	8003ae0 <HAL_TIM_ConfigClockSource+0x5c>
 8003ab4:	2b10      	cmp	r3, #16
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x4e>
 8003ab8:	d807      	bhi.n	8003aca <HAL_TIM_ConfigClockSource+0x46>
 8003aba:	b153      	cbz	r3, 8003ad2 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003abe:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003ac4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003ac8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d001      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x4e>
 8003ace:	2b30      	cmp	r3, #48	; 0x30
 8003ad0:	d1f4      	bne.n	8003abc <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8003ad2:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ad4:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ad8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003adc:	4313      	orrs	r3, r2
 8003ade:	e01a      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8003ae0:	2b60      	cmp	r3, #96	; 0x60
 8003ae2:	d034      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0xca>
 8003ae4:	d819      	bhi.n	8003b1a <HAL_TIM_ConfigClockSource+0x96>
 8003ae6:	2b50      	cmp	r3, #80	; 0x50
 8003ae8:	d1e8      	bne.n	8003abc <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aea:	684a      	ldr	r2, [r1, #4]
 8003aec:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003aee:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af0:	6a05      	ldr	r5, [r0, #32]
 8003af2:	f025 0501 	bic.w	r5, r5, #1
 8003af6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003af8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003afa:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b02:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003b06:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003b08:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003b0a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003b0c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b12:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003b16:	6083      	str	r3, [r0, #8]
 8003b18:	e7d0      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8003b1a:	2b70      	cmp	r3, #112	; 0x70
 8003b1c:	d00c      	beq.n	8003b38 <HAL_TIM_ConfigClockSource+0xb4>
 8003b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b22:	d1cb      	bne.n	8003abc <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8003b24:	68cb      	ldr	r3, [r1, #12]
 8003b26:	684a      	ldr	r2, [r1, #4]
 8003b28:	6889      	ldr	r1, [r1, #8]
 8003b2a:	f7ff ffa1 	bl	8003a70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b2e:	6822      	ldr	r2, [r4, #0]
 8003b30:	6893      	ldr	r3, [r2, #8]
 8003b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b36:	e008      	b.n	8003b4a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8003b38:	68cb      	ldr	r3, [r1, #12]
 8003b3a:	684a      	ldr	r2, [r1, #4]
 8003b3c:	6889      	ldr	r1, [r1, #8]
 8003b3e:	f7ff ff97 	bl	8003a70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b42:	6822      	ldr	r2, [r4, #0]
 8003b44:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b4a:	6093      	str	r3, [r2, #8]
      break;
 8003b4c:	e7b6      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b4e:	684d      	ldr	r5, [r1, #4]
 8003b50:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b52:	6a01      	ldr	r1, [r0, #32]
 8003b54:	f021 0110 	bic.w	r1, r1, #16
 8003b58:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b5a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003b5c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b5e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b66:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b6a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003b6e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003b70:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003b72:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b78:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003b7c:	e7cb      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7e:	684a      	ldr	r2, [r1, #4]
 8003b80:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003b82:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b84:	6a05      	ldr	r5, [r0, #32]
 8003b86:	f025 0501 	bic.w	r5, r5, #1
 8003b8a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b8c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b8e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b96:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003b9a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003b9c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003b9e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003ba0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ba6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8003baa:	e7b4      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x92>

08003bac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003bb0:	2b01      	cmp	r3, #1
{
 8003bb2:	b530      	push	{r4, r5, lr}
 8003bb4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003bb8:	d014      	beq.n	8003be4 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bba:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003bc0:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bc2:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc4:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bc6:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bc8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bd0:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bd2:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bd4:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bd6:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bde:	2300      	movs	r3, #0
 8003be0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003be4:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003be6:	bd30      	pop	{r4, r5, pc}

08003be8 <HAL_TIMEx_CommutCallback>:
 8003be8:	4770      	bx	lr

08003bea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bea:	4770      	bx	lr

08003bec <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bec:	6803      	ldr	r3, [r0, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bf4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	f022 0201 	bic.w	r2, r2, #1
 8003bfc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	2320      	movs	r3, #32
 8003c00:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8003c04:	4770      	bx	lr
	...

08003c08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c0c:	6806      	ldr	r6, [r0, #0]
 8003c0e:	68c2      	ldr	r2, [r0, #12]
 8003c10:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c12:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	6133      	str	r3, [r6, #16]
{
 8003c1c:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c1e:	6883      	ldr	r3, [r0, #8]
 8003c20:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003c22:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c24:	4303      	orrs	r3, r0
 8003c26:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003c28:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c2c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003c2e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c32:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c38:	6973      	ldr	r3, [r6, #20]
 8003c3a:	69a2      	ldr	r2, [r4, #24]
 8003c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c40:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c42:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c46:	6173      	str	r3, [r6, #20]
 8003c48:	4b7a      	ldr	r3, [pc, #488]	; (8003e34 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c4a:	d17c      	bne.n	8003d46 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c4c:	429e      	cmp	r6, r3
 8003c4e:	d003      	beq.n	8003c58 <UART_SetConfig+0x50>
 8003c50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c54:	429e      	cmp	r6, r3
 8003c56:	d144      	bne.n	8003ce2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003c58:	f7ff f92c 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 8003c5c:	2519      	movs	r5, #25
 8003c5e:	fb05 f300 	mul.w	r3, r5, r0
 8003c62:	6860      	ldr	r0, [r4, #4]
 8003c64:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003c68:	0040      	lsls	r0, r0, #1
 8003c6a:	fbb3 f3f0 	udiv	r3, r3, r0
 8003c6e:	fbb3 f3f9 	udiv	r3, r3, r9
 8003c72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c76:	f7ff f91d 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 8003c7a:	6863      	ldr	r3, [r4, #4]
 8003c7c:	4368      	muls	r0, r5
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	fbb0 f7f3 	udiv	r7, r0, r3
 8003c84:	f7ff f916 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 8003c88:	6863      	ldr	r3, [r4, #4]
 8003c8a:	4368      	muls	r0, r5
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c92:	fbb3 f3f9 	udiv	r3, r3, r9
 8003c96:	fb09 7313 	mls	r3, r9, r3, r7
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	3332      	adds	r3, #50	; 0x32
 8003c9e:	fbb3 f3f9 	udiv	r3, r3, r9
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8003ca8:	f7ff f904 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 8003cac:	6862      	ldr	r2, [r4, #4]
 8003cae:	4368      	muls	r0, r5
 8003cb0:	0052      	lsls	r2, r2, #1
 8003cb2:	fbb0 faf2 	udiv	sl, r0, r2
 8003cb6:	f7ff f8fd 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003cba:	6863      	ldr	r3, [r4, #4]
 8003cbc:	4368      	muls	r0, r5
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc4:	fbb3 f3f9 	udiv	r3, r3, r9
 8003cc8:	fb09 a313 	mls	r3, r9, r3, sl
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	3332      	adds	r3, #50	; 0x32
 8003cd0:	fbb3 f3f9 	udiv	r3, r3, r9
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003cda:	443b      	add	r3, r7
 8003cdc:	60b3      	str	r3, [r6, #8]
 8003cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003ce2:	f7ff f8d7 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8003ce6:	2519      	movs	r5, #25
 8003ce8:	fb05 f300 	mul.w	r3, r5, r0
 8003cec:	6860      	ldr	r0, [r4, #4]
 8003cee:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003cf2:	0040      	lsls	r0, r0, #1
 8003cf4:	fbb3 f3f0 	udiv	r3, r3, r0
 8003cf8:	fbb3 f3f9 	udiv	r3, r3, r9
 8003cfc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d00:	f7ff f8c8 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8003d04:	6863      	ldr	r3, [r4, #4]
 8003d06:	4368      	muls	r0, r5
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	fbb0 f7f3 	udiv	r7, r0, r3
 8003d0e:	f7ff f8c1 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8003d12:	6863      	ldr	r3, [r4, #4]
 8003d14:	4368      	muls	r0, r5
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003d20:	fb09 7313 	mls	r3, r9, r3, r7
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	3332      	adds	r3, #50	; 0x32
 8003d28:	fbb3 f3f9 	udiv	r3, r3, r9
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8003d32:	f7ff f8af 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8003d36:	6862      	ldr	r2, [r4, #4]
 8003d38:	4368      	muls	r0, r5
 8003d3a:	0052      	lsls	r2, r2, #1
 8003d3c:	fbb0 faf2 	udiv	sl, r0, r2
 8003d40:	f7ff f8a8 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8003d44:	e7b9      	b.n	8003cba <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d46:	429e      	cmp	r6, r3
 8003d48:	d002      	beq.n	8003d50 <UART_SetConfig+0x148>
 8003d4a:	4b3b      	ldr	r3, [pc, #236]	; (8003e38 <UART_SetConfig+0x230>)
 8003d4c:	429e      	cmp	r6, r3
 8003d4e:	d140      	bne.n	8003dd2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003d50:	f7ff f8b0 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 8003d54:	6867      	ldr	r7, [r4, #4]
 8003d56:	2519      	movs	r5, #25
 8003d58:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003d5c:	fb05 f300 	mul.w	r3, r5, r0
 8003d60:	00bf      	lsls	r7, r7, #2
 8003d62:	fbb3 f3f7 	udiv	r3, r3, r7
 8003d66:	fbb3 f3f9 	udiv	r3, r3, r9
 8003d6a:	011f      	lsls	r7, r3, #4
 8003d6c:	f7ff f8a2 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 8003d70:	6863      	ldr	r3, [r4, #4]
 8003d72:	4368      	muls	r0, r5
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	fbb0 f8f3 	udiv	r8, r0, r3
 8003d7a:	f7ff f89b 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 8003d7e:	6863      	ldr	r3, [r4, #4]
 8003d80:	4368      	muls	r0, r5
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d88:	fbb3 f3f9 	udiv	r3, r3, r9
 8003d8c:	fb09 8313 	mls	r3, r9, r3, r8
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	3332      	adds	r3, #50	; 0x32
 8003d94:	fbb3 f3f9 	udiv	r3, r3, r9
 8003d98:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003d9c:	f7ff f88a 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 8003da0:	6862      	ldr	r2, [r4, #4]
 8003da2:	4368      	muls	r0, r5
 8003da4:	0092      	lsls	r2, r2, #2
 8003da6:	fbb0 faf2 	udiv	sl, r0, r2
 8003daa:	f7ff f883 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003dae:	6863      	ldr	r3, [r4, #4]
 8003db0:	4368      	muls	r0, r5
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db8:	fbb3 f3f9 	udiv	r3, r3, r9
 8003dbc:	fb09 a313 	mls	r3, r9, r3, sl
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	3332      	adds	r3, #50	; 0x32
 8003dc4:	fbb3 f3f9 	udiv	r3, r3, r9
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	ea43 0308 	orr.w	r3, r3, r8
 8003dd0:	e783      	b.n	8003cda <UART_SetConfig+0xd2>
 8003dd2:	f7ff f85f 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8003dd6:	6867      	ldr	r7, [r4, #4]
 8003dd8:	2519      	movs	r5, #25
 8003dda:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003dde:	fb05 f300 	mul.w	r3, r5, r0
 8003de2:	00bf      	lsls	r7, r7, #2
 8003de4:	fbb3 f3f7 	udiv	r3, r3, r7
 8003de8:	fbb3 f3f9 	udiv	r3, r3, r9
 8003dec:	011f      	lsls	r7, r3, #4
 8003dee:	f7ff f851 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8003df2:	6863      	ldr	r3, [r4, #4]
 8003df4:	4368      	muls	r0, r5
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	fbb0 f8f3 	udiv	r8, r0, r3
 8003dfc:	f7ff f84a 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8003e00:	6863      	ldr	r3, [r4, #4]
 8003e02:	4368      	muls	r0, r5
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e0a:	fbb3 f3f9 	udiv	r3, r3, r9
 8003e0e:	fb09 8313 	mls	r3, r9, r3, r8
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	3332      	adds	r3, #50	; 0x32
 8003e16:	fbb3 f3f9 	udiv	r3, r3, r9
 8003e1a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003e1e:	f7ff f839 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8003e22:	6862      	ldr	r2, [r4, #4]
 8003e24:	4368      	muls	r0, r5
 8003e26:	0092      	lsls	r2, r2, #2
 8003e28:	fbb0 faf2 	udiv	sl, r0, r2
 8003e2c:	f7ff f832 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8003e30:	e7bd      	b.n	8003dae <UART_SetConfig+0x1a6>
 8003e32:	bf00      	nop
 8003e34:	40011000 	.word	0x40011000
 8003e38:	40011400 	.word	0x40011400

08003e3c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	4604      	mov	r4, r0
 8003e40:	460e      	mov	r6, r1
 8003e42:	4617      	mov	r7, r2
 8003e44:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e46:	6821      	ldr	r1, [r4, #0]
 8003e48:	680b      	ldr	r3, [r1, #0]
 8003e4a:	ea36 0303 	bics.w	r3, r6, r3
 8003e4e:	d101      	bne.n	8003e54 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003e50:	2000      	movs	r0, #0
}
 8003e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003e54:	1c6b      	adds	r3, r5, #1
 8003e56:	d0f7      	beq.n	8003e48 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e58:	b995      	cbnz	r5, 8003e80 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e62:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e64:	695a      	ldr	r2, [r3, #20]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003e6c:	2320      	movs	r3, #32
 8003e6e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003e72:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003e76:	2300      	movs	r3, #0
 8003e78:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8003e7c:	2003      	movs	r0, #3
 8003e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e80:	f7fd fa0a 	bl	8001298 <HAL_GetTick>
 8003e84:	1bc0      	subs	r0, r0, r7
 8003e86:	4285      	cmp	r5, r0
 8003e88:	d2dd      	bcs.n	8003e46 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8003e8a:	e7e6      	b.n	8003e5a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08003e8c <HAL_UART_Init>:
{
 8003e8c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003e8e:	4604      	mov	r4, r0
 8003e90:	b340      	cbz	r0, 8003ee4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003e92:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003e96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003e9a:	b91b      	cbnz	r3, 8003ea4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003e9c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003ea0:	f002 fdf4 	bl	8006a8c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003ea4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003ea6:	2324      	movs	r3, #36	; 0x24
 8003ea8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003eac:	68d3      	ldr	r3, [r2, #12]
 8003eae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eb2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f7ff fea7 	bl	8003c08 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ec2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ec4:	695a      	ldr	r2, [r3, #20]
 8003ec6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eca:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ed2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003ed6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003eda:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ede:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003ee2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003ee4:	2001      	movs	r0, #1
}
 8003ee6:	bd10      	pop	{r4, pc}

08003ee8 <HAL_UART_Transmit>:
{
 8003ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eec:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003eee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003ef2:	2b20      	cmp	r3, #32
{
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	460d      	mov	r5, r1
 8003ef8:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003efa:	d14f      	bne.n	8003f9c <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8003efc:	2900      	cmp	r1, #0
 8003efe:	d04a      	beq.n	8003f96 <HAL_UART_Transmit+0xae>
 8003f00:	2a00      	cmp	r2, #0
 8003f02:	d048      	beq.n	8003f96 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8003f04:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d047      	beq.n	8003f9c <HAL_UART_Transmit+0xb4>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f12:	2300      	movs	r3, #0
 8003f14:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f16:	2321      	movs	r3, #33	; 0x21
 8003f18:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003f1c:	f7fd f9bc 	bl	8001298 <HAL_GetTick>
    huart->TxXferSize = Size;
 8003f20:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8003f24:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8003f26:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f2a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	b96b      	cbnz	r3, 8003f4c <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f30:	463b      	mov	r3, r7
 8003f32:	4632      	mov	r2, r6
 8003f34:	2140      	movs	r1, #64	; 0x40
 8003f36:	4620      	mov	r0, r4
 8003f38:	f7ff ff80 	bl	8003e3c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003f3c:	b9b0      	cbnz	r0, 8003f6c <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8003f3e:	2320      	movs	r3, #32
 8003f40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8003f44:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8003f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8003f4c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f54:	68a3      	ldr	r3, [r4, #8]
 8003f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f5a:	4632      	mov	r2, r6
 8003f5c:	463b      	mov	r3, r7
 8003f5e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8003f62:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f64:	d10e      	bne.n	8003f84 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f66:	f7ff ff69 	bl	8003e3c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003f6a:	b110      	cbz	r0, 8003f72 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8003f6c:	2003      	movs	r0, #3
 8003f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003f72:	882b      	ldrh	r3, [r5, #0]
 8003f74:	6822      	ldr	r2, [r4, #0]
 8003f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f7c:	6923      	ldr	r3, [r4, #16]
 8003f7e:	b943      	cbnz	r3, 8003f92 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8003f80:	3502      	adds	r5, #2
 8003f82:	e7d2      	b.n	8003f2a <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f84:	f7ff ff5a 	bl	8003e3c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d1ef      	bne.n	8003f6c <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	782a      	ldrb	r2, [r5, #0]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	3501      	adds	r5, #1
 8003f94:	e7c9      	b.n	8003f2a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8003f96:	2001      	movs	r0, #1
 8003f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003f9c:	2002      	movs	r0, #2
}
 8003f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003fa2 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fa2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d120      	bne.n	8003fec <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8003faa:	b1e9      	cbz	r1, 8003fe8 <HAL_UART_Receive_IT+0x46>
 8003fac:	b1e2      	cbz	r2, 8003fe8 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8003fae:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d01a      	beq.n	8003fec <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8003fb6:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8003fb8:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fba:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fbc:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fbe:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fc0:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fc4:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8003fc6:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fc8:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8003fca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fce:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003fd2:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fd4:	6951      	ldr	r1, [r2, #20]
 8003fd6:	f041 0101 	orr.w	r1, r1, #1
 8003fda:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fdc:	68d1      	ldr	r1, [r2, #12]
 8003fde:	f041 0120 	orr.w	r1, r1, #32
 8003fe2:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	4770      	bx	lr
      return HAL_ERROR;
 8003fe8:	2001      	movs	r0, #1
 8003fea:	4770      	bx	lr
    return HAL_BUSY;
 8003fec:	2002      	movs	r0, #2
}
 8003fee:	4770      	bx	lr

08003ff0 <HAL_UART_TxCpltCallback>:
 8003ff0:	4770      	bx	lr

08003ff2 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ff2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003ff6:	2b22      	cmp	r3, #34	; 0x22
{
 8003ff8:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ffa:	d136      	bne.n	800406a <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ffc:	6883      	ldr	r3, [r0, #8]
 8003ffe:	6901      	ldr	r1, [r0, #16]
 8004000:	6802      	ldr	r2, [r0, #0]
 8004002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004006:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004008:	d123      	bne.n	8004052 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800400a:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800400c:	b9e9      	cbnz	r1, 800404a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800400e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004012:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8004016:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004018:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800401a:	3c01      	subs	r4, #1
 800401c:	b2a4      	uxth	r4, r4
 800401e:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8004020:	b98c      	cbnz	r4, 8004046 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004022:	6803      	ldr	r3, [r0, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	f022 0220 	bic.w	r2, r2, #32
 800402a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004032:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800403c:	2320      	movs	r3, #32
 800403e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8004042:	f001 fcbb 	bl	80059bc <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8004046:	2000      	movs	r0, #0
}
 8004048:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	f823 2b01 	strh.w	r2, [r3], #1
 8004050:	e7e1      	b.n	8004016 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004052:	b921      	cbnz	r1, 800405e <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004054:	1c59      	adds	r1, r3, #1
 8004056:	6852      	ldr	r2, [r2, #4]
 8004058:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800405a:	701a      	strb	r2, [r3, #0]
 800405c:	e7dc      	b.n	8004018 <UART_Receive_IT+0x26>
 800405e:	6852      	ldr	r2, [r2, #4]
 8004060:	1c59      	adds	r1, r3, #1
 8004062:	6281      	str	r1, [r0, #40]	; 0x28
 8004064:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004068:	e7f7      	b.n	800405a <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800406a:	2002      	movs	r0, #2
 800406c:	bd10      	pop	{r4, pc}

0800406e <HAL_UART_ErrorCallback>:
 800406e:	4770      	bx	lr

08004070 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004070:	6803      	ldr	r3, [r0, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004074:	68d9      	ldr	r1, [r3, #12]
{
 8004076:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8004078:	0716      	lsls	r6, r2, #28
{
 800407a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800407c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800407e:	d107      	bne.n	8004090 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004080:	0696      	lsls	r6, r2, #26
 8004082:	d55a      	bpl.n	800413a <HAL_UART_IRQHandler+0xca>
 8004084:	068d      	lsls	r5, r1, #26
 8004086:	d558      	bpl.n	800413a <HAL_UART_IRQHandler+0xca>
}
 8004088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800408c:	f7ff bfb1 	b.w	8003ff2 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004090:	f015 0501 	ands.w	r5, r5, #1
 8004094:	d102      	bne.n	800409c <HAL_UART_IRQHandler+0x2c>
 8004096:	f411 7f90 	tst.w	r1, #288	; 0x120
 800409a:	d04e      	beq.n	800413a <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800409c:	07d3      	lsls	r3, r2, #31
 800409e:	d505      	bpl.n	80040ac <HAL_UART_IRQHandler+0x3c>
 80040a0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040a2:	bf42      	ittt	mi
 80040a4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80040a6:	f043 0301 	orrmi.w	r3, r3, #1
 80040aa:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ac:	0750      	lsls	r0, r2, #29
 80040ae:	d504      	bpl.n	80040ba <HAL_UART_IRQHandler+0x4a>
 80040b0:	b11d      	cbz	r5, 80040ba <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040b4:	f043 0302 	orr.w	r3, r3, #2
 80040b8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ba:	0793      	lsls	r3, r2, #30
 80040bc:	d504      	bpl.n	80040c8 <HAL_UART_IRQHandler+0x58>
 80040be:	b11d      	cbz	r5, 80040c8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040c2:	f043 0304 	orr.w	r3, r3, #4
 80040c6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040c8:	0716      	lsls	r6, r2, #28
 80040ca:	d504      	bpl.n	80040d6 <HAL_UART_IRQHandler+0x66>
 80040cc:	b11d      	cbz	r5, 80040d6 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040d0:	f043 0308 	orr.w	r3, r3, #8
 80040d4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d066      	beq.n	80041aa <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040dc:	0695      	lsls	r5, r2, #26
 80040de:	d504      	bpl.n	80040ea <HAL_UART_IRQHandler+0x7a>
 80040e0:	0688      	lsls	r0, r1, #26
 80040e2:	d502      	bpl.n	80040ea <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80040e4:	4620      	mov	r0, r4
 80040e6:	f7ff ff84 	bl	8003ff2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040ee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80040f0:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80040f2:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040f4:	d402      	bmi.n	80040fc <HAL_UART_IRQHandler+0x8c>
 80040f6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80040fa:	d01a      	beq.n	8004132 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80040fc:	f7ff fd76 	bl	8003bec <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	0652      	lsls	r2, r2, #25
 8004106:	d510      	bpl.n	800412a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004108:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800410a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800410c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004110:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004112:	b150      	cbz	r0, 800412a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004114:	4b25      	ldr	r3, [pc, #148]	; (80041ac <HAL_UART_IRQHandler+0x13c>)
 8004116:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004118:	f7fd f9fc 	bl	8001514 <HAL_DMA_Abort_IT>
 800411c:	2800      	cmp	r0, #0
 800411e:	d044      	beq.n	80041aa <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004120:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8004122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004126:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004128:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800412a:	4620      	mov	r0, r4
 800412c:	f7ff ff9f 	bl	800406e <HAL_UART_ErrorCallback>
 8004130:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8004132:	f7ff ff9c 	bl	800406e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004136:	63e5      	str	r5, [r4, #60]	; 0x3c
 8004138:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800413a:	0616      	lsls	r6, r2, #24
 800413c:	d527      	bpl.n	800418e <HAL_UART_IRQHandler+0x11e>
 800413e:	060d      	lsls	r5, r1, #24
 8004140:	d525      	bpl.n	800418e <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004142:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8004146:	2a21      	cmp	r2, #33	; 0x21
 8004148:	d12f      	bne.n	80041aa <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800414a:	68a2      	ldr	r2, [r4, #8]
 800414c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004150:	6a22      	ldr	r2, [r4, #32]
 8004152:	d117      	bne.n	8004184 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004154:	8811      	ldrh	r1, [r2, #0]
 8004156:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800415a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800415c:	6921      	ldr	r1, [r4, #16]
 800415e:	b979      	cbnz	r1, 8004180 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8004160:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8004162:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8004164:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004166:	3a01      	subs	r2, #1
 8004168:	b292      	uxth	r2, r2
 800416a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800416c:	b9ea      	cbnz	r2, 80041aa <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004174:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800417c:	60da      	str	r2, [r3, #12]
 800417e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8004180:	3201      	adds	r2, #1
 8004182:	e7ee      	b.n	8004162 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004184:	1c51      	adds	r1, r2, #1
 8004186:	6221      	str	r1, [r4, #32]
 8004188:	7812      	ldrb	r2, [r2, #0]
 800418a:	605a      	str	r2, [r3, #4]
 800418c:	e7ea      	b.n	8004164 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800418e:	0650      	lsls	r0, r2, #25
 8004190:	d50b      	bpl.n	80041aa <HAL_UART_IRQHandler+0x13a>
 8004192:	064a      	lsls	r2, r1, #25
 8004194:	d509      	bpl.n	80041aa <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800419c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800419e:	2320      	movs	r3, #32
 80041a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80041a4:	4620      	mov	r0, r4
 80041a6:	f7ff ff23 	bl	8003ff0 <HAL_UART_TxCpltCallback>
 80041aa:	bd70      	pop	{r4, r5, r6, pc}
 80041ac:	080041b1 	.word	0x080041b1

080041b0 <UART_DMAAbortOnError>:
{
 80041b0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041b8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80041ba:	f7ff ff58 	bl	800406e <HAL_UART_ErrorCallback>
 80041be:	bd08      	pop	{r3, pc}

080041c0 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80041c0:	680b      	ldr	r3, [r1, #0]
 80041c2:	684a      	ldr	r2, [r1, #4]
 80041c4:	f8d1 c010 	ldr.w	ip, [r1, #16]
 80041c8:	2b01      	cmp	r3, #1
{
 80041ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80041ce:	6803      	ldr	r3, [r0, #0]
 80041d0:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80041d4:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80041d8:	694d      	ldr	r5, [r1, #20]
 80041da:	698c      	ldr	r4, [r1, #24]
 80041dc:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 80041e0:	6a0f      	ldr	r7, [r1, #32]
 80041e2:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80041e4:	d014      	beq.n	8004210 <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80041e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80041ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80041ee:	431a      	orrs	r2, r3
 80041f0:	ea42 0209 	orr.w	r2, r2, r9
 80041f4:	ea42 0208 	orr.w	r2, r2, r8
 80041f8:	ea42 030c 	orr.w	r3, r2, ip
 80041fc:	432b      	orrs	r3, r5
 80041fe:	4323      	orrs	r3, r4
 8004200:	ea43 030e 	orr.w	r3, r3, lr
 8004204:	433b      	orrs	r3, r7
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004206:	4333      	orrs	r3, r6
                                               Init->WriteProtection    |\
                                               Init->SDClockPeriod      |\
                                               Init->ReadBurst          |\
                                               Init->ReadPipeDelay
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004208:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 800420a:	2000      	movs	r0, #0
 800420c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004210:	6841      	ldr	r1, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004212:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8004216:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800421a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800421e:	430a      	orrs	r2, r1
 8004220:	ea43 030e 	orr.w	r3, r3, lr
 8004224:	ea42 0209 	orr.w	r2, r2, r9
 8004228:	433b      	orrs	r3, r7
 800422a:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800422e:	431e      	orrs	r6, r3
 8004230:	ea42 030c 	orr.w	r3, r2, ip
 8004234:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004236:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004238:	6006      	str	r6, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800423a:	6043      	str	r3, [r0, #4]
 800423c:	e7e5      	b.n	800420a <FMC_SDRAM_Init+0x4a>

0800423e <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800423e:	2a01      	cmp	r2, #1
{
 8004240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004242:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8004246:	688f      	ldr	r7, [r1, #8]
 8004248:	690d      	ldr	r5, [r1, #16]
 800424a:	694e      	ldr	r6, [r1, #20]
 800424c:	e891 4008 	ldmia.w	r1, {r3, lr}
 8004250:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 8004252:	d01b      	beq.n	800428c <FMC_SDRAM_Timing_Init+0x4e>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004254:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8004256:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800425a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800425e:	3b01      	subs	r3, #1
 8004260:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8004264:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8004266:	1e7b      	subs	r3, r7, #1
 8004268:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800426c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004270:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8004274:	3d01      	subs	r5, #1
 8004276:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800427a:	3e01      	subs	r6, #1
 800427c:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
                       (((Timing->RCDDelay)-1U) << 24U));
 8004280:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004282:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004286:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 8004288:	2000      	movs	r0, #0
 800428a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800428c:	6884      	ldr	r4, [r0, #8]
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800428e:	68c2      	ldr	r2, [r0, #12]
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004290:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004294:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004298:	3b01      	subs	r3, #1
 800429a:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 800429e:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80042a0:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80042a4:	1e7b      	subs	r3, r7, #1
 80042a6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80042aa:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80042ae:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80042b2:	1e6b      	subs	r3, r5, #1
 80042b4:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80042b8:	3e01      	subs	r6, #1
 80042ba:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80042be:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80042c0:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80042c4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80042c8:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80042ca:	60c3      	str	r3, [r0, #12]
 80042cc:	e7dc      	b.n	8004288 <FMC_SDRAM_Timing_Init+0x4a>

080042ce <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80042ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tmpr = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	9301      	str	r3, [sp, #4]
{
 80042d4:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80042d6:	e891 000c 	ldmia.w	r1, {r2, r3}
 80042da:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
                    ((Command->ModeRegisterDefinition) << 9U)
 80042dc:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80042de:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80042e2:	688a      	ldr	r2, [r1, #8]
 80042e4:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80042e6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80042ea:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 80042ec:	9b01      	ldr	r3, [sp, #4]
 80042ee:	6103      	str	r3, [r0, #16]
{
 80042f0:	4604      	mov	r4, r0

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80042f2:	f7fc ffd1 	bl	8001298 <HAL_GetTick>
 80042f6:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80042f8:	69a0      	ldr	r0, [r4, #24]
 80042fa:	f010 0020 	ands.w	r0, r0, #32
 80042fe:	d003      	beq.n	8004308 <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004300:	1c6b      	adds	r3, r5, #1
 8004302:	d0f9      	beq.n	80042f8 <FMC_SDRAM_SendCommand+0x2a>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004304:	b915      	cbnz	r5, 800430c <FMC_SDRAM_SendCommand+0x3e>
      {
        return HAL_TIMEOUT;
 8004306:	2003      	movs	r0, #3
      }
    }
  }

  return HAL_OK;
}
 8004308:	b002      	add	sp, #8
 800430a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800430c:	f7fc ffc4 	bl	8001298 <HAL_GetTick>
 8004310:	1b80      	subs	r0, r0, r6
 8004312:	4285      	cmp	r5, r0
 8004314:	d2f0      	bcs.n	80042f8 <FMC_SDRAM_SendCommand+0x2a>
 8004316:	e7f6      	b.n	8004306 <FMC_SDRAM_SendCommand+0x38>

08004318 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8004318:	6943      	ldr	r3, [r0, #20]
 800431a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800431e:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8004320:	2000      	movs	r0, #0
 8004322:	4770      	bx	lr

08004324 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004326:	3b01      	subs	r3, #1
 8004328:	d101      	bne.n	800432e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800432a:	2003      	movs	r0, #3
 800432c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800432e:	6902      	ldr	r2, [r0, #16]
 8004330:	2a00      	cmp	r2, #0
 8004332:	daf8      	bge.n	8004326 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004334:	6903      	ldr	r3, [r0, #16]
 8004336:	4a06      	ldr	r2, [pc, #24]	; (8004350 <USB_CoreReset+0x2c>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800433e:	3a01      	subs	r2, #1
 8004340:	d0f3      	beq.n	800432a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004342:	6903      	ldr	r3, [r0, #16]
 8004344:	f013 0301 	ands.w	r3, r3, #1
 8004348:	d1f9      	bne.n	800433e <USB_CoreReset+0x1a>

  return HAL_OK;
 800434a:	4618      	mov	r0, r3
}
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	00030d41 	.word	0x00030d41

08004354 <USB_CoreInit>:
{
 8004354:	b084      	sub	sp, #16
 8004356:	b538      	push	{r3, r4, r5, lr}
 8004358:	ad05      	add	r5, sp, #20
 800435a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800435e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004360:	2b01      	cmp	r3, #1
{
 8004362:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004364:	d125      	bne.n	80043b2 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004366:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800436e:	68c3      	ldr	r3, [r0, #12]
 8004370:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004378:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800437a:	68c3      	ldr	r3, [r0, #12]
 800437c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004380:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004382:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004384:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004386:	bf02      	ittt	eq
 8004388:	68c3      	ldreq	r3, [r0, #12]
 800438a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800438e:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004390:	f7ff ffc8 	bl	8004324 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8004394:	9b08      	ldr	r3, [sp, #32]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d107      	bne.n	80043aa <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800439a:	68a3      	ldr	r3, [r4, #8]
 800439c:	f043 0306 	orr.w	r3, r3, #6
 80043a0:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043a2:	68a3      	ldr	r3, [r4, #8]
 80043a4:	f043 0320 	orr.w	r3, r3, #32
 80043a8:	60a3      	str	r3, [r4, #8]
}
 80043aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043ae:	b004      	add	sp, #16
 80043b0:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043b2:	68c3      	ldr	r3, [r0, #12]
 80043b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043b8:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80043ba:	f7ff ffb3 	bl	8004324 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80043be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043c0:	b923      	cbnz	r3, 80043cc <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80043ca:	e7e3      	b.n	8004394 <USB_CoreInit+0x40>
 80043cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d2:	e7f9      	b.n	80043c8 <USB_CoreInit+0x74>

080043d4 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043d4:	6883      	ldr	r3, [r0, #8]
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	6083      	str	r3, [r0, #8]
}
 80043dc:	2000      	movs	r0, #0
 80043de:	4770      	bx	lr

080043e0 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043e0:	6883      	ldr	r3, [r0, #8]
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	6083      	str	r3, [r0, #8]
}
 80043e8:	2000      	movs	r0, #0
 80043ea:	4770      	bx	lr

080043ec <USB_SetCurrentMode>:
{
 80043ec:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043ee:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80043f0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043f2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80043f6:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80043f8:	d108      	bne.n	800440c <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043fa:	68c3      	ldr	r3, [r0, #12]
 80043fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004400:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8004402:	2032      	movs	r0, #50	; 0x32
 8004404:	f7fc ff4e 	bl	80012a4 <HAL_Delay>
  return HAL_OK;
 8004408:	2000      	movs	r0, #0
 800440a:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800440c:	b919      	cbnz	r1, 8004416 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800440e:	68c3      	ldr	r3, [r0, #12]
 8004410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004414:	e7f4      	b.n	8004400 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8004416:	2001      	movs	r0, #1
}
 8004418:	bd08      	pop	{r3, pc}
	...

0800441c <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800441c:	0189      	lsls	r1, r1, #6
 800441e:	f041 0120 	orr.w	r1, r1, #32
 8004422:	4a06      	ldr	r2, [pc, #24]	; (800443c <USB_FlushTxFifo+0x20>)
 8004424:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8004426:	3a01      	subs	r2, #1
 8004428:	d005      	beq.n	8004436 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800442a:	6903      	ldr	r3, [r0, #16]
 800442c:	f013 0320 	ands.w	r3, r3, #32
 8004430:	d1f9      	bne.n	8004426 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8004432:	4618      	mov	r0, r3
 8004434:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004436:	2003      	movs	r0, #3
}
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	00030d41 	.word	0x00030d41

08004440 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004440:	2310      	movs	r3, #16
 8004442:	4a06      	ldr	r2, [pc, #24]	; (800445c <USB_FlushRxFifo+0x1c>)
 8004444:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8004446:	3a01      	subs	r2, #1
 8004448:	d005      	beq.n	8004456 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800444a:	6903      	ldr	r3, [r0, #16]
 800444c:	f013 0310 	ands.w	r3, r3, #16
 8004450:	d1f9      	bne.n	8004446 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8004452:	4618      	mov	r0, r3
 8004454:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004456:	2003      	movs	r0, #3
}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	00030d41 	.word	0x00030d41

08004460 <USB_WritePacket>:
{
 8004460:	b510      	push	{r4, lr}
 8004462:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8004466:	b94c      	cbnz	r4, 800447c <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004468:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800446a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800446e:	f023 0303 	bic.w	r3, r3, #3
 8004472:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8004476:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8004478:	4299      	cmp	r1, r3
 800447a:	d101      	bne.n	8004480 <USB_WritePacket+0x20>
}
 800447c:	2000      	movs	r0, #0
 800447e:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004480:	f851 2b04 	ldr.w	r2, [r1], #4
 8004484:	6002      	str	r2, [r0, #0]
 8004486:	e7f7      	b.n	8004478 <USB_WritePacket+0x18>

08004488 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004488:	3203      	adds	r2, #3
 800448a:	f022 0203 	bic.w	r2, r2, #3
 800448e:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004490:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8004494:	4291      	cmp	r1, r2
 8004496:	d101      	bne.n	800449c <USB_ReadPacket+0x14>
}
 8004498:	4608      	mov	r0, r1
 800449a:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800449c:	6803      	ldr	r3, [r0, #0]
 800449e:	f841 3b04 	str.w	r3, [r1], #4
 80044a2:	e7f7      	b.n	8004494 <USB_ReadPacket+0xc>

080044a4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80044a4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80044a6:	6980      	ldr	r0, [r0, #24]
}
 80044a8:	4010      	ands	r0, r2
 80044aa:	4770      	bx	lr

080044ac <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80044ac:	6940      	ldr	r0, [r0, #20]
}
 80044ae:	f000 0001 	and.w	r0, r0, #1
 80044b2:	4770      	bx	lr

080044b4 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80044b4:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80044b8:	f023 0303 	bic.w	r3, r3, #3
{
 80044bc:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80044be:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80044c2:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80044c6:	f001 0303 	and.w	r3, r1, #3
 80044ca:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 80044cc:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80044ce:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80044d2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 80044d6:	d104      	bne.n	80044e2 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 80044d8:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 80044dc:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 80044de:	2000      	movs	r0, #0
 80044e0:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 80044e2:	2902      	cmp	r1, #2
 80044e4:	d1fb      	bne.n	80044de <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 80044e6:	f241 7370 	movw	r3, #6000	; 0x1770
 80044ea:	e7f7      	b.n	80044dc <USB_InitFSLSPClkSel+0x28>

080044ec <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80044ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 80044ee:	2500      	movs	r5, #0
 80044f0:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 80044f2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80044f6:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80044f8:	9b01      	ldr	r3, [sp, #4]
 80044fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80044fe:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004500:	9b01      	ldr	r3, [sp, #4]
 8004502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8004506:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004508:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 800450c:	2064      	movs	r0, #100	; 0x64
 800450e:	f7fc fec9 	bl	80012a4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004512:	9b01      	ldr	r3, [sp, #4]
 8004514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004518:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 800451c:	200a      	movs	r0, #10
 800451e:	f7fc fec1 	bl	80012a4 <HAL_Delay>

  return HAL_OK;
}
 8004522:	4628      	mov	r0, r5
 8004524:	b003      	add	sp, #12
 8004526:	bd30      	pop	{r4, r5, pc}

08004528 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004528:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800452e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004532:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004534:	9b01      	ldr	r3, [sp, #4]
 8004536:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800453a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800453c:	9b01      	ldr	r3, [sp, #4]
 800453e:	04da      	lsls	r2, r3, #19
 8004540:	d406      	bmi.n	8004550 <USB_DriveVbus+0x28>
 8004542:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004544:	bf02      	ittt	eq
 8004546:	9b01      	ldreq	r3, [sp, #4]
 8004548:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800454c:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004550:	9b01      	ldr	r3, [sp, #4]
 8004552:	04db      	lsls	r3, r3, #19
 8004554:	d505      	bpl.n	8004562 <USB_DriveVbus+0x3a>
 8004556:	b921      	cbnz	r1, 8004562 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004558:	9b01      	ldr	r3, [sp, #4]
 800455a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800455e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8004562:	2000      	movs	r0, #0
 8004564:	b002      	add	sp, #8
 8004566:	4770      	bx	lr

08004568 <USB_HostInit>:
{
 8004568:	b084      	sub	sp, #16
 800456a:	b538      	push	{r3, r4, r5, lr}
 800456c:	4604      	mov	r4, r0
 800456e:	a805      	add	r0, sp, #20
 8004570:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800457a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800457c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004580:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004582:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004584:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004588:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800458a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800458c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004590:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004592:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004594:	05da      	lsls	r2, r3, #23
 8004596:	d53f      	bpl.n	8004618 <USB_HostInit+0xb0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004598:	9b07      	ldr	r3, [sp, #28]
 800459a:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800459c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80045a0:	d13c      	bne.n	800461c <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80045a2:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80045a6:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80045aa:	2110      	movs	r1, #16
 80045ac:	4620      	mov	r0, r4
 80045ae:	f7ff ff35 	bl	800441c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80045b2:	4620      	mov	r0, r4
 80045b4:	f7ff ff44 	bl	8004440 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 80045b8:	2300      	movs	r3, #0
 80045ba:	9906      	ldr	r1, [sp, #24]
 80045bc:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 80045c4:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 80045c6:	428b      	cmp	r3, r1
 80045c8:	d12b      	bne.n	8004622 <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 80045ca:	2101      	movs	r1, #1
 80045cc:	4620      	mov	r0, r4
 80045ce:	f7ff ffab 	bl	8004528 <USB_DriveVbus>
  HAL_Delay(200U);
 80045d2:	20c8      	movs	r0, #200	; 0xc8
 80045d4:	f7fc fe66 	bl	80012a4 <HAL_Delay>
  USBx->GINTMSK = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80045dc:	f04f 33ff 	mov.w	r3, #4294967295
 80045e0:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 80045e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80045e4:	05db      	lsls	r3, r3, #23
 80045e6:	d521      	bpl.n	800462c <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 80045e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045ec:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80045ee:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80045f2:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80045f4:	4b11      	ldr	r3, [pc, #68]	; (800463c <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80045f6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 80045fa:	9b08      	ldr	r3, [sp, #32]
 80045fc:	b91b      	cbnz	r3, 8004606 <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045fe:	69a3      	ldr	r3, [r4, #24]
 8004600:	f043 0310 	orr.w	r3, r3, #16
 8004604:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004606:	69a2      	ldr	r2, [r4, #24]
 8004608:	4b0d      	ldr	r3, [pc, #52]	; (8004640 <USB_HostInit+0xd8>)
 800460a:	4313      	orrs	r3, r2
 800460c:	61a3      	str	r3, [r4, #24]
}
 800460e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004612:	2000      	movs	r0, #0
 8004614:	b004      	add	sp, #16
 8004616:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004618:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800461c:	f023 0304 	bic.w	r3, r3, #4
 8004620:	e7c1      	b.n	80045a6 <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004622:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004624:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8004626:	60d5      	str	r5, [r2, #12]
 8004628:	3220      	adds	r2, #32
 800462a:	e7cc      	b.n	80045c6 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004630:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8004634:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004636:	4b03      	ldr	r3, [pc, #12]	; (8004644 <USB_HostInit+0xdc>)
 8004638:	e7dd      	b.n	80045f6 <USB_HostInit+0x8e>
 800463a:	bf00      	nop
 800463c:	00e00300 	.word	0x00e00300
 8004640:	a3200008 	.word	0xa3200008
 8004644:	004000e0 	.word	0x004000e0

08004648 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004648:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800464e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004652:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004654:	9801      	ldr	r0, [sp, #4]
}
 8004656:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800465a:	b002      	add	sp, #8
 800465c:	4770      	bx	lr

0800465e <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800465e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004662:	6880      	ldr	r0, [r0, #8]
}
 8004664:	b280      	uxth	r0, r0
 8004666:	4770      	bx	lr

08004668 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800466c:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8004670:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 8004674:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8004678:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800467a:	f04f 30ff 	mov.w	r0, #4294967295
 800467e:	60a0      	str	r0, [r4, #8]
 8004680:	fa4f f882 	sxtb.w	r8, r2
 8004684:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 8004688:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800468c:	2e03      	cmp	r6, #3
 800468e:	d86c      	bhi.n	800476a <USB_HC_Init+0x102>
 8004690:	e8df f006 	tbb	[pc, r6]
 8004694:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004698:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800469c:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80046a0:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 80046a2:	da03      	bge.n	80046ac <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80046a4:	68e1      	ldr	r1, [r4, #12]
 80046a6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80046aa:	e005      	b.n	80046b8 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80046ac:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80046ae:	05c9      	lsls	r1, r1, #23
 80046b0:	d542      	bpl.n	8004738 <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80046b2:	68e1      	ldr	r1, [r4, #12]
 80046b4:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 80046b8:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80046ba:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80046bc:	f8dc 4018 	ldr.w	r4, [ip, #24]
 80046c0:	2101      	movs	r1, #1
 80046c2:	fa01 f10e 	lsl.w	r1, r1, lr
 80046c6:	4321      	orrs	r1, r4
 80046c8:	f8cc 1018 	str.w	r1, [ip, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80046cc:	69a9      	ldr	r1, [r5, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 80046ce:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80046d2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80046d6:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 80046d8:	bfb4      	ite	lt
 80046da:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 80046de:	2400      	movge	r4, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80046e0:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = 0U;
 80046e4:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80046e8:	059b      	lsls	r3, r3, #22
 80046ea:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80046ee:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80046f2:	02d2      	lsls	r2, r2, #11
 80046f4:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80046f8:	432b      	orrs	r3, r5
 80046fa:	4313      	orrs	r3, r2
 80046fc:	04b2      	lsls	r2, r6, #18
 80046fe:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = 0U;
 8004702:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004704:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = 0U;
 8004708:	bf0c      	ite	eq
 800470a:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 800470e:	2100      	movne	r1, #0
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004710:	4323      	orrs	r3, r4
 8004712:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 8004714:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004716:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 800471a:	d128      	bne.n	800476e <USB_HC_Init+0x106>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800471c:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8004720:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004724:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 8004728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800472c:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8004730:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004734:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8004736:	dbb5      	blt.n	80046a4 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004738:	f8dc 0018 	ldr.w	r0, [ip, #24]
 800473c:	2101      	movs	r1, #1
 800473e:	fa01 f10e 	lsl.w	r1, r1, lr
 8004742:	4301      	orrs	r1, r0
 8004744:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004748:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 800474a:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800474c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8004750:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8004752:	4604      	mov	r4, r0
 8004754:	e7c4      	b.n	80046e0 <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004756:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 800475a:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800475e:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8004760:	daea      	bge.n	8004738 <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004762:	68e1      	ldr	r1, [r4, #12]
 8004764:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004768:	e7a6      	b.n	80046b8 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 800476a:	2001      	movs	r0, #1
 800476c:	e7a6      	b.n	80046bc <USB_HC_Init+0x54>
}
 800476e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004772 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004772:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004776:	6940      	ldr	r0, [r0, #20]
}
 8004778:	b280      	uxth	r0, r0
 800477a:	4770      	bx	lr

0800477c <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800477c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004780:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8004784:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004788:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800478c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004790:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004794:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004798:	d11e      	bne.n	80047d8 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800479a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800479c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80047a0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80047a4:	d137      	bne.n	8004816 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80047a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047aa:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80047ae:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80047b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047b6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80047ba:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80047be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047c2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80047c6:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 80047ca:	3b01      	subs	r3, #1
 80047cc:	d002      	beq.n	80047d4 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80047ce:	6811      	ldr	r1, [r2, #0]
 80047d0:	2900      	cmp	r1, #0
 80047d2:	dbfa      	blt.n	80047ca <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 80047d4:	2000      	movs	r0, #0
 80047d6:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80047d8:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 80047dc:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80047e0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80047e4:	d117      	bne.n	8004816 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80047e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047ea:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80047ee:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80047f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047f6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80047fa:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80047fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004802:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8004806:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 800480a:	3b01      	subs	r3, #1
 800480c:	d0e2      	beq.n	80047d4 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800480e:	6811      	ldr	r1, [r2, #0]
 8004810:	2900      	cmp	r1, #0
 8004812:	dbfa      	blt.n	800480a <USB_HC_Halt+0x8e>
 8004814:	e7de      	b.n	80047d4 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004816:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800481a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800481e:	e7d9      	b.n	80047d4 <USB_HC_Halt+0x58>

08004820 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004820:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004824:	4a06      	ldr	r2, [pc, #24]	; (8004840 <USB_DoPing+0x20>)
 8004826:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800482a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800482e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004832:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004836:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 800483a:	2000      	movs	r0, #0
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	80080000 	.word	0x80080000

08004844 <USB_HC_StartXfer>:
{
 8004844:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004848:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800484a:	05db      	lsls	r3, r3, #23
{
 800484c:	4616      	mov	r6, r2
 800484e:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004850:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004852:	d517      	bpl.n	8004884 <USB_HC_StartXfer+0x40>
 8004854:	790d      	ldrb	r5, [r1, #4]
 8004856:	b9ad      	cbnz	r5, 8004884 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004858:	b94e      	cbnz	r6, 800486e <USB_HC_StartXfer+0x2a>
 800485a:	794b      	ldrb	r3, [r1, #5]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d111      	bne.n	8004884 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 8004860:	4611      	mov	r1, r2
 8004862:	f7ff ffdd 	bl	8004820 <USB_DoPing>
}
 8004866:	2000      	movs	r0, #0
 8004868:	b002      	add	sp, #8
 800486a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 800486e:	2e01      	cmp	r6, #1
 8004870:	d108      	bne.n	8004884 <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004872:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8004876:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 800487a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800487e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8004882:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8004884:	6908      	ldr	r0, [r1, #16]
 8004886:	2800      	cmp	r0, #0
 8004888:	d066      	beq.n	8004958 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800488a:	890b      	ldrh	r3, [r1, #8]
 800488c:	3801      	subs	r0, #1
 800488e:	4418      	add	r0, r3
 8004890:	fbb0 f0f3 	udiv	r0, r0, r3
 8004894:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8004896:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800489a:	d903      	bls.n	80048a4 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 80048a0:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 80048a4:	78cf      	ldrb	r7, [r1, #3]
 80048a6:	b117      	cbz	r7, 80048ae <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80048a8:	890b      	ldrh	r3, [r1, #8]
 80048aa:	4343      	muls	r3, r0
 80048ac:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80048ae:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80048b2:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80048b4:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80048b8:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80048bc:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80048c0:	ea4e 0e08 	orr.w	lr, lr, r8
 80048c4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80049a4 <USB_HC_StartXfer+0x160>
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80048c8:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80048cc:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 80048d0:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80048d4:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 80048d8:	b116      	cbz	r6, 80048e0 <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80048da:	68c8      	ldr	r0, [r1, #12]
 80048dc:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80048e0:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 80048e4:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80048e8:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 80048ec:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
 80048f0:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80048f4:	43c0      	mvns	r0, r0
 80048f6:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 80048fa:	0740      	lsls	r0, r0, #29
 80048fc:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8004900:	ea40 000c 	orr.w	r0, r0, ip
 8004904:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004908:	4825      	ldr	r0, [pc, #148]	; (80049a0 <USB_HC_StartXfer+0x15c>)
 800490a:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 800490e:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004912:	f8d0 c000 	ldr.w	ip, [r0]
 8004916:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 800491a:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800491e:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 8004922:	b1df      	cbz	r7, 800495c <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004924:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004928:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800492c:	f8d0 c000 	ldr.w	ip, [r0]
 8004930:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 8004934:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004938:	6800      	ldr	r0, [r0, #0]
 800493a:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 800493e:	2e00      	cmp	r6, #0
 8004940:	d191      	bne.n	8004866 <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004942:	2f00      	cmp	r7, #0
 8004944:	d18f      	bne.n	8004866 <USB_HC_StartXfer+0x22>
 8004946:	2b00      	cmp	r3, #0
 8004948:	d08d      	beq.n	8004866 <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 800494a:	79c8      	ldrb	r0, [r1, #7]
 800494c:	2803      	cmp	r0, #3
 800494e:	d813      	bhi.n	8004978 <USB_HC_StartXfer+0x134>
 8004950:	e8df f000 	tbb	[pc, r0]
 8004954:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8004958:	2001      	movs	r0, #1
 800495a:	e7a3      	b.n	80048a4 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800495c:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 8004960:	e7e2      	b.n	8004928 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004962:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004964:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004966:	f3c5 058f 	ubfx	r5, r5, #2, #16
 800496a:	b280      	uxth	r0, r0
 800496c:	4285      	cmp	r5, r0
 800496e:	d903      	bls.n	8004978 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004970:	69a0      	ldr	r0, [r4, #24]
 8004972:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004976:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004978:	2000      	movs	r0, #0
 800497a:	9000      	str	r0, [sp, #0]
 800497c:	b29b      	uxth	r3, r3
 800497e:	68c9      	ldr	r1, [r1, #12]
 8004980:	4620      	mov	r0, r4
 8004982:	f7ff fd6d 	bl	8004460 <USB_WritePacket>
 8004986:	e76e      	b.n	8004866 <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004988:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800498c:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800498e:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8004992:	b280      	uxth	r0, r0
 8004994:	4285      	cmp	r5, r0
 8004996:	d9ef      	bls.n	8004978 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004998:	69a0      	ldr	r0, [r4, #24]
 800499a:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 800499e:	e7ea      	b.n	8004976 <USB_HC_StartXfer+0x132>
 80049a0:	200002a0 	.word	0x200002a0
 80049a4:	1ff80000 	.word	0x1ff80000

080049a8 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049a8:	6883      	ldr	r3, [r0, #8]
 80049aa:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80049ae:	b510      	push	{r4, lr}


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80049b0:	2110      	movs	r1, #16
{
 80049b2:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049b4:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80049b6:	f7ff fd31 	bl	800441c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80049ba:	4620      	mov	r0, r4
 80049bc:	f7ff fd40 	bl	8004440 <USB_FlushRxFifo>
 80049c0:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 80049c4:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 80049c8:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80049ca:	6811      	ldr	r1, [r2, #0]
 80049cc:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80049d0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 80049d4:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 80049d8:	4290      	cmp	r0, r2
 80049da:	d1f6      	bne.n	80049ca <USB_StopHost+0x22>
 80049dc:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80049de:	6819      	ldr	r1, [r3, #0]
 80049e0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80049e4:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 80049e8:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 80049ea:	3001      	adds	r0, #1
 80049ec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80049f0:	d802      	bhi.n	80049f8 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80049f2:	6819      	ldr	r1, [r3, #0]
 80049f4:	2900      	cmp	r1, #0
 80049f6:	dbf8      	blt.n	80049ea <USB_StopHost+0x42>
 80049f8:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d1ef      	bne.n	80049de <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80049fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004a02:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004a06:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a08:	68a3      	ldr	r3, [r4, #8]
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	60a3      	str	r3, [r4, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8004a10:	2000      	movs	r0, #0
 8004a12:	bd10      	pop	{r4, pc}

08004a14 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 8004a14:	2000      	movs	r0, #0
 8004a16:	4770      	bx	lr

08004a18 <USBH_CDC_InterfaceDeInit>:
{
 8004a18:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004a1a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8004a1e:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8004a20:	7821      	ldrb	r1, [r4, #0]
{
 8004a22:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8004a24:	b139      	cbz	r1, 8004a36 <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004a26:	f000 fe17 	bl	8005658 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8004a2a:	7821      	ldrb	r1, [r4, #0]
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f000 fe2f 	bl	8005690 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8004a32:	2300      	movs	r3, #0
 8004a34:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8004a36:	7b21      	ldrb	r1, [r4, #12]
 8004a38:	b141      	cbz	r1, 8004a4c <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	f000 fe0c 	bl	8005658 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8004a40:	7b21      	ldrb	r1, [r4, #12]
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 fe24 	bl	8005690 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8004a48:	2300      	movs	r3, #0
 8004a4a:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8004a4c:	7b61      	ldrb	r1, [r4, #13]
 8004a4e:	b141      	cbz	r1, 8004a62 <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004a50:	4628      	mov	r0, r5
 8004a52:	f000 fe01 	bl	8005658 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8004a56:	7b61      	ldrb	r1, [r4, #13]
 8004a58:	4628      	mov	r0, r5
 8004a5a:	f000 fe19 	bl	8005690 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8004a5e:	2300      	movs	r3, #0
 8004a60:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 8004a62:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8004a66:	69d8      	ldr	r0, [r3, #28]
 8004a68:	b128      	cbz	r0, 8004a76 <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8004a6a:	f002 fb71 	bl	8007150 <free>
    phost->pActiveClass->pData = 0U;
 8004a6e:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8004a72:	2200      	movs	r2, #0
 8004a74:	61da      	str	r2, [r3, #28]
}
 8004a76:	2000      	movs	r0, #0
 8004a78:	bd38      	pop	{r3, r4, r5, pc}

08004a7a <USBH_CDC_InterfaceInit>:
{
 8004a7a:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 8004a7c:	2202      	movs	r2, #2
{
 8004a7e:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 8004a80:	2301      	movs	r3, #1
 8004a82:	4611      	mov	r1, r2
{
 8004a84:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 8004a86:	f000 f9b2 	bl	8004dee <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 8004a8a:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 8004a8c:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 8004a8e:	d102      	bne.n	8004a96 <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8004a90:	2002      	movs	r0, #2
}
 8004a92:	b005      	add	sp, #20
 8004a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 8004a96:	4601      	mov	r1, r0
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f000 f99f 	bl	8004ddc <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8004a9e:	2050      	movs	r0, #80	; 0x50
 8004aa0:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 8004aa4:	f002 fb4c 	bl	8007140 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004aa8:	231a      	movs	r3, #26
 8004aaa:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8004aae:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004ab0:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 8004ab4:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004ab6:	bf42      	ittt	mi
 8004ab8:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004aba:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 8004abe:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8004ac0:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8004ac2:	7841      	ldrb	r1, [r0, #1]
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	f000 fdcc 	bl	8005662 <USBH_AllocPipe>
 8004aca:	4601      	mov	r1, r0
 8004acc:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 8004ace:	8960      	ldrh	r0, [r4, #10]
 8004ad0:	9002      	str	r0, [sp, #8]
 8004ad2:	2003      	movs	r0, #3
 8004ad4:	9001      	str	r0, [sp, #4]
 8004ad6:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8004ada:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8004ade:	7862      	ldrb	r2, [r4, #1]
 8004ae0:	9000      	str	r0, [sp, #0]
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	f000 fda9 	bl	800563a <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004ae8:	2200      	movs	r2, #0
 8004aea:	7821      	ldrb	r1, [r4, #0]
 8004aec:	4628      	mov	r0, r5
 8004aee:	f002 fab7 	bl	8007060 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 8004af2:	2300      	movs	r3, #0
 8004af4:	461a      	mov	r2, r3
 8004af6:	210a      	movs	r1, #10
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 f978 	bl	8004dee <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 8004afe:	28ff      	cmp	r0, #255	; 0xff
 8004b00:	d0c6      	beq.n	8004a90 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004b02:	231a      	movs	r3, #26
 8004b04:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004b08:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004b0c:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004b10:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 8004b14:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004b18:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004b1c:	bf0d      	iteet	eq
 8004b1e:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004b20:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004b22:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004b24:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004b26:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004b2a:	bf08      	it	eq
 8004b2c:	73a3      	strbeq	r3, [r4, #14]
 8004b2e:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004b32:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004b34:	bf18      	it	ne
 8004b36:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004b38:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004b3a:	bf14      	ite	ne
 8004b3c:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004b3e:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004b40:	f000 fd8f 	bl	8005662 <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004b44:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004b46:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f000 fd8a 	bl	8005662 <USBH_AllocPipe>
 8004b4e:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8004b50:	8b20      	ldrh	r0, [r4, #24]
 8004b52:	9002      	str	r0, [sp, #8]
 8004b54:	2602      	movs	r6, #2
 8004b56:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8004b5a:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8004b5e:	7ba2      	ldrb	r2, [r4, #14]
 8004b60:	7b61      	ldrb	r1, [r4, #13]
 8004b62:	9601      	str	r6, [sp, #4]
 8004b64:	9000      	str	r0, [sp, #0]
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 fd67 	bl	800563a <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8004b6c:	8b60      	ldrh	r0, [r4, #26]
 8004b6e:	9002      	str	r0, [sp, #8]
 8004b70:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8004b74:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8004b78:	7be2      	ldrb	r2, [r4, #15]
 8004b7a:	7b21      	ldrb	r1, [r4, #12]
 8004b7c:	9601      	str	r6, [sp, #4]
 8004b7e:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 8004b80:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 8004b82:	4628      	mov	r0, r5
 8004b84:	f000 fd59 	bl	800563a <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004b88:	4632      	mov	r2, r6
 8004b8a:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8004b8c:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004b90:	4628      	mov	r0, r5
 8004b92:	f002 fa65 	bl	8007060 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8004b96:	4632      	mov	r2, r6
 8004b98:	7b21      	ldrb	r1, [r4, #12]
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	f002 fa60 	bl	8007060 <USBH_LL_SetToggle>
      status = USBH_OK;
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	e776      	b.n	8004a92 <USBH_CDC_InterfaceInit+0x18>

08004ba4 <USBH_CDC_ClassRequest>:
{
 8004ba4:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004ba6:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8004baa:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004bac:	23a1      	movs	r3, #161	; 0xa1
 8004bae:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004bb0:	2321      	movs	r3, #33	; 0x21
 8004bb2:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004bb4:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004bba:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004bbc:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004bbe:	3140      	adds	r1, #64	; 0x40
{
 8004bc0:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004bc2:	f000 fac9 	bl	8005158 <USBH_CtlReq>
  if(status == USBH_OK)
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	b920      	cbnz	r0, 8004bd4 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004bca:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8004bce:	2102      	movs	r1, #2
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	4798      	blx	r3
}
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	bd38      	pop	{r3, r4, r5, pc}

08004bd8 <USBH_CDC_TransmitCallback>:
 8004bd8:	4770      	bx	lr

08004bda <USBH_CDC_ReceiveCallback>:
 8004bda:	4770      	bx	lr

08004bdc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8004bdc:	4770      	bx	lr

08004bde <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004bde:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8004be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004be4:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 8004be6:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 8004bea:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d83d      	bhi.n	8004c6c <USBH_CDC_Process+0x8e>
 8004bf0:	e8df f003 	tbb	[pc, r3]
 8004bf4:	42170603 	.word	0x42170603
 8004bf8:	a6          	.byte	0xa6
 8004bf9:	00          	.byte	0x00
    status = USBH_OK;
 8004bfa:	2000      	movs	r0, #0
}
 8004bfc:	b002      	add	sp, #8
 8004bfe:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004c00:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004c02:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004c04:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8004c06:	2320      	movs	r3, #32
 8004c08:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004c0a:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004c10:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004c12:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004c14:	f000 faa0 	bl	8005158 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8004c18:	bb50      	cbnz	r0, 8004c70 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004c1a:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 8004c1c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8004c20:	e024      	b.n	8004c6c <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004c22:	23a1      	movs	r3, #161	; 0xa1
 8004c24:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004c26:	2321      	movs	r3, #33	; 0x21
 8004c28:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004c2a:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004c30:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004c32:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004c34:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8004c38:	f000 fa8e 	bl	8005158 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8004c3c:	b9c0      	cbnz	r0, 8004c70 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004c3e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004c40:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE;
 8004c42:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004c46:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8004c50:	4291      	cmp	r1, r2
 8004c52:	d10b      	bne.n	8004c6c <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004c54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c58:	795a      	ldrb	r2, [r3, #5]
 8004c5a:	4291      	cmp	r1, r2
 8004c5c:	d106      	bne.n	8004c6c <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004c5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d102      	bne.n	8004c6c <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 8004c66:	4628      	mov	r0, r5
 8004c68:	f7ff ffb8 	bl	8004bdc <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004c6c:	2001      	movs	r0, #1
 8004c6e:	e7c5      	b.n	8004bfc <USBH_CDC_Process+0x1e>
      if(req_status != USBH_BUSY)
 8004c70:	2801      	cmp	r0, #1
 8004c72:	d0fb      	beq.n	8004c6c <USBH_CDC_Process+0x8e>
        CDC_Handle->state = CDC_ERROR_STATE;
 8004c74:	2304      	movs	r3, #4
 8004c76:	e7d1      	b.n	8004c1c <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 8004c78:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8004c7c:	2901      	cmp	r1, #1
 8004c7e:	d021      	beq.n	8004cc4 <USBH_CDC_Process+0xe6>
 8004c80:	2902      	cmp	r1, #2
 8004c82:	d02e      	beq.n	8004ce2 <USBH_CDC_Process+0x104>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004c84:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8004c88:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8004c8a:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d045      	beq.n	8004d1e <USBH_CDC_Process+0x140>
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d1ea      	bne.n	8004c6c <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8004c96:	7b31      	ldrb	r1, [r6, #12]
 8004c98:	4628      	mov	r0, r5
 8004c9a:	f002 f9d1 	bl	8007040 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8004c9e:	2801      	cmp	r0, #1
 8004ca0:	d1e4      	bne.n	8004c6c <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8004ca2:	7b31      	ldrb	r1, [r6, #12]
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f002 f987 	bl	8006fb8 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8004caa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004cac:	4298      	cmp	r0, r3
 8004cae:	d040      	beq.n	8004d32 <USBH_CDC_Process+0x154>
 8004cb0:	8b72      	ldrh	r2, [r6, #26]
 8004cb2:	4290      	cmp	r0, r2
 8004cb4:	d93d      	bls.n	8004d32 <USBH_CDC_Process+0x154>
        CDC_Handle->RxDataLength -= length ;
 8004cb6:	1a1b      	subs	r3, r3, r0
 8004cb8:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8004cba:	6a33      	ldr	r3, [r6, #32]
 8004cbc:	4418      	add	r0, r3
 8004cbe:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e033      	b.n	8004d2c <USBH_CDC_Process+0x14e>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004cc4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004cc6:	8b22      	ldrh	r2, [r4, #24]
 8004cc8:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 8004cca:	9100      	str	r1, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004ccc:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 8004cce:	bf98      	it	ls
 8004cd0:	b282      	uxthls	r2, r0
 8004cd2:	69e1      	ldr	r1, [r4, #28]
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	f000 fc89 	bl	80055ec <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8004cda:	2302      	movs	r3, #2
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004cdc:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8004ce0:	e7d0      	b.n	8004c84 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8004ce2:	7b61      	ldrb	r1, [r4, #13]
 8004ce4:	f002 f9ac 	bl	8007040 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 8004ce8:	2801      	cmp	r0, #1
 8004cea:	d115      	bne.n	8004d18 <USBH_CDC_Process+0x13a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cee:	8b22      	ldrh	r2, [r4, #24]
 8004cf0:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004cf2:	bf83      	ittte	hi
 8004cf4:	1a9b      	subhi	r3, r3, r2
 8004cf6:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004cf8:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 8004cfa:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004cfc:	bf8a      	itet	hi
 8004cfe:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 8004d00:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004d02:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 8004d04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d06:	b10b      	cbz	r3, 8004d0c <USBH_CDC_Process+0x12e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e7e7      	b.n	8004cdc <USBH_CDC_Process+0xfe>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8004d0c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8004d10:	4628      	mov	r0, r5
 8004d12:	f7ff ff61 	bl	8004bd8 <USBH_CDC_TransmitCallback>
 8004d16:	e7b5      	b.n	8004c84 <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 8004d18:	2802      	cmp	r0, #2
 8004d1a:	d1b3      	bne.n	8004c84 <USBH_CDC_Process+0xa6>
 8004d1c:	e7f4      	b.n	8004d08 <USBH_CDC_Process+0x12a>
    USBH_BulkReceiveData (phost,
 8004d1e:	7b33      	ldrb	r3, [r6, #12]
 8004d20:	8b72      	ldrh	r2, [r6, #26]
 8004d22:	6a31      	ldr	r1, [r6, #32]
 8004d24:	4628      	mov	r0, r5
 8004d26:	f000 fc78 	bl	800561a <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8004d2a:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004d2c:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8004d30:	e79c      	b.n	8004c6c <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f7ff ff4e 	bl	8004bda <USBH_CDC_ReceiveCallback>
 8004d3e:	e795      	b.n	8004c6c <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00U);
 8004d40:	2100      	movs	r1, #0
 8004d42:	f000 fc0d 	bl	8005560 <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d190      	bne.n	8004c6c <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8004d4a:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8004d4e:	e78d      	b.n	8004c6c <USBH_CDC_Process+0x8e>

08004d50 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8004d50:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8004d54:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8004d58:	2100      	movs	r1, #0
 8004d5a:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d1fb      	bne.n	8004d5a <DeInitStateMachine+0xa>
 8004d62:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8004d66:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8004d70:	4291      	cmp	r1, r2
 8004d72:	d1fb      	bne.n	8004d6c <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8004d74:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004d76:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8004d78:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8004d7a:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8004d7c:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 8004d7e:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 8004d82:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004d84:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 8004d86:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004d88:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8004d8c:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 8004d90:	2000      	movs	r0, #0
 8004d92:	4770      	bx	lr

08004d94 <USBH_Init>:
{
 8004d94:	b538      	push	{r3, r4, r5, lr}
 8004d96:	460d      	mov	r5, r1
  if(phost == NULL)
 8004d98:	4604      	mov	r4, r0
 8004d9a:	b180      	cbz	r0, 8004dbe <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 8004d9c:	2300      	movs	r3, #0
  phost->id = id;
 8004d9e:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 8004da2:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 8004da6:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 8004daa:	f7ff ffd1 	bl	8004d50 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8004dae:	b10d      	cbz	r5, 8004db4 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8004db0:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 8004db4:	4620      	mov	r0, r4
 8004db6:	f002 f89d 	bl	8006ef4 <USBH_LL_Init>
  return USBH_OK;
 8004dba:	2000      	movs	r0, #0
 8004dbc:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 8004dbe:	2002      	movs	r0, #2
}
 8004dc0:	bd38      	pop	{r3, r4, r5, pc}

08004dc2 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 8004dc2:	b149      	cbz	r1, 8004dd8 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004dc4:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8004dc8:	b933      	cbnz	r3, 8004dd8 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
 8004dd0:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
      status = USBH_OK;
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8004dd8:	2002      	movs	r0, #2
  }

  return status;
}
 8004dda:	4770      	bx	lr

08004ddc <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8004ddc:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 8004de0:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8004de2:	bf86      	itte	hi
 8004de4:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 8004de8:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8004dea:	2002      	movls	r0, #2
  }
  return status;
}
 8004dec:	4770      	bx	lr

08004dee <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004dee:	b570      	push	{r4, r5, r6, lr}
 8004df0:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8004df2:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 8004df6:	428e      	cmp	r6, r1
 8004df8:	b2e5      	uxtb	r5, r4
 8004dfa:	d001      	beq.n	8004e00 <USBH_FindInterface+0x12>
 8004dfc:	29ff      	cmp	r1, #255	; 0xff
 8004dfe:	d10b      	bne.n	8004e18 <USBH_FindInterface+0x2a>
 8004e00:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 8004e04:	4296      	cmp	r6, r2
 8004e06:	d001      	beq.n	8004e0c <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8004e08:	2aff      	cmp	r2, #255	; 0xff
 8004e0a:	d105      	bne.n	8004e18 <USBH_FindInterface+0x2a>
 8004e0c:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 8004e10:	429e      	cmp	r6, r3
 8004e12:	d007      	beq.n	8004e24 <USBH_FindInterface+0x36>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004e14:	2bff      	cmp	r3, #255	; 0xff
 8004e16:	d005      	beq.n	8004e24 <USBH_FindInterface+0x36>
 8004e18:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004e1a:	2c02      	cmp	r4, #2
 8004e1c:	f100 001a 	add.w	r0, r0, #26
 8004e20:	d1e7      	bne.n	8004df2 <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8004e22:	25ff      	movs	r5, #255	; 0xff
}
 8004e24:	4628      	mov	r0, r5
 8004e26:	bd70      	pop	{r4, r5, r6, pc}

08004e28 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8004e28:	b510      	push	{r4, lr}
 8004e2a:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8004e2c:	f002 f88c 	bl	8006f48 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8004e30:	2101      	movs	r1, #1
 8004e32:	4620      	mov	r0, r4
 8004e34:	f002 f908 	bl	8007048 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8004e38:	2000      	movs	r0, #0
 8004e3a:	bd10      	pop	{r4, pc}

08004e3c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8004e3c:	b530      	push	{r4, r5, lr}
 8004e3e:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8004e40:	2302      	movs	r3, #2
 8004e42:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 8004e46:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 8004e4a:	4604      	mov	r4, r0
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8004e4c:	b933      	cbnz	r3, 8004e5c <USBH_Process+0x20>
 8004e4e:	7802      	ldrb	r2, [r0, #0]
 8004e50:	b122      	cbz	r2, 8004e5c <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8004e52:	7802      	ldrb	r2, [r0, #0]
 8004e54:	2a03      	cmp	r2, #3
      phost->gState = HOST_DEV_DISCONNECTED;
 8004e56:	bf1c      	itt	ne
 8004e58:	2203      	movne	r2, #3
 8004e5a:	7002      	strbne	r2, [r0, #0]
  switch (phost->gState)
 8004e5c:	7822      	ldrb	r2, [r4, #0]
 8004e5e:	2a0b      	cmp	r2, #11
 8004e60:	d818      	bhi.n	8004e94 <USBH_Process+0x58>
 8004e62:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004e66:	000c      	.short	0x000c
 8004e68:	001f001a 	.word	0x001f001a
 8004e6c:	00170121 	.word	0x00170121
 8004e70:	0107004f 	.word	0x0107004f
 8004e74:	00d000c6 	.word	0x00d000c6
 8004e78:	00e700da 	.word	0x00e700da
 8004e7c:	0118      	.short	0x0118
    if (phost->device.is_connected)
 8004e7e:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8004e82:	b13b      	cbz	r3, 8004e94 <USBH_Process+0x58>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8004e84:	2301      	movs	r3, #1
      USBH_Delay(200U);
 8004e86:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8004e88:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 8004e8a:	f002 f8f8 	bl	800707e <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f002 f884 	bl	8006f9c <USBH_LL_ResetPort>
}
 8004e94:	2000      	movs	r0, #0
 8004e96:	b007      	add	sp, #28
 8004e98:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d1fa      	bne.n	8004e94 <USBH_Process+0x58>
      phost->gState = HOST_DEV_ATTACHED;
 8004e9e:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 8004ea0:	7023      	strb	r3, [r4, #0]
 8004ea2:	e7f7      	b.n	8004e94 <USBH_Process+0x58>
    USBH_Delay(100U);
 8004ea4:	2064      	movs	r0, #100	; 0x64
 8004ea6:	f002 f8ea 	bl	800707e <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f002 f868 	bl	8006f80 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8004eb0:	2305      	movs	r3, #5
 8004eb2:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8004eb4:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f000 fbd1 	bl	8005662 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8004ec0:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8004ec2:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f000 fbcc 	bl	8005662 <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 8004eca:	79a2      	ldrb	r2, [r4, #6]
 8004ecc:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8004ed0:	7120      	strb	r0, [r4, #4]
 8004ed2:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 8004ed4:	9202      	str	r2, [sp, #8]
 8004ed6:	2500      	movs	r5, #0
      USBH_OpenPipe (phost,
 8004ed8:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8004edc:	9200      	str	r2, [sp, #0]
 8004ede:	9501      	str	r5, [sp, #4]
 8004ee0:	2280      	movs	r2, #128	; 0x80
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f000 fba9 	bl	800563a <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 8004ee8:	79a2      	ldrb	r2, [r4, #6]
 8004eea:	9202      	str	r2, [sp, #8]
 8004eec:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8004ef0:	9200      	str	r2, [sp, #0]
 8004ef2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8004ef6:	7961      	ldrb	r1, [r4, #5]
 8004ef8:	9501      	str	r5, [sp, #4]
 8004efa:	462a      	mov	r2, r5
 8004efc:	4620      	mov	r0, r4
 8004efe:	f000 fb9c 	bl	800563a <USBH_OpenPipe>
 8004f02:	e7c7      	b.n	8004e94 <USBH_Process+0x58>
  switch (phost->EnumState)
 8004f04:	7863      	ldrb	r3, [r4, #1]
 8004f06:	2b07      	cmp	r3, #7
 8004f08:	d8c4      	bhi.n	8004e94 <USBH_Process+0x58>
 8004f0a:	e8df f003 	tbb	[pc, r3]
 8004f0e:	1504      	.short	0x1504
 8004f10:	4138301e 	.word	0x4138301e
 8004f14:	5d4f      	.short	0x5d4f
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8004f16:	2108      	movs	r1, #8
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f000 f9fa 	bl	8005312 <USBH_Get_DevDesc>
 8004f1e:	4605      	mov	r5, r0
 8004f20:	2800      	cmp	r0, #0
 8004f22:	d1b7      	bne.n	8004e94 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8004f24:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8004f26:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8004f2a:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8004f2c:	7921      	ldrb	r1, [r4, #4]
 8004f2e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8004f32:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 8004f34:	9202      	str	r2, [sp, #8]
 8004f36:	e7cf      	b.n	8004ed8 <USBH_Process+0x9c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8004f38:	2112      	movs	r1, #18
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f000 f9e9 	bl	8005312 <USBH_Get_DevDesc>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d1a7      	bne.n	8004e94 <USBH_Process+0x58>
      phost->EnumState = ENUM_SET_ADDR;
 8004f44:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8004f46:	7063      	strb	r3, [r4, #1]
 8004f48:	e7a4      	b.n	8004e94 <USBH_Process+0x58>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f000 fadd 	bl	800550c <USBH_SetAddress>
 8004f52:	4605      	mov	r5, r0
 8004f54:	2800      	cmp	r0, #0
 8004f56:	d19d      	bne.n	8004e94 <USBH_Process+0x58>
      USBH_Delay(2U);
 8004f58:	2002      	movs	r0, #2
 8004f5a:	f002 f890 	bl	800707e <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8004f5e:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8004f60:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 8004f62:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8004f64:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 8004f68:	7921      	ldrb	r1, [r4, #4]
 8004f6a:	79a2      	ldrb	r2, [r4, #6]
 8004f6c:	e7e2      	b.n	8004f34 <USBH_Process+0xf8>
    if ( USBH_Get_CfgDesc(phost,
 8004f6e:	2109      	movs	r1, #9
 8004f70:	4620      	mov	r0, r4
 8004f72:	f000 fa16 	bl	80053a2 <USBH_Get_CfgDesc>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d18c      	bne.n	8004e94 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	e7e3      	b.n	8004f46 <USBH_Process+0x10a>
    if (USBH_Get_CfgDesc(phost,
 8004f7e:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 8004f82:	4620      	mov	r0, r4
 8004f84:	f000 fa0d 	bl	80053a2 <USBH_Get_CfgDesc>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	d183      	bne.n	8004e94 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8004f8c:	2305      	movs	r3, #5
 8004f8e:	e7da      	b.n	8004f46 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8004f90:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 8004f94:	b141      	cbz	r1, 8004fa8 <USBH_Process+0x16c>
      if ( USBH_Get_StringDesc(phost,
 8004f96:	23ff      	movs	r3, #255	; 0xff
 8004f98:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f000 fa8e 	bl	80054be <USBH_Get_StringDesc>
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	f47f af76 	bne.w	8004e94 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8004fa8:	2306      	movs	r3, #6
 8004faa:	e7cc      	b.n	8004f46 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iProduct != 0U)
 8004fac:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 8004fb0:	b141      	cbz	r1, 8004fc4 <USBH_Process+0x188>
      if ( USBH_Get_StringDesc(phost,
 8004fb2:	23ff      	movs	r3, #255	; 0xff
 8004fb4:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f000 fa80 	bl	80054be <USBH_Get_StringDesc>
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	f47f af68 	bne.w	8004e94 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8004fc4:	2307      	movs	r3, #7
 8004fc6:	e7be      	b.n	8004f46 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8004fc8:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 8004fcc:	b141      	cbz	r1, 8004fe0 <USBH_Process+0x1a4>
      if ( USBH_Get_StringDesc(phost,
 8004fce:	23ff      	movs	r3, #255	; 0xff
 8004fd0:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f000 fa72 	bl	80054be <USBH_Get_StringDesc>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	f47f af5a 	bne.w	8004e94 <USBH_Process+0x58>
      phost->device.current_interface = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8004fe6:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d009      	beq.n	8005002 <USBH_Process+0x1c6>
        phost->gState  = HOST_INPUT;
 8004fee:	2307      	movs	r3, #7
 8004ff0:	e756      	b.n	8004ea0 <USBH_Process+0x64>
      if(phost->pUser != NULL)
 8004ff2:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f43f af4c 	beq.w	8004e94 <USBH_Process+0x58>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	4620      	mov	r0, r4
 8005000:	4798      	blx	r3
        phost->gState  = HOST_SET_CONFIGURATION;
 8005002:	2308      	movs	r3, #8
 8005004:	e74c      	b.n	8004ea0 <USBH_Process+0x64>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005006:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 800500a:	4620      	mov	r0, r4
 800500c:	f000 fa8c 	bl	8005528 <USBH_SetCfg>
 8005010:	2800      	cmp	r0, #0
 8005012:	f47f af3f 	bne.w	8004e94 <USBH_Process+0x58>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8005016:	2309      	movs	r3, #9
 8005018:	e742      	b.n	8004ea0 <USBH_Process+0x64>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800501a:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 800501e:	069b      	lsls	r3, r3, #26
 8005020:	d506      	bpl.n	8005030 <USBH_Process+0x1f4>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005022:	2101      	movs	r1, #1
 8005024:	4620      	mov	r0, r4
 8005026:	f000 fa8d 	bl	8005544 <USBH_SetFeature>
 800502a:	2800      	cmp	r0, #0
 800502c:	f47f af32 	bne.w	8004e94 <USBH_Process+0x58>
      phost->gState  = HOST_CHECK_CLASS;
 8005030:	230a      	movs	r3, #10
 8005032:	e735      	b.n	8004ea0 <USBH_Process+0x64>
    if(phost->ClassNumber == 0U)
 8005034:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8005038:	2b00      	cmp	r3, #0
 800503a:	f43f af2b 	beq.w	8004e94 <USBH_Process+0x58>
      phost->pActiveClass = NULL;
 800503e:	2300      	movs	r3, #0
 8005040:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005044:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8005048:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 800504c:	7919      	ldrb	r1, [r3, #4]
 800504e:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8005050:	bf08      	it	eq
 8005052:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 8005056:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800505a:	b1d3      	cbz	r3, 8005092 <USBH_Process+0x256>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	4620      	mov	r0, r4
 8005060:	4798      	blx	r3
 8005062:	b9b0      	cbnz	r0, 8005092 <USBH_Process+0x256>
          phost->gState  = HOST_CLASS_REQUEST;
 8005064:	2306      	movs	r3, #6
 8005066:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005068:	2103      	movs	r1, #3
 800506a:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800506e:	4620      	mov	r0, r4
 8005070:	4798      	blx	r3
 8005072:	e70f      	b.n	8004e94 <USBH_Process+0x58>
    if(phost->pActiveClass != NULL)
 8005074:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8005078:	b15b      	cbz	r3, 8005092 <USBH_Process+0x256>
      status = phost->pActiveClass->Requests(phost);
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	4620      	mov	r0, r4
 800507e:	4798      	blx	r3
 8005080:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8005084:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005088:	2b00      	cmp	r3, #0
 800508a:	f47f af03 	bne.w	8004e94 <USBH_Process+0x58>
        phost->gState  = HOST_CLASS;
 800508e:	230b      	movs	r3, #11
 8005090:	e706      	b.n	8004ea0 <USBH_Process+0x64>
      phost->gState  = HOST_ABORT_STATE;
 8005092:	230d      	movs	r3, #13
 8005094:	e704      	b.n	8004ea0 <USBH_Process+0x64>
    if(phost->pActiveClass != NULL)
 8005096:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800509a:	2b00      	cmp	r3, #0
 800509c:	f43f aefa 	beq.w	8004e94 <USBH_Process+0x58>
      phost->pActiveClass->BgndProcess(phost);
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	4620      	mov	r0, r4
 80050a4:	4798      	blx	r3
 80050a6:	e6f5      	b.n	8004e94 <USBH_Process+0x58>
    DeInitStateMachine(phost);
 80050a8:	4620      	mov	r0, r4
 80050aa:	f7ff fe51 	bl	8004d50 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 80050ae:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f43f aeee 	beq.w	8004e94 <USBH_Process+0x58>
      phost->pActiveClass->DeInit(phost);
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	4620      	mov	r0, r4
 80050bc:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 80050c4:	e6e6      	b.n	8004e94 <USBH_Process+0x58>

080050c6 <USBH_LL_SetTimer>:
  phost->Timer = time;
 80050c6:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 80050ca:	4770      	bx	lr

080050cc <USBH_LL_IncTimer>:
  phost->Timer ++;
 80050cc:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 80050d0:	3201      	adds	r2, #1
 80050d2:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80050d6:	7802      	ldrb	r2, [r0, #0]
 80050d8:	2a0b      	cmp	r2, #11
 80050da:	d104      	bne.n	80050e6 <USBH_LL_IncTimer+0x1a>
 80050dc:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80050e0:	b10b      	cbz	r3, 80050e6 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	4718      	bx	r3
 80050e6:	4770      	bx	lr

080050e8 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 80050e8:	2301      	movs	r3, #1
 80050ea:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80050ee:	4770      	bx	lr

080050f0 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80050f6:	4770      	bx	lr

080050f8 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 80050f8:	7802      	ldrb	r2, [r0, #0]
{
 80050fa:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 80050fc:	b94a      	cbnz	r2, 8005112 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 80050fe:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 8005102:	2201      	movs	r2, #1
 8005104:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8005108:	b10b      	cbz	r3, 800510e <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800510a:	2104      	movs	r1, #4
 800510c:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 800510e:	2000      	movs	r0, #0
 8005110:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 8005112:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 8005116:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 8005118:	bf04      	itt	eq
 800511a:	2202      	moveq	r2, #2
 800511c:	7002      	strbeq	r2, [r0, #0]
 800511e:	e7f6      	b.n	800510e <USBH_LL_Connect+0x16>

08005120 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8005120:	b510      	push	{r4, lr}
 8005122:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 8005124:	f001 ff1e 	bl	8006f64 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8005128:	7921      	ldrb	r1, [r4, #4]
 800512a:	4620      	mov	r0, r4
 800512c:	f000 fab0 	bl	8005690 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8005130:	7961      	ldrb	r1, [r4, #5]
 8005132:	4620      	mov	r0, r4
 8005134:	f000 faac 	bl	8005690 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 800513e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8005142:	b113      	cbz	r3, 800514a <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005144:	2105      	movs	r1, #5
 8005146:	4620      	mov	r0, r4
 8005148:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800514a:	4620      	mov	r0, r4
 800514c:	f001 fefc 	bl	8006f48 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8005150:	2303      	movs	r3, #3
 8005152:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8005154:	2000      	movs	r0, #0
 8005156:	bd10      	pop	{r4, pc}

08005158 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8005158:	b513      	push	{r0, r1, r4, lr}
 800515a:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 800515c:	7880      	ldrb	r0, [r0, #2]
 800515e:	2801      	cmp	r0, #1
 8005160:	d003      	beq.n	800516a <USBH_CtlReq+0x12>
 8005162:	2802      	cmp	r0, #2
 8005164:	d008      	beq.n	8005178 <USBH_CtlReq+0x20>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 8005166:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 8005168:	e004      	b.n	8005174 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 800516a:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 800516c:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 800516e:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 8005170:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8005172:	70a3      	strb	r3, [r4, #2]
}
 8005174:	b002      	add	sp, #8
 8005176:	bd10      	pop	{r4, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8005178:	7e23      	ldrb	r3, [r4, #24]
 800517a:	3b01      	subs	r3, #1
 800517c:	2101      	movs	r1, #1
 800517e:	2b0a      	cmp	r3, #10
 8005180:	d8f1      	bhi.n	8005166 <USBH_CtlReq+0xe>
 8005182:	e8df f003 	tbb	[pc, r3]
 8005186:	0f06      	.short	0x0f06
 8005188:	4c40362b 	.word	0x4c40362b
 800518c:	8c806f64 	.word	0x8c806f64
 8005190:	95          	.byte	0x95
 8005191:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005192:	7962      	ldrb	r2, [r4, #5]
 8005194:	f104 0110 	add.w	r1, r4, #16
 8005198:	4620      	mov	r0, r4
 800519a:	f000 f9ef 	bl	800557c <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800519e:	2302      	movs	r3, #2
      if (phost->Control.setup.b.wLength.w != 0U)
      {
        if (direction == USB_D2H)
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80051a0:	7623      	strb	r3, [r4, #24]
 80051a2:	e7e0      	b.n	8005166 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80051a4:	7961      	ldrb	r1, [r4, #5]
 80051a6:	4620      	mov	r0, r4
 80051a8:	f001 ff4a 	bl	8007040 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80051ac:	2801      	cmp	r0, #1
 80051ae:	d10f      	bne.n	80051d0 <USBH_CtlReq+0x78>
      if (phost->Control.setup.b.wLength.w != 0U)
 80051b0:	8ae2      	ldrh	r2, [r4, #22]
 80051b2:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80051b6:	b12a      	cbz	r2, 80051c4 <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	da01      	bge.n	80051c0 <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 80051bc:	2303      	movs	r3, #3
 80051be:	e7ef      	b.n	80051a0 <USBH_CtlReq+0x48>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 80051c0:	2305      	movs	r3, #5
 80051c2:	e7ed      	b.n	80051a0 <USBH_CtlReq+0x48>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	da01      	bge.n	80051cc <USBH_CtlReq+0x74>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80051c8:	2309      	movs	r3, #9
 80051ca:	e7e9      	b.n	80051a0 <USBH_CtlReq+0x48>
          phost->Control.state = CTRL_STATUS_IN;
 80051cc:	2307      	movs	r3, #7
 80051ce:	e7e7      	b.n	80051a0 <USBH_CtlReq+0x48>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80051d0:	2804      	cmp	r0, #4
 80051d2:	d001      	beq.n	80051d8 <USBH_CtlReq+0x80>
 80051d4:	2802      	cmp	r0, #2
 80051d6:	d1c6      	bne.n	8005166 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 80051d8:	230b      	movs	r3, #11
 80051da:	e7e1      	b.n	80051a0 <USBH_CtlReq+0x48>
    phost->Control.timer = (uint16_t)phost->Timer;
 80051dc:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80051e0:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 80051e2:	89a2      	ldrh	r2, [r4, #12]
 80051e4:	7923      	ldrb	r3, [r4, #4]
 80051e6:	68a1      	ldr	r1, [r4, #8]
 80051e8:	4620      	mov	r0, r4
 80051ea:	f000 f9ef 	bl	80055cc <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80051ee:	2304      	movs	r3, #4
 80051f0:	e7d6      	b.n	80051a0 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80051f2:	7921      	ldrb	r1, [r4, #4]
 80051f4:	4620      	mov	r0, r4
 80051f6:	f001 ff23 	bl	8007040 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80051fa:	2801      	cmp	r0, #1
 80051fc:	d0e4      	beq.n	80051c8 <USBH_CtlReq+0x70>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80051fe:	2805      	cmp	r0, #5
 8005200:	d015      	beq.n	800522e <USBH_CtlReq+0xd6>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 8005202:	2804      	cmp	r0, #4
 8005204:	e7e7      	b.n	80051d6 <USBH_CtlReq+0x7e>
    USBH_CtlSendData (phost,
 8005206:	7963      	ldrb	r3, [r4, #5]
 8005208:	9100      	str	r1, [sp, #0]
 800520a:	89a2      	ldrh	r2, [r4, #12]
 800520c:	68a1      	ldr	r1, [r4, #8]
 800520e:	4620      	mov	r0, r4
 8005210:	f000 f9c5 	bl	800559e <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8005214:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8005218:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800521a:	2306      	movs	r3, #6
 800521c:	e7c0      	b.n	80051a0 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800521e:	7961      	ldrb	r1, [r4, #5]
 8005220:	4620      	mov	r0, r4
 8005222:	f001 ff0d 	bl	8007040 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8005226:	2801      	cmp	r0, #1
 8005228:	d0d0      	beq.n	80051cc <USBH_CtlReq+0x74>
    else if  (URB_Status == USBH_URB_STALL)
 800522a:	2805      	cmp	r0, #5
 800522c:	d105      	bne.n	800523a <USBH_CtlReq+0xe2>
      phost->RequestState = CMD_SEND;
 800522e:	2301      	movs	r3, #1
 8005230:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8005232:	2300      	movs	r3, #0
 8005234:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 8005236:	2003      	movs	r0, #3
 8005238:	e79c      	b.n	8005174 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800523a:	2802      	cmp	r0, #2
 800523c:	d0c0      	beq.n	80051c0 <USBH_CtlReq+0x68>
      if (URB_Status == USBH_URB_ERROR)
 800523e:	2804      	cmp	r0, #4
 8005240:	d191      	bne.n	8005166 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 8005242:	230b      	movs	r3, #11
 8005244:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8005246:	2301      	movs	r3, #1
 8005248:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 800524a:	2002      	movs	r0, #2
 800524c:	e792      	b.n	8005174 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 800524e:	2200      	movs	r2, #0
 8005250:	7923      	ldrb	r3, [r4, #4]
 8005252:	4611      	mov	r1, r2
 8005254:	4620      	mov	r0, r4
 8005256:	f000 f9b9 	bl	80055cc <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 800525a:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800525e:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005260:	2308      	movs	r3, #8
 8005262:	e79d      	b.n	80051a0 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005264:	7921      	ldrb	r1, [r4, #4]
 8005266:	4620      	mov	r0, r4
 8005268:	f001 feea 	bl	8007040 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 800526c:	2801      	cmp	r0, #1
 800526e:	d104      	bne.n	800527a <USBH_CtlReq+0x122>
      phost->RequestState = CMD_SEND;
 8005270:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 8005272:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8005274:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8005276:	7620      	strb	r0, [r4, #24]
 8005278:	e77c      	b.n	8005174 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 800527a:	2804      	cmp	r0, #4
 800527c:	d0ac      	beq.n	80051d8 <USBH_CtlReq+0x80>
      if(URB_Status == USBH_URB_STALL)
 800527e:	2805      	cmp	r0, #5
 8005280:	f47f af71 	bne.w	8005166 <USBH_CtlReq+0xe>
 8005284:	e7d3      	b.n	800522e <USBH_CtlReq+0xd6>
    USBH_CtlSendData (phost,
 8005286:	2200      	movs	r2, #0
 8005288:	7963      	ldrb	r3, [r4, #5]
 800528a:	9100      	str	r1, [sp, #0]
 800528c:	4620      	mov	r0, r4
 800528e:	4611      	mov	r1, r2
 8005290:	f000 f985 	bl	800559e <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8005294:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8005298:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800529a:	230a      	movs	r3, #10
 800529c:	e780      	b.n	80051a0 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800529e:	7961      	ldrb	r1, [r4, #5]
 80052a0:	4620      	mov	r0, r4
 80052a2:	f001 fecd 	bl	8007040 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80052a6:	2801      	cmp	r0, #1
 80052a8:	d0e2      	beq.n	8005270 <USBH_CtlReq+0x118>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80052aa:	2802      	cmp	r0, #2
 80052ac:	d1a9      	bne.n	8005202 <USBH_CtlReq+0xaa>
 80052ae:	e78b      	b.n	80051c8 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80052b0:	7e63      	ldrb	r3, [r4, #25]
 80052b2:	3301      	adds	r3, #1
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	7663      	strb	r3, [r4, #25]
 80052ba:	d806      	bhi.n	80052ca <USBH_CtlReq+0x172>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80052bc:	4620      	mov	r0, r4
 80052be:	f001 fe51 	bl	8006f64 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80052c2:	2301      	movs	r3, #1
 80052c4:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 80052c6:	70a3      	strb	r3, [r4, #2]
 80052c8:	e74d      	b.n	8005166 <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80052ca:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80052ce:	2106      	movs	r1, #6
 80052d0:	4620      	mov	r0, r4
 80052d2:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	7663      	strb	r3, [r4, #25]
 80052d8:	e7b5      	b.n	8005246 <USBH_CtlReq+0xee>

080052da <USBH_GetDescriptor>:
{
 80052da:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 80052dc:	7884      	ldrb	r4, [r0, #2]
{
 80052de:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 80052e2:	2c01      	cmp	r4, #1
 80052e4:	d110      	bne.n	8005308 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80052e6:	f061 047f 	orn	r4, r1, #127	; 0x7f
 80052ea:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80052ec:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 80052f0:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 80052f4:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80052f6:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80052fa:	bf0c      	ite	eq
 80052fc:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 8005300:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005302:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 8005304:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8005306:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 8005308:	462a      	mov	r2, r5
 800530a:	4619      	mov	r1, r3
}
 800530c:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 800530e:	f7ff bf23 	b.w	8005158 <USBH_CtlReq>

08005312 <USBH_Get_DevDesc>:
{
 8005312:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8005314:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8005318:	460d      	mov	r5, r1
 800531a:	9100      	str	r1, [sp, #0]
 800531c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005320:	2100      	movs	r1, #0
{
 8005322:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8005324:	f7ff ffd9 	bl	80052da <USBH_GetDescriptor>
 8005328:	bbc8      	cbnz	r0, 800539e <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800532a:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800532e:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8005332:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8005336:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800533a:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800533e:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8005342:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8005346:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800534a:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 800534e:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8005352:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8005356:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  if (length > 8U)
 800535a:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800535c:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8005360:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 8005364:	d91b      	bls.n	800539e <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 8005366:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 800536a:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 800536e:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 8005372:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8005376:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 800537a:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800537e:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8005382:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8005386:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 800538a:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800538e:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8005392:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8005396:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 800539a:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 800539e:	b003      	add	sp, #12
 80053a0:	bd30      	pop	{r4, r5, pc}

080053a2 <USBH_Get_CfgDesc>:
{
 80053a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 80053a6:	f100 051c 	add.w	r5, r0, #28
{
 80053aa:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 80053ac:	9100      	str	r1, [sp, #0]
 80053ae:	462b      	mov	r3, r5
 80053b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b4:	2100      	movs	r1, #0
{
 80053b6:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 80053b8:	f7ff ff8f 	bl	80052da <USBH_GetDescriptor>
 80053bc:	bb48      	cbnz	r0, 8005412 <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80053be:	7f23      	ldrb	r3, [r4, #28]
 80053c0:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80053c4:	7f63      	ldrb	r3, [r4, #29]
 80053c6:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80053ca:	f894 3020 	ldrb.w	r3, [r4, #32]
 80053ce:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80053d2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80053d6:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80053da:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80053de:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80053e2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80053e6:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80053ea:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80053ee:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80053f0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80053f4:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80053f8:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80053fc:	d909      	bls.n	8005412 <USBH_Get_CfgDesc+0x70>
 80053fe:	4627      	mov	r7, r4
 8005400:	462b      	mov	r3, r5
 8005402:	4606      	mov	r6, r0
 8005404:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8005406:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800540a:	2e02      	cmp	r6, #2
 800540c:	d001      	beq.n	8005412 <USBH_Get_CfgDesc+0x70>
 800540e:	4596      	cmp	lr, r2
 8005410:	d802      	bhi.n	8005418 <USBH_Get_CfgDesc+0x76>
}
 8005412:	b003      	add	sp, #12
 8005414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005418:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800541a:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800541c:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800541e:	7859      	ldrb	r1, [r3, #1]
 8005420:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005422:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8005424:	d1f1      	bne.n	800540a <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8005426:	7819      	ldrb	r1, [r3, #0]
 8005428:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800542c:	7859      	ldrb	r1, [r3, #1]
 800542e:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8005432:	7899      	ldrb	r1, [r3, #2]
 8005434:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8005438:	78d9      	ldrb	r1, [r3, #3]
 800543a:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800543e:	7919      	ldrb	r1, [r3, #4]
 8005440:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8005444:	7959      	ldrb	r1, [r3, #5]
 8005446:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800544a:	7999      	ldrb	r1, [r3, #6]
 800544c:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8005450:	79d9      	ldrb	r1, [r3, #7]
 8005452:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8005456:	7a19      	ldrb	r1, [r3, #8]
 8005458:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800545c:	fb0c f806 	mul.w	r8, ip, r6
        ep_ix = 0U;
 8005460:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005462:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 8005466:	428d      	cmp	r5, r1
 8005468:	d802      	bhi.n	8005470 <USBH_Get_CfgDesc+0xce>
 800546a:	3601      	adds	r6, #1
 800546c:	371a      	adds	r7, #26
 800546e:	e7cc      	b.n	800540a <USBH_Get_CfgDesc+0x68>
 8005470:	4596      	cmp	lr, r2
 8005472:	d9fa      	bls.n	800546a <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005474:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8005476:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005478:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800547a:	785d      	ldrb	r5, [r3, #1]
 800547c:	2d05      	cmp	r5, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800547e:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8005480:	d1ef      	bne.n	8005462 <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8005482:	1c4d      	adds	r5, r1, #1
 8005484:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 8005488:	4421      	add	r1, r4
 800548a:	f893 9000 	ldrb.w	r9, [r3]
 800548e:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8005492:	f893 9001 	ldrb.w	r9, [r3, #1]
 8005496:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800549a:	f893 9002 	ldrb.w	r9, [r3, #2]
 800549e:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80054a2:	f893 9003 	ldrb.w	r9, [r3, #3]
 80054a6:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80054aa:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 80054ae:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80054b2:	f893 9006 	ldrb.w	r9, [r3, #6]
 80054b6:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 80054ba:	b2e9      	uxtb	r1, r5
 80054bc:	e7d1      	b.n	8005462 <USBH_Get_CfgDesc+0xc0>

080054be <USBH_Get_StringDesc>:
{
 80054be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 80054c0:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 80054c4:	4614      	mov	r4, r2
 80054c6:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 80054ce:	462b      	mov	r3, r5
 80054d0:	2100      	movs	r1, #0
{
 80054d2:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 80054d4:	f7ff ff01 	bl	80052da <USBH_GetDescriptor>
 80054d8:	b978      	cbnz	r0, 80054fa <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 80054da:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d10b      	bne.n	80054fa <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80054e2:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 80054e6:	3b02      	subs	r3, #2
 80054e8:	42bb      	cmp	r3, r7
 80054ea:	bf28      	it	cs
 80054ec:	463b      	movcs	r3, r7
 80054ee:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 80054f0:	4602      	mov	r2, r0
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d803      	bhi.n	80054fe <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 80054f6:	2300      	movs	r3, #0
 80054f8:	7023      	strb	r3, [r4, #0]
}
 80054fa:	b003      	add	sp, #12
 80054fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 80054fe:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8005500:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8005502:	7889      	ldrb	r1, [r1, #2]
 8005504:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8005508:	b292      	uxth	r2, r2
 800550a:	e7f2      	b.n	80054f2 <USBH_Get_StringDesc+0x34>

0800550c <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 800550c:	7883      	ldrb	r3, [r0, #2]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d106      	bne.n	8005520 <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005512:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8005514:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005516:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8005518:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800551a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800551c:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800551e:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8005520:	2200      	movs	r2, #0
 8005522:	4611      	mov	r1, r2
 8005524:	f7ff be18 	b.w	8005158 <USBH_CtlReq>

08005528 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8005528:	7883      	ldrb	r3, [r0, #2]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d106      	bne.n	800553c <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800552e:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8005530:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005532:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8005534:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005536:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005538:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800553a:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 800553c:	2200      	movs	r2, #0
 800553e:	4611      	mov	r1, r2
 8005540:	f7ff be0a 	b.w	8005158 <USBH_CtlReq>

08005544 <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8005544:	7883      	ldrb	r3, [r0, #2]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d106      	bne.n	8005558 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800554a:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800554c:	2203      	movs	r2, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800554e:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8005550:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8005552:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005554:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005556:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8005558:	2200      	movs	r2, #0
 800555a:	4611      	mov	r1, r2
 800555c:	f7ff bdfc 	b.w	8005158 <USBH_CtlReq>

08005560 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8005560:	7883      	ldrb	r3, [r0, #2]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d106      	bne.n	8005574 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005566:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005568:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800556a:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800556c:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800556e:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005570:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005572:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8005574:	2200      	movs	r2, #0
 8005576:	4611      	mov	r1, r2
 8005578:	f7ff bdee 	b.w	8005158 <USBH_CtlReq>

0800557c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800557c:	b530      	push	{r4, r5, lr}
 800557e:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005580:	2400      	movs	r4, #0
{
 8005582:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005584:	2308      	movs	r3, #8
 8005586:	9302      	str	r3, [sp, #8]
 8005588:	9101      	str	r1, [sp, #4]
 800558a:	9403      	str	r4, [sp, #12]
 800558c:	9400      	str	r4, [sp, #0]
 800558e:	4623      	mov	r3, r4
 8005590:	4622      	mov	r2, r4
 8005592:	4629      	mov	r1, r5
 8005594:	f001 fd3a 	bl	800700c <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8005598:	4620      	mov	r0, r4
 800559a:	b005      	add	sp, #20
 800559c:	bd30      	pop	{r4, r5, pc}

0800559e <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800559e:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 80055a0:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 80055a4:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 80055a6:	2d00      	cmp	r5, #0
{
 80055a8:	461c      	mov	r4, r3
 80055aa:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80055ae:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 80055b0:	bf18      	it	ne
 80055b2:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80055b4:	9303      	str	r3, [sp, #12]
 80055b6:	2301      	movs	r3, #1
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	2300      	movs	r3, #0
 80055bc:	9101      	str	r1, [sp, #4]
 80055be:	461a      	mov	r2, r3
 80055c0:	4621      	mov	r1, r4
 80055c2:	f001 fd23 	bl	800700c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 80055c6:	2000      	movs	r0, #0
 80055c8:	b005      	add	sp, #20
 80055ca:	bd30      	pop	{r4, r5, pc}

080055cc <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80055cc:	b530      	push	{r4, r5, lr}
 80055ce:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80055d0:	2400      	movs	r4, #0
{
 80055d2:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80055d4:	9202      	str	r2, [sp, #8]
 80055d6:	2201      	movs	r2, #1
 80055d8:	9101      	str	r1, [sp, #4]
 80055da:	9403      	str	r4, [sp, #12]
 80055dc:	9200      	str	r2, [sp, #0]
 80055de:	4623      	mov	r3, r4
 80055e0:	4629      	mov	r1, r5
 80055e2:	f001 fd13 	bl	800700c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 80055e6:	4620      	mov	r0, r4
 80055e8:	b005      	add	sp, #20
 80055ea:	bd30      	pop	{r4, r5, pc}

080055ec <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80055ec:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 80055ee:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 80055f2:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 80055f4:	2d00      	cmp	r5, #0
{
 80055f6:	461c      	mov	r4, r3
 80055f8:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80055fc:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 80055fe:	bf18      	it	ne
 8005600:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005602:	9303      	str	r3, [sp, #12]
 8005604:	2301      	movs	r3, #1
 8005606:	9101      	str	r1, [sp, #4]
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	2200      	movs	r2, #0
 800560c:	2302      	movs	r3, #2
 800560e:	4621      	mov	r1, r4
 8005610:	f001 fcfc 	bl	800700c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8005614:	2000      	movs	r0, #0
 8005616:	b005      	add	sp, #20
 8005618:	bd30      	pop	{r4, r5, pc}

0800561a <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800561a:	b530      	push	{r4, r5, lr}
 800561c:	b085      	sub	sp, #20
 800561e:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005620:	2400      	movs	r4, #0
 8005622:	9202      	str	r2, [sp, #8]
 8005624:	2201      	movs	r2, #1
 8005626:	9101      	str	r1, [sp, #4]
 8005628:	9403      	str	r4, [sp, #12]
 800562a:	9200      	str	r2, [sp, #0]
 800562c:	2302      	movs	r3, #2
 800562e:	4629      	mov	r1, r5
 8005630:	f001 fcec 	bl	800700c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8005634:	4620      	mov	r0, r4
 8005636:	b005      	add	sp, #20
 8005638:	bd30      	pop	{r4, r5, pc}

0800563a <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800563a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 800563c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8005640:	9402      	str	r4, [sp, #8]
 8005642:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8005646:	9401      	str	r4, [sp, #4]
 8005648:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800564c:	9400      	str	r4, [sp, #0]
 800564e:	f001 fcb7 	bl	8006fc0 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8005652:	2000      	movs	r0, #0
 8005654:	b004      	add	sp, #16
 8005656:	bd10      	pop	{r4, pc}

08005658 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8005658:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 800565a:	f001 fcc9 	bl	8006ff0 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 800565e:	2000      	movs	r0, #0
 8005660:	bd08      	pop	{r3, pc}

08005662 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8005662:	b530      	push	{r4, r5, lr}
 8005664:	2300      	movs	r3, #0
 8005666:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800566a:	f854 5b04 	ldr.w	r5, [r4], #4
 800566e:	042d      	lsls	r5, r5, #16
 8005670:	b2da      	uxtb	r2, r3
 8005672:	d407      	bmi.n	8005684 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8005674:	33e0      	adds	r3, #224	; 0xe0
 8005676:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800567a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	{
	   return (uint16_t)idx;
 800567e:	b292      	uxth	r2, r2
}
 8005680:	b2d0      	uxtb	r0, r2
 8005682:	bd30      	pop	{r4, r5, pc}
 8005684:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8005686:	2b0b      	cmp	r3, #11
 8005688:	d1ef      	bne.n	800566a <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 800568a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800568e:	e7f7      	b.n	8005680 <USBH_AllocPipe+0x1e>

08005690 <USBH_FreePipe>:
   if(idx < 11U)
 8005690:	290a      	cmp	r1, #10
 8005692:	bf9f      	itttt	ls
 8005694:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8005698:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 800569c:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 80056a0:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 80056a4:	2000      	movs	r0, #0
 80056a6:	4770      	bx	lr

080056a8 <resetEsp>:
    HAL_UART_Transmit(&huart1, (uint8_t*) "Trying to connect to ESP32...\r\n", sizeof("Trying to connect to ESP32...\r\n") - 1, 100);
    HAL_UART_Transmit(&huart5, (uint8_t*) command, sizeof(command) - 1, 100);
}

void resetEsp() 
{
 80056a8:	b510      	push	{r4, lr}
    /*
        This function resets the esp32 module in case normal operation fails or watchdog was triggered
     */
    HAL_UART_Transmit(&huart1, (uint8_t*) "Resetting ESP32...\r\n", sizeof("Resetting ESP32...\r\n") - 1, 100);
 80056aa:	2364      	movs	r3, #100	; 0x64
 80056ac:	2214      	movs	r2, #20
 80056ae:	4906      	ldr	r1, [pc, #24]	; (80056c8 <resetEsp+0x20>)
 80056b0:	4806      	ldr	r0, [pc, #24]	; (80056cc <resetEsp+0x24>)
 80056b2:	f7fe fc19 	bl	8003ee8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart5, (uint8_t*) "AT+RST\r\n", sizeof("AT+RST\r\n") - 1, 100);
 80056b6:	2364      	movs	r3, #100	; 0x64
 80056b8:	2208      	movs	r2, #8
 80056ba:	4905      	ldr	r1, [pc, #20]	; (80056d0 <resetEsp+0x28>)
 80056bc:	4805      	ldr	r0, [pc, #20]	; (80056d4 <resetEsp+0x2c>)
}
 80056be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart5, (uint8_t*) "AT+RST\r\n", sizeof("AT+RST\r\n") - 1, 100);
 80056c2:	f7fe bc11 	b.w	8003ee8 <HAL_UART_Transmit>
 80056c6:	bf00      	nop
 80056c8:	080094b9 	.word	0x080094b9
 80056cc:	200005a4 	.word	0x200005a4
 80056d0:	080094ce 	.word	0x080094ce
 80056d4:	20000560 	.word	0x20000560

080056d8 <connectToWifi>:
    HAL_UART_Transmit(&huart5, (uint8_t*) "AT+CWJAP?\r\n", sizeof("AT+CWJAP?\r\n") - 1, 100);
    HAL_UART_Transmit(&huart1, (uint8_t*) "Checking wifi connection\r\n", sizeof("Checking wifi connection\r\n") - 1, 100);
}

void connectToWifi(char ssid[], char password[]) 
{
 80056d8:	b530      	push	{r4, r5, lr}
    /*
        This function sends connect to Wi-Fi command to ESP32
     */
    char temp[80] = "AT+CWJAP=\"";
 80056da:	4a1d      	ldr	r2, [pc, #116]	; (8005750 <connectToWifi+0x78>)
{
 80056dc:	4604      	mov	r4, r0
    char temp[80] = "AT+CWJAP=\"";
 80056de:	f852 0f0e 	ldr.w	r0, [r2, #14]!
{
 80056e2:	b095      	sub	sp, #84	; 0x54
 80056e4:	460d      	mov	r5, r1
    char temp[80] = "AT+CWJAP=\"";
 80056e6:	6851      	ldr	r1, [r2, #4]
 80056e8:	466b      	mov	r3, sp
 80056ea:	c303      	stmia	r3!, {r0, r1}
 80056ec:	8911      	ldrh	r1, [r2, #8]
 80056ee:	7a92      	ldrb	r2, [r2, #10]
 80056f0:	8019      	strh	r1, [r3, #0]
 80056f2:	709a      	strb	r2, [r3, #2]
 80056f4:	2100      	movs	r1, #0
 80056f6:	2245      	movs	r2, #69	; 0x45
 80056f8:	f10d 000b 	add.w	r0, sp, #11
 80056fc:	f001 fd30 	bl	8007160 <memset>
    strcat(temp, ssid);
 8005700:	4621      	mov	r1, r4
 8005702:	4668      	mov	r0, sp
 8005704:	f001 fdf0 	bl	80072e8 <strcat>
    strcat(temp, "\",\"");
 8005708:	4912      	ldr	r1, [pc, #72]	; (8005754 <connectToWifi+0x7c>)
 800570a:	4668      	mov	r0, sp
 800570c:	f001 fdec 	bl	80072e8 <strcat>
    strcat(temp, password);
 8005710:	4629      	mov	r1, r5
 8005712:	4668      	mov	r0, sp
 8005714:	f001 fde8 	bl	80072e8 <strcat>
    strcat(temp, "\"\r\n");
 8005718:	490f      	ldr	r1, [pc, #60]	; (8005758 <connectToWifi+0x80>)
 800571a:	4668      	mov	r0, sp
 800571c:	f001 fde4 	bl	80072e8 <strcat>
    
    uint8_t command_size = 16 + strlen(ssid) + strlen(password);
 8005720:	4620      	mov	r0, r4
 8005722:	f7fa fd63 	bl	80001ec <strlen>
 8005726:	4604      	mov	r4, r0
 8005728:	4628      	mov	r0, r5
 800572a:	f7fa fd5f 	bl	80001ec <strlen>
 800572e:	4420      	add	r0, r4
 8005730:	f100 0210 	add.w	r2, r0, #16

    HAL_UART_Transmit(&huart5, (uint8_t*) temp, command_size, 100);
 8005734:	4669      	mov	r1, sp
 8005736:	2364      	movs	r3, #100	; 0x64
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	4808      	ldr	r0, [pc, #32]	; (800575c <connectToWifi+0x84>)
 800573c:	f7fe fbd4 	bl	8003ee8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*) "Connecting to an AP...\r\n", sizeof("Connecting to an AP...\r\n") - 1, 100);
 8005740:	2364      	movs	r3, #100	; 0x64
 8005742:	2218      	movs	r2, #24
 8005744:	4906      	ldr	r1, [pc, #24]	; (8005760 <connectToWifi+0x88>)
 8005746:	4807      	ldr	r0, [pc, #28]	; (8005764 <connectToWifi+0x8c>)
 8005748:	f7fe fbce 	bl	8003ee8 <HAL_UART_Transmit>
}
 800574c:	b015      	add	sp, #84	; 0x54
 800574e:	bd30      	pop	{r4, r5, pc}
 8005750:	08007358 	.word	0x08007358
 8005754:	0800943e 	.word	0x0800943e
 8005758:	08009442 	.word	0x08009442
 800575c:	20000560 	.word	0x20000560
 8005760:	08009446 	.word	0x08009446
 8005764:	200005a4 	.word	0x200005a4

08005768 <disconnectWifi>:

void disconnectWifi()
{
 8005768:	b510      	push	{r4, lr}
    HAL_UART_Transmit(&huart5, (uint8_t*) "AT+CWQAP\r\n", sizeof("AT+CWQAP\r\n") - 1, 100);
 800576a:	2364      	movs	r3, #100	; 0x64
 800576c:	220a      	movs	r2, #10
 800576e:	4906      	ldr	r1, [pc, #24]	; (8005788 <disconnectWifi+0x20>)
 8005770:	4806      	ldr	r0, [pc, #24]	; (800578c <disconnectWifi+0x24>)
 8005772:	f7fe fbb9 	bl	8003ee8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*) "Disconnecting from Wi-Fi\r\n", sizeof("Disconnecting from Wi-Fi\r\n") - 1, 100);
 8005776:	2364      	movs	r3, #100	; 0x64
 8005778:	221a      	movs	r2, #26
 800577a:	4905      	ldr	r1, [pc, #20]	; (8005790 <disconnectWifi+0x28>)
 800577c:	4805      	ldr	r0, [pc, #20]	; (8005794 <disconnectWifi+0x2c>)
}
 800577e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart1, (uint8_t*) "Disconnecting from Wi-Fi\r\n", sizeof("Disconnecting from Wi-Fi\r\n") - 1, 100);
 8005782:	f7fe bbb1 	b.w	8003ee8 <HAL_UART_Transmit>
 8005786:	bf00      	nop
 8005788:	0800945f 	.word	0x0800945f
 800578c:	20000560 	.word	0x20000560
 8005790:	0800946a 	.word	0x0800946a
 8005794:	200005a4 	.word	0x200005a4

08005798 <connectToTCP>:

    HAL_UART_Transmit(&huart5, (uint8_t*) temp, sizeof(temp) - 1, 100);
}

void connectToTCP(char remoteIP[], char port[], char keepAlive[])
{
 8005798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            remoteIP[]: IP address of a remote server
            port[]: Port of a remote server
            keepAlive[]: Amount of time (seconds) that will keep the connection alive ranging from 0 to 7200.
                       If keepAlive = 0 then keepAlive function will be disabled.
     */
    char command[80] = "AT+CIPSTART=\"TCP\",\"";
 800579c:	4b20      	ldr	r3, [pc, #128]	; (8005820 <connectToTCP+0x88>)
{
 800579e:	b094      	sub	sp, #80	; 0x50
 80057a0:	4616      	mov	r6, r2
 80057a2:	4680      	mov	r8, r0
 80057a4:	460f      	mov	r7, r1
    char command[80] = "AT+CIPSTART=\"TCP\",\"";
 80057a6:	466a      	mov	r2, sp
 80057a8:	f103 0e10 	add.w	lr, r3, #16
 80057ac:	466c      	mov	r4, sp
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	6859      	ldr	r1, [r3, #4]
 80057b2:	4615      	mov	r5, r2
 80057b4:	c503      	stmia	r5!, {r0, r1}
 80057b6:	3308      	adds	r3, #8
 80057b8:	4573      	cmp	r3, lr
 80057ba:	462a      	mov	r2, r5
 80057bc:	d1f7      	bne.n	80057ae <connectToTCP+0x16>
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	6028      	str	r0, [r5, #0]
 80057c2:	223c      	movs	r2, #60	; 0x3c
 80057c4:	2100      	movs	r1, #0
 80057c6:	a805      	add	r0, sp, #20
 80057c8:	f001 fcca 	bl	8007160 <memset>
    strcat(command, remoteIP);
 80057cc:	4641      	mov	r1, r8
 80057ce:	4620      	mov	r0, r4
 80057d0:	f001 fd8a 	bl	80072e8 <strcat>
    strcat(command, "\",");
 80057d4:	4913      	ldr	r1, [pc, #76]	; (8005824 <connectToTCP+0x8c>)
 80057d6:	4620      	mov	r0, r4
 80057d8:	f001 fd86 	bl	80072e8 <strcat>
    strcat(command, port);
 80057dc:	4639      	mov	r1, r7
 80057de:	4620      	mov	r0, r4
 80057e0:	f001 fd82 	bl	80072e8 <strcat>
    strcat(command, ",");
 80057e4:	4910      	ldr	r1, [pc, #64]	; (8005828 <connectToTCP+0x90>)
 80057e6:	4620      	mov	r0, r4
 80057e8:	f001 fd7e 	bl	80072e8 <strcat>
    strcat(command, keepAlive);
 80057ec:	4631      	mov	r1, r6
 80057ee:	4620      	mov	r0, r4
 80057f0:	f001 fd7a 	bl	80072e8 <strcat>
    strcat(command, "\r\n");
 80057f4:	490d      	ldr	r1, [pc, #52]	; (800582c <connectToTCP+0x94>)
 80057f6:	4620      	mov	r0, r4
 80057f8:	f001 fd76 	bl	80072e8 <strcat>

    HAL_UART_Transmit(&huart5, (uint8_t*) command, strlen(command), 100);
 80057fc:	4620      	mov	r0, r4
 80057fe:	f7fa fcf5 	bl	80001ec <strlen>
 8005802:	4621      	mov	r1, r4
 8005804:	b282      	uxth	r2, r0
 8005806:	2364      	movs	r3, #100	; 0x64
 8005808:	4809      	ldr	r0, [pc, #36]	; (8005830 <connectToTCP+0x98>)
 800580a:	f7fe fb6d 	bl	8003ee8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*) "Establishing TCP connection...\r\n", sizeof("Establishing TCP connection...\r\n") - 1, 100);
 800580e:	2364      	movs	r3, #100	; 0x64
 8005810:	2220      	movs	r2, #32
 8005812:	4908      	ldr	r1, [pc, #32]	; (8005834 <connectToTCP+0x9c>)
 8005814:	4808      	ldr	r0, [pc, #32]	; (8005838 <connectToTCP+0xa0>)
 8005816:	f7fe fb67 	bl	8003ee8 <HAL_UART_Transmit>
}
 800581a:	b014      	add	sp, #80	; 0x50
 800581c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005820:	080073c8 	.word	0x080073c8
 8005824:	0800941a 	.word	0x0800941a
 8005828:	0800941b 	.word	0x0800941b
 800582c:	08009443 	.word	0x08009443
 8005830:	20000560 	.word	0x20000560
 8005834:	0800941d 	.word	0x0800941d
 8005838:	200005a4 	.word	0x200005a4

0800583c <closeTCP>:

void closeTCP(){
 800583c:	b510      	push	{r4, lr}
    HAL_UART_Transmit(&huart5, (uint8_t*) "AT+CIPCLOSE\r\n", sizeof("AT+CIPCLOSE\r\n") - 1, 100);
 800583e:	2364      	movs	r3, #100	; 0x64
 8005840:	220d      	movs	r2, #13
 8005842:	4906      	ldr	r1, [pc, #24]	; (800585c <closeTCP+0x20>)
 8005844:	4806      	ldr	r0, [pc, #24]	; (8005860 <closeTCP+0x24>)
 8005846:	f7fe fb4f 	bl	8003ee8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*) "Closing TCP connection...\r\n", sizeof("Closing TCP connection...\r\n") - 1, 100);
 800584a:	2364      	movs	r3, #100	; 0x64
 800584c:	221b      	movs	r2, #27
 800584e:	4905      	ldr	r1, [pc, #20]	; (8005864 <closeTCP+0x28>)
 8005850:	4805      	ldr	r0, [pc, #20]	; (8005868 <closeTCP+0x2c>)
}
 8005852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart1, (uint8_t*) "Closing TCP connection...\r\n", sizeof("Closing TCP connection...\r\n") - 1, 100);
 8005856:	f7fe bb47 	b.w	8003ee8 <HAL_UART_Transmit>
 800585a:	bf00      	nop
 800585c:	080093f0 	.word	0x080093f0
 8005860:	20000560 	.word	0x20000560
 8005864:	080093fe 	.word	0x080093fe
 8005868:	200005a4 	.word	0x200005a4

0800586c <tcpSendDataRequest>:
    //Send Data
    HAL_UART_Transmit(&huart1, (uint8_t*) "Transmitting Data...\r\n", sizeof("Transmitting Data..\r\n") - 1, 100);
    HAL_UART_Transmit(&huart5,data,count,100);
}
void tcpSendDataRequest(char length[])
{
 800586c:	b510      	push	{r4, lr}
        This function sends request sending command to ESP32 specify by data length
        params :
            length: length of data sent  
     */

    char command[20] = "AT+CIPSEND=";
 800586e:	4a13      	ldr	r2, [pc, #76]	; (80058bc <tcpSendDataRequest+0x50>)
{
 8005870:	4604      	mov	r4, r0
    char command[20] = "AT+CIPSEND=";
 8005872:	f852 0fc0 	ldr.w	r0, [r2, #192]!
{
 8005876:	b086      	sub	sp, #24
    char command[20] = "AT+CIPSEND=";
 8005878:	6851      	ldr	r1, [r2, #4]
 800587a:	ab01      	add	r3, sp, #4
 800587c:	c303      	stmia	r3!, {r0, r1}
 800587e:	6890      	ldr	r0, [r2, #8]
 8005880:	6018      	str	r0, [r3, #0]
    strcat(command, length);
 8005882:	4621      	mov	r1, r4
    char command[20] = "AT+CIPSEND=";
 8005884:	2300      	movs	r3, #0
    strcat(command, length);
 8005886:	a801      	add	r0, sp, #4
    char command[20] = "AT+CIPSEND=";
 8005888:	9304      	str	r3, [sp, #16]
 800588a:	9305      	str	r3, [sp, #20]
    strcat(command, length);
 800588c:	f001 fd2c 	bl	80072e8 <strcat>
    strcat(command ,"\r\n");
 8005890:	490b      	ldr	r1, [pc, #44]	; (80058c0 <tcpSendDataRequest+0x54>)
 8005892:	a801      	add	r0, sp, #4
 8005894:	f001 fd28 	bl	80072e8 <strcat>

    HAL_UART_Transmit(&huart5, (uint8_t*) command, strlen(command), 100);
 8005898:	a801      	add	r0, sp, #4
 800589a:	f7fa fca7 	bl	80001ec <strlen>
 800589e:	a901      	add	r1, sp, #4
 80058a0:	b282      	uxth	r2, r0
 80058a2:	2364      	movs	r3, #100	; 0x64
 80058a4:	4807      	ldr	r0, [pc, #28]	; (80058c4 <tcpSendDataRequest+0x58>)
 80058a6:	f7fe fb1f 	bl	8003ee8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*) "Request sending data...\r\n", sizeof("Request sending data...\r\n") - 1, 100);
 80058aa:	2364      	movs	r3, #100	; 0x64
 80058ac:	2219      	movs	r2, #25
 80058ae:	4906      	ldr	r1, [pc, #24]	; (80058c8 <tcpSendDataRequest+0x5c>)
 80058b0:	4806      	ldr	r0, [pc, #24]	; (80058cc <tcpSendDataRequest+0x60>)
 80058b2:	f7fe fb19 	bl	8003ee8 <HAL_UART_Transmit>
}
 80058b6:	b006      	add	sp, #24
 80058b8:	bd10      	pop	{r4, pc}
 80058ba:	bf00      	nop
 80058bc:	08007358 	.word	0x08007358
 80058c0:	08009443 	.word	0x08009443
 80058c4:	20000560 	.word	0x20000560
 80058c8:	08009488 	.word	0x08009488
 80058cc:	200005a4 	.word	0x200005a4

080058d0 <tcpSendData>:

void tcpSendData(char data[], int size)
{
 80058d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        ( Must be used after sendRequest function )
        params:
            data: a stream of data
     */

    HAL_UART_Transmit(&huart1, (uint8_t*) "Transmitting Data...\r\n", sizeof("Transmitting Data...\r\n") - 1, 100);
 80058d2:	2216      	movs	r2, #22
{
 80058d4:	4606      	mov	r6, r0
 80058d6:	460d      	mov	r5, r1
    HAL_UART_Transmit(&huart1, (uint8_t*) "Transmitting Data...\r\n", sizeof("Transmitting Data...\r\n") - 1, 100);
 80058d8:	2364      	movs	r3, #100	; 0x64
 80058da:	4908      	ldr	r1, [pc, #32]	; (80058fc <tcpSendData+0x2c>)
 80058dc:	4808      	ldr	r0, [pc, #32]	; (8005900 <tcpSendData+0x30>)
    for (int i = 0; i < size; ++i) {
        HAL_UART_Transmit(&huart5, (uint8_t*) &data[i], 1, 100);
 80058de:	4f09      	ldr	r7, [pc, #36]	; (8005904 <tcpSendData+0x34>)
    HAL_UART_Transmit(&huart1, (uint8_t*) "Transmitting Data...\r\n", sizeof("Transmitting Data...\r\n") - 1, 100);
 80058e0:	f7fe fb02 	bl	8003ee8 <HAL_UART_Transmit>
    for (int i = 0; i < size; ++i) {
 80058e4:	2400      	movs	r4, #0
 80058e6:	42ac      	cmp	r4, r5
 80058e8:	db00      	blt.n	80058ec <tcpSendData+0x1c>
    }
}
 80058ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_Transmit(&huart5, (uint8_t*) &data[i], 1, 100);
 80058ec:	1931      	adds	r1, r6, r4
 80058ee:	2364      	movs	r3, #100	; 0x64
 80058f0:	2201      	movs	r2, #1
 80058f2:	4638      	mov	r0, r7
 80058f4:	f7fe faf8 	bl	8003ee8 <HAL_UART_Transmit>
    for (int i = 0; i < size; ++i) {
 80058f8:	3401      	adds	r4, #1
 80058fa:	e7f4      	b.n	80058e6 <tcpSendData+0x16>
 80058fc:	080094a2 	.word	0x080094a2
 8005900:	200005a4 	.word	0x200005a4
 8005904:	20000560 	.word	0x20000560

08005908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005908:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800590a:	2430      	movs	r4, #48	; 0x30
{
 800590c:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800590e:	4622      	mov	r2, r4
 8005910:	2100      	movs	r1, #0
 8005912:	a808      	add	r0, sp, #32
 8005914:	f001 fc24 	bl	8007160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005918:	2214      	movs	r2, #20
 800591a:	2100      	movs	r1, #0
 800591c:	a803      	add	r0, sp, #12
 800591e:	f001 fc1f 	bl	8007160 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005922:	4622      	mov	r2, r4
 8005924:	2100      	movs	r1, #0
 8005926:	a814      	add	r0, sp, #80	; 0x50
 8005928:	f001 fc1a 	bl	8007160 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800592c:	2400      	movs	r4, #0
 800592e:	4b21      	ldr	r3, [pc, #132]	; (80059b4 <SystemClock_Config+0xac>)
 8005930:	9401      	str	r4, [sp, #4]
 8005932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005934:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005938:	641a      	str	r2, [r3, #64]	; 0x40
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800593c:	4a1e      	ldr	r2, [pc, #120]	; (80059b8 <SystemClock_Config+0xb0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800593e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005942:	9301      	str	r3, [sp, #4]
 8005944:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005946:	9402      	str	r4, [sp, #8]
 8005948:	6813      	ldr	r3, [r2, #0]
 800594a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800594e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	6813      	ldr	r3, [r2, #0]
 8005956:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800595a:	9302      	str	r3, [sp, #8]
 800595c:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800595e:	2301      	movs	r3, #1
 8005960:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005966:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005968:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800596c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800596e:	2304      	movs	r3, #4
 8005970:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005972:	2348      	movs	r3, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005974:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005976:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005978:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800597a:	2303      	movs	r3, #3
 800597c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800597e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005980:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005982:	f7fd f83d 	bl	8002a00 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005986:	230f      	movs	r3, #15
 8005988:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800598a:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800598c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005990:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005992:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005994:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005996:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005998:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800599a:	f7fd f9e1 	bl	8002d60 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800599e:	2308      	movs	r3, #8
 80059a0:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059a2:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80059a4:	2332      	movs	r3, #50	; 0x32
 80059a6:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80059a8:	951a      	str	r5, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80059aa:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059ac:	f7fd fab0 	bl	8002f10 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80059b0:	b021      	add	sp, #132	; 0x84
 80059b2:	bd30      	pop	{r4, r5, pc}
 80059b4:	40023800 	.word	0x40023800
 80059b8:	40007000 	.word	0x40007000

080059bc <HAL_UART_RxCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) 
{
 80059bc:	b538      	push	{r3, r4, r5, lr}
  // add a char into  ring buffer
  addToBuff(&buff, receivedData[0]);
 80059be:	4c0e      	ldr	r4, [pc, #56]	; (80059f8 <HAL_UART_RxCpltCallback+0x3c>)
 80059c0:	480e      	ldr	r0, [pc, #56]	; (80059fc <HAL_UART_RxCpltCallback+0x40>)
 80059c2:	7821      	ldrb	r1, [r4, #0]
 80059c4:	f000 fe43 	bl	800664e <addToBuff>
  
  // reset linear buffer position every time encounters '\r'
  if (receivedData[0] == '\r') {
 80059c8:	7823      	ldrb	r3, [r4, #0]
 80059ca:	4c0d      	ldr	r4, [pc, #52]	; (8005a00 <HAL_UART_RxCpltCallback+0x44>)
    pos = 0;
  }

  // add data to linear buffer everything it reads from ring buffer
  linBuff[pos] = *readBuff(&buff);
 80059cc:	480b      	ldr	r0, [pc, #44]	; (80059fc <HAL_UART_RxCpltCallback+0x40>)
  if (receivedData[0] == '\r') {
 80059ce:	2b0d      	cmp	r3, #13
    pos = 0;
 80059d0:	bf04      	itt	eq
 80059d2:	2300      	moveq	r3, #0
 80059d4:	6023      	streq	r3, [r4, #0]
  linBuff[pos] = *readBuff(&buff);
 80059d6:	6825      	ldr	r5, [r4, #0]
 80059d8:	f000 fe52 	bl	8006680 <readBuff>
 80059dc:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <HAL_UART_RxCpltCallback+0x48>)
 80059de:	7802      	ldrb	r2, [r0, #0]
 80059e0:	555a      	strb	r2, [r3, r5]
  pos++;
 80059e2:	6823      	ldr	r3, [r4, #0]

  // recall uart receive IT
  HAL_UART_Receive_IT(&huart5, receivedData, 1);
 80059e4:	4904      	ldr	r1, [pc, #16]	; (80059f8 <HAL_UART_RxCpltCallback+0x3c>)
 80059e6:	4808      	ldr	r0, [pc, #32]	; (8005a08 <HAL_UART_RxCpltCallback+0x4c>)
  pos++;
 80059e8:	3301      	adds	r3, #1
 80059ea:	6023      	str	r3, [r4, #0]
  HAL_UART_Receive_IT(&huart5, receivedData, 1);
 80059ec:	2201      	movs	r2, #1
}
 80059ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_UART_Receive_IT(&huart5, receivedData, 1);
 80059f2:	f7fe bad6 	b.w	8003fa2 <HAL_UART_Receive_IT>
 80059f6:	bf00      	nop
 80059f8:	200005a0 	.word	0x200005a0
 80059fc:	2000042c 	.word	0x2000042c
 8005a00:	200002ac 	.word	0x200002ac
 8005a04:	20000434 	.word	0x20000434
 8005a08:	20000560 	.word	0x20000560

08005a0c <resetLinBuff>:
  }
}


void resetLinBuff(char* linBuff, int size)
{
 8005a0c:	b510      	push	{r4, lr}
  /*
    This function reset a linear buffer by inserting null char into all positions
   */
  for (int i = 0; i < size; ++i) {
 8005a0e:	4603      	mov	r3, r0
    linBuff[i] = '\0';
 8005a10:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
 8005a12:	1a1a      	subs	r2, r3, r0
 8005a14:	4291      	cmp	r1, r2
 8005a16:	dc00      	bgt.n	8005a1a <resetLinBuff+0xe>
  }
}
 8005a18:	bd10      	pop	{r4, pc}
    linBuff[i] = '\0';
 8005a1a:	f803 4b01 	strb.w	r4, [r3], #1
 8005a1e:	e7f8      	b.n	8005a12 <resetLinBuff+0x6>

08005a20 <sanitizeLinBuff>:

void sanitizeLinBuff(char* linBuff, int size)
{
 8005a20:	b510      	push	{r4, lr}
  /*
    This function sanitizes the linear buffer for string processing by replace all '\0' with a 0x20(spacebar)
   */
  for (int i = 0; i < size; ++i) {
 8005a22:	4603      	mov	r3, r0
    if (linBuff[i] == 0) {
      linBuff[i] = 0x20;
 8005a24:	2420      	movs	r4, #32
  for (int i = 0; i < size; ++i) {
 8005a26:	1a1a      	subs	r2, r3, r0
 8005a28:	4291      	cmp	r1, r2
 8005a2a:	dc00      	bgt.n	8005a2e <sanitizeLinBuff+0xe>
    }
  }
}
 8005a2c:	bd10      	pop	{r4, pc}
    if (linBuff[i] == 0) {
 8005a2e:	781a      	ldrb	r2, [r3, #0]
 8005a30:	b902      	cbnz	r2, 8005a34 <sanitizeLinBuff+0x14>
      linBuff[i] = 0x20;
 8005a32:	701c      	strb	r4, [r3, #0]
 8005a34:	3301      	adds	r3, #1
 8005a36:	e7f6      	b.n	8005a26 <sanitizeLinBuff+0x6>

08005a38 <main>:
{
 8005a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a3c:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 8005a3e:	f7fb fc05 	bl	800124c <HAL_Init>
  SystemClock_Config();
 8005a42:	f7ff ff61 	bl	8005908 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a46:	2214      	movs	r2, #20
 8005a48:	2100      	movs	r1, #0
 8005a4a:	a80b      	add	r0, sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a4c:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a4e:	f001 fb87 	bl	8007160 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a52:	4bae      	ldr	r3, [pc, #696]	; (8005d0c <main+0x2d4>)
 8005a54:	9401      	str	r4, [sp, #4]
 8005a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8005a58:	48ad      	ldr	r0, [pc, #692]	; (8005d10 <main+0x2d8>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8005a5a:	4dae      	ldr	r5, [pc, #696]	; (8005d14 <main+0x2dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a5c:	f042 0204 	orr.w	r2, r2, #4
 8005a60:	631a      	str	r2, [r3, #48]	; 0x30
 8005a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a64:	f002 0204 	and.w	r2, r2, #4
 8005a68:	9201      	str	r2, [sp, #4]
 8005a6a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005a6c:	9402      	str	r4, [sp, #8]
 8005a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a70:	f042 0220 	orr.w	r2, r2, #32
 8005a74:	631a      	str	r2, [r3, #48]	; 0x30
 8005a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a78:	f002 0220 	and.w	r2, r2, #32
 8005a7c:	9202      	str	r2, [sp, #8]
 8005a7e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005a80:	9403      	str	r4, [sp, #12]
 8005a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a88:	631a      	str	r2, [r3, #48]	; 0x30
 8005a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a8c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005a90:	9203      	str	r2, [sp, #12]
 8005a92:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a94:	9404      	str	r4, [sp, #16]
 8005a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a98:	f042 0201 	orr.w	r2, r2, #1
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8005a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aa0:	f002 0201 	and.w	r2, r2, #1
 8005aa4:	9204      	str	r2, [sp, #16]
 8005aa6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005aa8:	9405      	str	r4, [sp, #20]
 8005aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aac:	f042 0202 	orr.w	r2, r2, #2
 8005ab0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ab4:	f002 0202 	and.w	r2, r2, #2
 8005ab8:	9205      	str	r2, [sp, #20]
 8005aba:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005abc:	9406      	str	r4, [sp, #24]
 8005abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ac4:	631a      	str	r2, [r3, #48]	; 0x30
 8005ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005acc:	9206      	str	r2, [sp, #24]
 8005ace:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005ad0:	9407      	str	r4, [sp, #28]
 8005ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad4:	f042 0210 	orr.w	r2, r2, #16
 8005ad8:	631a      	str	r2, [r3, #48]	; 0x30
 8005ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005adc:	f002 0210 	and.w	r2, r2, #16
 8005ae0:	9207      	str	r2, [sp, #28]
 8005ae2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ae4:	9408      	str	r4, [sp, #32]
 8005ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae8:	f042 0208 	orr.w	r2, r2, #8
 8005aec:	631a      	str	r2, [r3, #48]	; 0x30
 8005aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af0:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8005af4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005af6:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8005af8:	2116      	movs	r1, #22
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005afa:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8005afc:	f7fc f882 	bl	8001c04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8005b00:	4622      	mov	r2, r4
 8005b02:	2180      	movs	r1, #128	; 0x80
 8005b04:	4884      	ldr	r0, [pc, #528]	; (8005d18 <main+0x2e0>)
 8005b06:	f7fc f87d 	bl	8001c04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8005b0a:	4622      	mov	r2, r4
 8005b0c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005b10:	4882      	ldr	r0, [pc, #520]	; (8005d1c <main+0x2e4>)
 8005b12:	f7fc f877 	bl	8001c04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8005b16:	4622      	mov	r2, r4
 8005b18:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8005b1c:	4880      	ldr	r0, [pc, #512]	; (8005d20 <main+0x2e8>)
 8005b1e:	f7fc f871 	bl	8001c04 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b22:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8005b24:	2316      	movs	r3, #22
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b26:	a90b      	add	r1, sp, #44	; 0x2c
 8005b28:	4879      	ldr	r0, [pc, #484]	; (8005d10 <main+0x2d8>)
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8005b2a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b2c:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b2e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b30:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b32:	f7fb fee1 	bl	80018f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8005b36:	f248 0307 	movw	r3, #32775	; 0x8007
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b3a:	a90b      	add	r1, sp, #44	; 0x2c
 8005b3c:	4876      	ldr	r0, [pc, #472]	; (8005d18 <main+0x2e0>)
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8005b3e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8005b40:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b42:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b44:	f7fb fed8 	bl	80018f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8005b48:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8005b4a:	a90b      	add	r1, sp, #44	; 0x2c
 8005b4c:	4872      	ldr	r0, [pc, #456]	; (8005d18 <main+0x2e0>)
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8005b4e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b50:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b52:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b54:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8005b56:	f7fb fecf 	bl	80018f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8005b5a:	2320      	movs	r3, #32
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8005b5c:	a90b      	add	r1, sp, #44	; 0x2c
 8005b5e:	486c      	ldr	r0, [pc, #432]	; (8005d10 <main+0x2d8>)
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8005b60:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8005b62:	f04f 0a04 	mov.w	sl, #4
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8005b66:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b68:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8005b6a:	f7fb fec5 	bl	80018f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8005b6e:	a90b      	add	r1, sp, #44	; 0x2c
 8005b70:	486c      	ldr	r0, [pc, #432]	; (8005d24 <main+0x2ec>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8005b72:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = TE_Pin;
 8005b76:	f44f 6700 	mov.w	r7, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b7a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8005b7e:	f7fb febb 	bl	80018f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8005b82:	a90b      	add	r1, sp, #44	; 0x2c
 8005b84:	4865      	ldr	r0, [pc, #404]	; (8005d1c <main+0x2e4>)
  GPIO_InitStruct.Pin = TE_Pin;
 8005b86:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b88:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8005b8c:	f7fb feb4 	bl	80018f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8005b90:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b94:	a90b      	add	r1, sp, #44	; 0x2c
 8005b96:	4861      	ldr	r0, [pc, #388]	; (8005d1c <main+0x2e4>)
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8005b98:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b9a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b9e:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ba0:	f7fb feaa 	bl	80018f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005ba4:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8005ba6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005baa:	485d      	ldr	r0, [pc, #372]	; (8005d20 <main+0x2e8>)
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8005bac:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bae:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bb2:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005bb4:	f7fb fea0 	bl	80018f8 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8005bb8:	485b      	ldr	r0, [pc, #364]	; (8005d28 <main+0x2f0>)
  hdma2d.Instance = DMA2D;
 8005bba:	4d5c      	ldr	r5, [pc, #368]	; (8005d2c <main+0x2f4>)
  hcrc.Instance = CRC;
 8005bbc:	4b5c      	ldr	r3, [pc, #368]	; (8005d30 <main+0x2f8>)
 8005bbe:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005bc0:	f7fb fbd8 	bl	8001374 <HAL_CRC_Init>
  hdma2d.Instance = DMA2D;
 8005bc4:	4b5b      	ldr	r3, [pc, #364]	; (8005d34 <main+0x2fc>)
  hdma2d.LayerCfg[1].InputOffset = 0;
 8005bc6:	62ac      	str	r4, [r5, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8005bc8:	62ec      	str	r4, [r5, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005bca:	632c      	str	r4, [r5, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8005bcc:	636c      	str	r4, [r5, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8005bce:	4628      	mov	r0, r5
  hdma2d.Init.Mode = DMA2D_M2M;
 8005bd0:	e885 0018 	stmia.w	r5, {r3, r4}
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8005bd4:	60ac      	str	r4, [r5, #8]
  hdma2d.Init.OutputOffset = 0;
 8005bd6:	60ec      	str	r4, [r5, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8005bd8:	f7fb fcf0 	bl	80015bc <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4628      	mov	r0, r5
 8005be0:	f7fb fe40 	bl	8001864 <HAL_DMA2D_ConfigLayer>
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8005be4:	221c      	movs	r2, #28
 8005be6:	4621      	mov	r1, r4
 8005be8:	a80b      	add	r0, sp, #44	; 0x2c
 8005bea:	f001 fab9 	bl	8007160 <memset>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8005bee:	4852      	ldr	r0, [pc, #328]	; (8005d38 <main+0x300>)
 8005bf0:	4b52      	ldr	r3, [pc, #328]	; (8005d3c <main+0x304>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8005bf2:	f8c0 a00c 	str.w	sl, [r0, #12]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8005bf6:	e880 0048 	stmia.w	r0, {r3, r6}
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005bfa:	2340      	movs	r3, #64	; 0x40
 8005bfc:	6143      	str	r3, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8005bfe:	f44f 73c0 	mov.w	r3, #384	; 0x180
  SdramTiming.ExitSelfRefreshDelay = 7;
 8005c02:	f04f 0807 	mov.w	r8, #7
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8005c06:	f04f 0910 	mov.w	r9, #16
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8005c0a:	a90b      	add	r1, sp, #44	; 0x2c
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8005c0c:	6183      	str	r3, [r0, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8005c0e:	6207      	str	r7, [r0, #32]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8005c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  SdramTiming.LoadToActiveDelay = 2;
 8005c14:	2702      	movs	r7, #2
  SdramTiming.SelfRefreshTime = 4;
 8005c16:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  SdramTiming.WriteRecoveryTime = 3;
 8005c1a:	f04f 0a03 	mov.w	sl, #3
  hi2c3.Instance = I2C3;
 8005c1e:	4d48      	ldr	r5, [pc, #288]	; (8005d40 <main+0x308>)
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005c20:	6084      	str	r4, [r0, #8]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8005c22:	f8c0 9010 	str.w	r9, [r0, #16]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005c26:	61c4      	str	r4, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8005c28:	6244      	str	r4, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8005c2a:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8005c2c:	970b      	str	r7, [sp, #44]	; 0x2c
  SdramTiming.ExitSelfRefreshDelay = 7;
 8005c2e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  SdramTiming.RowCycleDelay = 7;
 8005c32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  SdramTiming.WriteRecoveryTime = 3;
 8005c36:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  SdramTiming.RPDelay = 2;
 8005c3a:	9710      	str	r7, [sp, #64]	; 0x40
  SdramTiming.RCDDelay = 2;
 8005c3c:	9711      	str	r7, [sp, #68]	; 0x44
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8005c3e:	f7fd fa7f 	bl	8003140 <HAL_SDRAM_Init>
  hi2c3.Init.ClockSpeed = 100000;
 8005c42:	4a40      	ldr	r2, [pc, #256]	; (8005d44 <main+0x30c>)
 8005c44:	4b40      	ldr	r3, [pc, #256]	; (8005d48 <main+0x310>)
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005c46:	60ac      	str	r4, [r5, #8]
  hi2c3.Init.ClockSpeed = 100000;
 8005c48:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005c4c:	4628      	mov	r0, r5
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c52:	612b      	str	r3, [r5, #16]
  hi2c3.Init.OwnAddress1 = 0;
 8005c54:	60ec      	str	r4, [r5, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c56:	616c      	str	r4, [r5, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005c58:	61ac      	str	r4, [r5, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c5a:	61ec      	str	r4, [r5, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c5c:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005c5e:	f7fc fc25 	bl	80024ac <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005c62:	4621      	mov	r1, r4
 8005c64:	4628      	mov	r0, r5
 8005c66:	f7fc fcc5 	bl	80025f4 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f7fc fce0 	bl	8002632 <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8005c72:	4621      	mov	r1, r4
 8005c74:	2234      	movs	r2, #52	; 0x34
 8005c76:	a80b      	add	r0, sp, #44	; 0x2c
 8005c78:	f001 fa72 	bl	8007160 <memset>
  hltdc.Instance = LTDC;
 8005c7c:	4d33      	ldr	r5, [pc, #204]	; (8005d4c <main+0x314>)
 8005c7e:	4b34      	ldr	r3, [pc, #208]	; (8005d50 <main+0x318>)
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005c80:	60ac      	str	r4, [r5, #8]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005c82:	e885 0018 	stmia.w	r5, {r3, r4}
  hltdc.Init.HorizontalSync = 9;
 8005c86:	2309      	movs	r3, #9
 8005c88:	616b      	str	r3, [r5, #20]
  hltdc.Init.AccumulatedHBP = 29;
 8005c8a:	231d      	movs	r3, #29
 8005c8c:	61eb      	str	r3, [r5, #28]
  hltdc.Init.AccumulatedActiveW = 269;
 8005c8e:	f240 130d 	movw	r3, #269	; 0x10d
 8005c92:	626b      	str	r3, [r5, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8005c94:	f240 1343 	movw	r3, #323	; 0x143
 8005c98:	62ab      	str	r3, [r5, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8005c9a:	f240 1317 	movw	r3, #279	; 0x117
 8005c9e:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8005ca0:	4628      	mov	r0, r5
  hltdc.Init.TotalHeigh = 327;
 8005ca2:	f240 1347 	movw	r3, #327	; 0x147
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8005ca6:	60ec      	str	r4, [r5, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005ca8:	612c      	str	r4, [r5, #16]
  hltdc.Init.VerticalSync = 1;
 8005caa:	61ae      	str	r6, [r5, #24]
  hltdc.Init.AccumulatedVBP = 3;
 8005cac:	f8c5 a020 	str.w	sl, [r5, #32]
  hltdc.Init.TotalHeigh = 327;
 8005cb0:	632b      	str	r3, [r5, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8005cb2:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8005cb6:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8005cba:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8005cbe:	f7fc fd5d 	bl	800277c <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8005cc2:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.WindowX1 = 240;
 8005cc4:	22f0      	movs	r2, #240	; 0xf0
  pLayerCfg.Alpha = 255;
 8005cc6:	9110      	str	r1, [sp, #64]	; 0x40
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005cc8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.WindowY1 = 320;
 8005ccc:	f44f 73a0 	mov.w	r3, #320	; 0x140
  pLayerCfg.WindowX1 = 240;
 8005cd0:	920c      	str	r2, [sp, #48]	; 0x30
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005cd2:	9112      	str	r1, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005cd4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  pLayerCfg.ImageWidth = 240;
 8005cd8:	9215      	str	r2, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 8005cda:	f04f 4850 	mov.w	r8, #3489660928	; 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8005cde:	4622      	mov	r2, r4
 8005ce0:	a90b      	add	r1, sp, #44	; 0x2c
 8005ce2:	4628      	mov	r0, r5
  pLayerCfg.WindowX0 = 0;
 8005ce4:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.WindowY0 = 0;
 8005ce6:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.WindowY1 = 320;
 8005ce8:	930e      	str	r3, [sp, #56]	; 0x38
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8005cea:	970f      	str	r7, [sp, #60]	; 0x3c
  pLayerCfg.Alpha0 = 0;
 8005cec:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.FBStartAdress = 0xD0000000;
 8005cee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  pLayerCfg.ImageHeight = 320;
 8005cf2:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg.Backcolor.Blue = 0;
 8005cf4:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  pLayerCfg.Backcolor.Green = 0;
 8005cf8:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
  pLayerCfg.Backcolor.Red = 0;
 8005cfc:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8005d00:	f7fc fe08 	bl	8002914 <HAL_LTDC_ConfigLayer>
  hspi5.Instance = SPI5;
 8005d04:	4813      	ldr	r0, [pc, #76]	; (8005d54 <main+0x31c>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8005d06:	4914      	ldr	r1, [pc, #80]	; (8005d58 <main+0x320>)
 8005d08:	e028      	b.n	8005d5c <main+0x324>
 8005d0a:	bf00      	nop
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	40020800 	.word	0x40020800
 8005d14:	10120000 	.word	0x10120000
 8005d18:	40020000 	.word	0x40020000
 8005d1c:	40020c00 	.word	0x40020c00
 8005d20:	40021800 	.word	0x40021800
 8005d24:	40020400 	.word	0x40020400
 8005d28:	20000424 	.word	0x20000424
 8005d2c:	20000664 	.word	0x20000664
 8005d30:	40023000 	.word	0x40023000
 8005d34:	4002b000 	.word	0x4002b000
 8005d38:	200006a4 	.word	0x200006a4
 8005d3c:	a0000140 	.word	0xa0000140
 8005d40:	20000378 	.word	0x20000378
 8005d44:	40005c00 	.word	0x40005c00
 8005d48:	000186a0 	.word	0x000186a0
 8005d4c:	200004b8 	.word	0x200004b8
 8005d50:	40016800 	.word	0x40016800
 8005d54:	200003cc 	.word	0x200003cc
 8005d58:	40015000 	.word	0x40015000
  htim1.Instance = TIM1;
 8005d5c:	4db6      	ldr	r5, [pc, #728]	; (8006038 <main+0x600>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8005d5e:	6084      	str	r4, [r0, #8]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8005d60:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005d64:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8005d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d6c:	6183      	str	r3, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 8005d6e:	270a      	movs	r7, #10
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005d70:	2318      	movs	r3, #24
 8005d72:	61c3      	str	r3, [r0, #28]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8005d74:	60c4      	str	r4, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d76:	6104      	str	r4, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005d78:	6144      	str	r4, [r0, #20]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005d7a:	6204      	str	r4, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8005d7c:	6244      	str	r4, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d7e:	6284      	str	r4, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8005d80:	62c7      	str	r7, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8005d82:	f7fd fab9 	bl	80032f8 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d86:	464a      	mov	r2, r9
 8005d88:	4621      	mov	r1, r4
 8005d8a:	a80b      	add	r0, sp, #44	; 0x2c
 8005d8c:	f001 f9e8 	bl	8007160 <memset>
  htim1.Instance = TIM1;
 8005d90:	4baa      	ldr	r3, [pc, #680]	; (800603c <main+0x604>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d92:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005d94:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 0;
 8005d96:	e885 0018 	stmia.w	r5, {r3, r4}
  htim1.Init.Period = 0;
 8005d9a:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d9c:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8005d9e:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005da0:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005da2:	9409      	str	r4, [sp, #36]	; 0x24
 8005da4:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005da6:	f7fd fe49 	bl	8003a3c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005dae:	a90b      	add	r1, sp, #44	; 0x2c
 8005db0:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005db2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005db4:	f7fd fe66 	bl	8003a84 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005db8:	a909      	add	r1, sp, #36	; 0x24
 8005dba:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dbc:	9409      	str	r4, [sp, #36]	; 0x24
  htim7.Instance = TIM7;
 8005dbe:	4da0      	ldr	r5, [pc, #640]	; (8006040 <main+0x608>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dc0:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005dc2:	f7fd fef3 	bl	8003bac <HAL_TIMEx_MasterConfigSynchronization>
  htim7.Init.Prescaler = 374;
 8005dc6:	489f      	ldr	r0, [pc, #636]	; (8006044 <main+0x60c>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dc8:	60ac      	str	r4, [r5, #8]
  htim7.Init.Prescaler = 374;
 8005dca:	f44f 73bb 	mov.w	r3, #374	; 0x176
 8005dce:	e885 0009 	stmia.w	r5, {r0, r3}
  htim7.Init.Period = 127;
 8005dd2:	237f      	movs	r3, #127	; 0x7f
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005dd4:	4628      	mov	r0, r5
  htim7.Init.Period = 127;
 8005dd6:	60eb      	str	r3, [r5, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dd8:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dda:	940b      	str	r4, [sp, #44]	; 0x2c
 8005ddc:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005dde:	f7fd fe2d 	bl	8003a3c <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005de2:	a90b      	add	r1, sp, #44	; 0x2c
 8005de4:	4628      	mov	r0, r5
  huart5.Instance = UART5;
 8005de6:	4d98      	ldr	r5, [pc, #608]	; (8006048 <main+0x610>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005de8:	940b      	str	r4, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dea:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005dec:	f7fd fede 	bl	8003bac <HAL_TIMEx_MasterConfigSynchronization>
  huart5.Init.BaudRate = 115200;
 8005df0:	4b96      	ldr	r3, [pc, #600]	; (800604c <main+0x614>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005df2:	60ac      	str	r4, [r5, #8]
  huart5.Init.BaudRate = 115200;
 8005df4:	f44f 3ae1 	mov.w	sl, #115200	; 0x1c200
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005df8:	f04f 090c 	mov.w	r9, #12
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005dfc:	4628      	mov	r0, r5
  huart5.Init.BaudRate = 115200;
 8005dfe:	e885 0408 	stmia.w	r5, {r3, sl}
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005e02:	60ec      	str	r4, [r5, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005e04:	612c      	str	r4, [r5, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e06:	61ac      	str	r4, [r5, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e08:	61ec      	str	r4, [r5, #28]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005e0a:	f8c5 9014 	str.w	r9, [r5, #20]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005e0e:	f7fe f83d 	bl	8003e8c <HAL_UART_Init>
  huart1.Instance = USART1;
 8005e12:	4b8f      	ldr	r3, [pc, #572]	; (8006050 <main+0x618>)
 8005e14:	488f      	ldr	r0, [pc, #572]	; (8006054 <main+0x61c>)
  huart1.Init.BaudRate = 115200;
 8005e16:	e880 0408 	stmia.w	r0, {r3, sl}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005e1a:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005e1c:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005e1e:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e20:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e22:	61c4      	str	r4, [r0, #28]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005e24:	f8c0 9014 	str.w	r9, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005e28:	f7fe f830 	bl	8003e8c <HAL_UART_Init>
  MX_USB_HOST_Init();
 8005e2c:	f000 ffde 	bl	8006dec <MX_USB_HOST_Init>
  BSP_LCD_Init();
 8005e30:	f7fa ff88 	bl	8000d44 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1,LCD_FRAME_BUFFER_LAYER1);
 8005e34:	4641      	mov	r1, r8
 8005e36:	4630      	mov	r0, r6
 8005e38:	f7fa fe38 	bl	8000aac <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f7fa fe75 	bl	8000b2c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8005e42:	f04f 30ff 	mov.w	r0, #4294967295
 8005e46:	f7fa feb3 	bl	8000bb0 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e50:	f7fa fe86 	bl	8000b60 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8005e54:	4621      	mov	r1, r4
 8005e56:	4630      	mov	r0, r6
 8005e58:	f7fa fe6e 	bl	8000b38 <BSP_LCD_SetLayerVisible>
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8005e5c:	497e      	ldr	r1, [pc, #504]	; (8006058 <main+0x620>)
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f7fa fe24 	bl	8000aac <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8005e64:	4620      	mov	r0, r4
 8005e66:	f7fa fe61 	bl	8000b2c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8005e6a:	f7fa febf 	bl	8000bec <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8005e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e72:	f7fa fe9d 	bl	8000bb0 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font12);
 8005e76:	4879      	ldr	r0, [pc, #484]	; (800605c <main+0x624>)
 8005e78:	f7fa fe8e 	bl	8000b98 <BSP_LCD_SetFont>
  uint8_t* buffPtr = (uint8_t*) malloc(buffSize);
 8005e7c:	4b78      	ldr	r3, [pc, #480]	; (8006060 <main+0x628>)
 8005e7e:	f893 8000 	ldrb.w	r8, [r3]
 8005e82:	4640      	mov	r0, r8
 8005e84:	f001 f95c 	bl	8007140 <malloc>
  initRingBuff(&buff, buffSize, buffPtr);
 8005e88:	4641      	mov	r1, r8
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	4875      	ldr	r0, [pc, #468]	; (8006064 <main+0x62c>)
 8005e8e:	f000 fc18 	bl	80066c2 <initRingBuff>
  HAL_UART_Receive_IT(&huart5, receivedData, 1);  //Enable interrupt
 8005e92:	4632      	mov	r2, r6
 8005e94:	4974      	ldr	r1, [pc, #464]	; (8006068 <main+0x630>)
 8005e96:	4628      	mov	r0, r5
 8005e98:	f7fe f883 	bl	8003fa2 <HAL_UART_Receive_IT>
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8005e9c:	4873      	ldr	r0, [pc, #460]	; (800606c <main+0x634>)
 8005e9e:	f7fa fe6f 	bl	8000b80 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)"STM32F429I BSP", CENTER_MODE);
 8005ea2:	4633      	mov	r3, r6
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	4a72      	ldr	r2, [pc, #456]	; (8006070 <main+0x638>)
    if (strstr(linBuff, "WIFI GOT IP")) {
 8005ea8:	4c72      	ldr	r4, [pc, #456]	; (8006074 <main+0x63c>)
        subscribeReq = true; //uncomment this for using subscriber mode
 8005eaa:	4e73      	ldr	r6, [pc, #460]	; (8006078 <main+0x640>)
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)"STM32F429I BSP", CENTER_MODE);
 8005eac:	4639      	mov	r1, r7
 8005eae:	f7fb f81b 	bl	8000ee8 <BSP_LCD_DisplayStringAt>
    MX_USB_HOST_Process();
 8005eb2:	f000 ffbb 	bl	8006e2c <MX_USB_HOST_Process>
    if (strstr(linBuff, "WIFI GOT IP")) {
 8005eb6:	4971      	ldr	r1, [pc, #452]	; (800607c <main+0x644>)
 8005eb8:	4d71      	ldr	r5, [pc, #452]	; (8006080 <main+0x648>)
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f001 fa23 	bl	8007306 <strstr>
 8005ec0:	4607      	mov	r7, r0
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d042      	beq.n	8005f4c <main+0x514>
      HAL_UART_Transmit(&huart1, (uint8_t*) "[i] Wi-Fi connected.\r\n", sizeof("[i] Wi-Fi connected.\r\n") - 1, 100);
 8005ec6:	2364      	movs	r3, #100	; 0x64
 8005ec8:	2216      	movs	r2, #22
 8005eca:	496e      	ldr	r1, [pc, #440]	; (8006084 <main+0x64c>)
 8005ecc:	4861      	ldr	r0, [pc, #388]	; (8006054 <main+0x61c>)
 8005ece:	f7fe f80b 	bl	8003ee8 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart1, (uint8_t*) "*--- IDLE MODE waiting for command ---*\r\n", sizeof("*--- IDLE MODE waiting for command ---*\r\n") - 1, 100);
 8005ed2:	2229      	movs	r2, #41	; 0x29
 8005ed4:	496c      	ldr	r1, [pc, #432]	; (8006088 <main+0x650>)
 8005ed6:	485f      	ldr	r0, [pc, #380]	; (8006054 <main+0x61c>)
 8005ed8:	2364      	movs	r3, #100	; 0x64
 8005eda:	f7fe f805 	bl	8003ee8 <HAL_UART_Transmit>
      espAlive = true;
 8005ede:	4b6b      	ldr	r3, [pc, #428]	; (800608c <main+0x654>)
 8005ee0:	f04f 0801 	mov.w	r8, #1
 8005ee4:	f883 8000 	strb.w	r8, [r3]
      commandSent = false;
 8005ee8:	4b69      	ldr	r3, [pc, #420]	; (8006090 <main+0x658>)
 8005eea:	2700      	movs	r7, #0
 8005eec:	701f      	strb	r7, [r3, #0]
      HAL_Delay(100);
 8005eee:	2064      	movs	r0, #100	; 0x64
      state = WIFI_CONNECTED;
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	702b      	strb	r3, [r5, #0]
      HAL_Delay(100);
 8005ef4:	f7fb f9d6 	bl	80012a4 <HAL_Delay>
      BSP_LCD_Clear(LCD_COLOR_WHITE);
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8005efc:	f7fa fe58 	bl	8000bb0 <BSP_LCD_Clear>
      HAL_Delay(100);
 8005f00:	2064      	movs	r0, #100	; 0x64
 8005f02:	f7fb f9cf 	bl	80012a4 <HAL_Delay>
      BSP_LCD_DisplayStringAt(0,10,(uint8_t*)"Wi-Fi Connected", CENTER_MODE);
 8005f06:	4a63      	ldr	r2, [pc, #396]	; (8006094 <main+0x65c>)
 8005f08:	4643      	mov	r3, r8
      BSP_LCD_DisplayStringAt(0,10,(uint8_t*)"Wi-Fi Disconnected", CENTER_MODE);
 8005f0a:	210a      	movs	r1, #10
 8005f0c:	4638      	mov	r0, r7
 8005f0e:	f7fa ffeb 	bl	8000ee8 <BSP_LCD_DisplayStringAt>
      resetLinBuff(linBuff, 100);
 8005f12:	2164      	movs	r1, #100	; 0x64
 8005f14:	4620      	mov	r0, r4
 8005f16:	f7ff fd79 	bl	8005a0c <resetLinBuff>
    switch (state)
 8005f1a:	782b      	ldrb	r3, [r5, #0]
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d8c8      	bhi.n	8005eb2 <main+0x47a>
 8005f20:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <main+0x4f0>)
 8005f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f26:	bf00      	nop
 8005f28:	08005ff1 	.word	0x08005ff1
 8005f2c:	080060c5 	.word	0x080060c5
 8005f30:	0800614f 	.word	0x0800614f
 8005f34:	080061dd 	.word	0x080061dd
 8005f38:	080062c1 	.word	0x080062c1
 8005f3c:	08005eb3 	.word	0x08005eb3
 8005f40:	0800637d 	.word	0x0800637d
 8005f44:	0800654f 	.word	0x0800654f
 8005f48:	080065a9 	.word	0x080065a9
    else if (strstr(linBuff, "DISCONNECT")) {
 8005f4c:	4952      	ldr	r1, [pc, #328]	; (8006098 <main+0x660>)
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f001 f9d9 	bl	8007306 <strstr>
 8005f54:	b1c0      	cbz	r0, 8005f88 <main+0x550>
      HAL_UART_Transmit(&huart1, (uint8_t*) "[i] Wi-Fi is disconnected.\r\n", sizeof("[i] Wi-Fi is disconnected.\r\n") - 1, 100);
 8005f56:	221c      	movs	r2, #28
 8005f58:	4950      	ldr	r1, [pc, #320]	; (800609c <main+0x664>)
 8005f5a:	483e      	ldr	r0, [pc, #248]	; (8006054 <main+0x61c>)
 8005f5c:	2364      	movs	r3, #100	; 0x64
 8005f5e:	f7fd ffc3 	bl	8003ee8 <HAL_UART_Transmit>
      commandSent = false;
 8005f62:	4b4b      	ldr	r3, [pc, #300]	; (8006090 <main+0x658>)
      state = ESP_ALIVE;
 8005f64:	f04f 0801 	mov.w	r8, #1
      HAL_Delay(100);
 8005f68:	2064      	movs	r0, #100	; 0x64
      commandSent = false;
 8005f6a:	701f      	strb	r7, [r3, #0]
      state = ESP_ALIVE;
 8005f6c:	f885 8000 	strb.w	r8, [r5]
      HAL_Delay(100);
 8005f70:	f7fb f998 	bl	80012a4 <HAL_Delay>
      BSP_LCD_Clear(LCD_COLOR_WHITE);
 8005f74:	f04f 30ff 	mov.w	r0, #4294967295
 8005f78:	f7fa fe1a 	bl	8000bb0 <BSP_LCD_Clear>
      HAL_Delay(100);
 8005f7c:	2064      	movs	r0, #100	; 0x64
 8005f7e:	f7fb f991 	bl	80012a4 <HAL_Delay>
      BSP_LCD_DisplayStringAt(0,10,(uint8_t*)"Wi-Fi Disconnected", CENTER_MODE);
 8005f82:	4643      	mov	r3, r8
 8005f84:	4a46      	ldr	r2, [pc, #280]	; (80060a0 <main+0x668>)
 8005f86:	e7c0      	b.n	8005f0a <main+0x4d2>
    else if (strstr(linBuff, "CLOSED")) {
 8005f88:	4946      	ldr	r1, [pc, #280]	; (80060a4 <main+0x66c>)
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f001 f9bb 	bl	8007306 <strstr>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d0c2      	beq.n	8005f1a <main+0x4e2>
      if(!ForceClose){
 8005f94:	4b44      	ldr	r3, [pc, #272]	; (80060a8 <main+0x670>)
 8005f96:	781f      	ldrb	r7, [r3, #0]
 8005f98:	2f00      	cmp	r7, #0
 8005f9a:	d1be      	bne.n	8005f1a <main+0x4e2>
        HAL_UART_Transmit(&huart1, (uint8_t*) "[i] TCP connection closed.\r\n", sizeof("[i] TCP connection closed.\r\n") - 1, 100);
 8005f9c:	221c      	movs	r2, #28
 8005f9e:	2364      	movs	r3, #100	; 0x64
 8005fa0:	4942      	ldr	r1, [pc, #264]	; (80060ac <main+0x674>)
 8005fa2:	482c      	ldr	r0, [pc, #176]	; (8006054 <main+0x61c>)
 8005fa4:	f7fd ffa0 	bl	8003ee8 <HAL_UART_Transmit>
        commandSent = false;
 8005fa8:	4b39      	ldr	r3, [pc, #228]	; (8006090 <main+0x658>)
 8005faa:	701f      	strb	r7, [r3, #0]
        mqttLogin = false;
 8005fac:	4b40      	ldr	r3, [pc, #256]	; (80060b0 <main+0x678>)
        subscribeReq = true; //uncomment this for using subscriber mode
 8005fae:	f04f 0801 	mov.w	r8, #1
        mqttLogin = false;
 8005fb2:	701f      	strb	r7, [r3, #0]
        resetLinBuff(linBuff, 100);
 8005fb4:	4620      	mov	r0, r4
        state = QUIT_AP;
 8005fb6:	2304      	movs	r3, #4
        resetLinBuff(linBuff, 100);
 8005fb8:	2164      	movs	r1, #100	; 0x64
        state = QUIT_AP;
 8005fba:	702b      	strb	r3, [r5, #0]
        subscribeReq = true; //uncomment this for using subscriber mode
 8005fbc:	f886 8000 	strb.w	r8, [r6]
        resetLinBuff(linBuff, 100);
 8005fc0:	f7ff fd24 	bl	8005a0c <resetLinBuff>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8005fc4:	463a      	mov	r2, r7
 8005fc6:	2120      	movs	r1, #32
 8005fc8:	483a      	ldr	r0, [pc, #232]	; (80060b4 <main+0x67c>)
 8005fca:	f7fb fe1b 	bl	8001c04 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8005fce:	2064      	movs	r0, #100	; 0x64
 8005fd0:	f7fb f968 	bl	80012a4 <HAL_Delay>
        BSP_LCD_Clear(LCD_COLOR_WHITE);
 8005fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd8:	f7fa fdea 	bl	8000bb0 <BSP_LCD_Clear>
        HAL_Delay(100);
 8005fdc:	2064      	movs	r0, #100	; 0x64
 8005fde:	f7fb f961 	bl	80012a4 <HAL_Delay>
        BSP_LCD_DisplayStringAt(0,10,(uint8_t*)"TCP connection Closed", CENTER_MODE);
 8005fe2:	4643      	mov	r3, r8
 8005fe4:	4a34      	ldr	r2, [pc, #208]	; (80060b8 <main+0x680>)
 8005fe6:	210a      	movs	r1, #10
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f7fa ff7d 	bl	8000ee8 <BSP_LCD_DisplayStringAt>
 8005fee:	e794      	b.n	8005f1a <main+0x4e2>
        if (strstr(linBuff, "ready")) {
 8005ff0:	4932      	ldr	r1, [pc, #200]	; (80060bc <main+0x684>)
 8005ff2:	4f27      	ldr	r7, [pc, #156]	; (8006090 <main+0x658>)
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f001 f986 	bl	8007306 <strstr>
 8005ffa:	b178      	cbz	r0, 800601c <main+0x5e4>
          HAL_UART_Transmit(&huart1, (uint8_t*) "[i] ESP is alive\r\n", sizeof("[i] ESP is alive\r\n") - 1, 100);
 8005ffc:	2364      	movs	r3, #100	; 0x64
 8005ffe:	2212      	movs	r2, #18
 8006000:	492f      	ldr	r1, [pc, #188]	; (80060c0 <main+0x688>)
 8006002:	4814      	ldr	r0, [pc, #80]	; (8006054 <main+0x61c>)
 8006004:	f7fd ff70 	bl	8003ee8 <HAL_UART_Transmit>
          commandSent = false;
 8006008:	2300      	movs	r3, #0
          espAlive = true;    
 800600a:	4a20      	ldr	r2, [pc, #128]	; (800608c <main+0x654>)
          commandSent = false;
 800600c:	703b      	strb	r3, [r7, #0]
          resetLinBuff(linBuff, 100);
 800600e:	2164      	movs	r1, #100	; 0x64
          espAlive = true;    
 8006010:	2301      	movs	r3, #1
          resetLinBuff(linBuff, 100);
 8006012:	4620      	mov	r0, r4
          espAlive = true;    
 8006014:	7013      	strb	r3, [r2, #0]
          state = ESP_ALIVE;
 8006016:	702b      	strb	r3, [r5, #0]
          resetLinBuff(linBuff, 100);
 8006018:	f7ff fcf8 	bl	8005a0c <resetLinBuff>
        if (!commandSent && !espAlive) {
 800601c:	783b      	ldrb	r3, [r7, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f47f af47 	bne.w	8005eb2 <main+0x47a>
 8006024:	4b19      	ldr	r3, [pc, #100]	; (800608c <main+0x654>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f47f af42 	bne.w	8005eb2 <main+0x47a>
          resetEsp();
 800602e:	f7ff fb3b 	bl	80056a8 <resetEsp>
          commandSent = true;
 8006032:	2301      	movs	r3, #1
 8006034:	703b      	strb	r3, [r7, #0]
 8006036:	e73c      	b.n	8005eb2 <main+0x47a>
 8006038:	20000604 	.word	0x20000604
 800603c:	40010000 	.word	0x40010000
 8006040:	200006d8 	.word	0x200006d8
 8006044:	40001400 	.word	0x40001400
 8006048:	20000560 	.word	0x20000560
 800604c:	40005000 	.word	0x40005000
 8006050:	40011000 	.word	0x40011000
 8006054:	200005a4 	.word	0x200005a4
 8006058:	d0130000 	.word	0xd0130000
 800605c:	2000003c 	.word	0x2000003c
 8006060:	20000070 	.word	0x20000070
 8006064:	2000042c 	.word	0x2000042c
 8006068:	200005a0 	.word	0x200005a0
 800606c:	ff000080 	.word	0xff000080
 8006070:	080094d7 	.word	0x080094d7
 8006074:	20000434 	.word	0x20000434
 8006078:	20000071 	.word	0x20000071
 800607c:	080094e6 	.word	0x080094e6
 8006080:	200002b1 	.word	0x200002b1
 8006084:	080094f2 	.word	0x080094f2
 8006088:	08009509 	.word	0x08009509
 800608c:	200002a7 	.word	0x200002a7
 8006090:	200002a6 	.word	0x200002a6
 8006094:	08009533 	.word	0x08009533
 8006098:	08009543 	.word	0x08009543
 800609c:	0800954e 	.word	0x0800954e
 80060a0:	0800956b 	.word	0x0800956b
 80060a4:	0800957e 	.word	0x0800957e
 80060a8:	200002a4 	.word	0x200002a4
 80060ac:	08009585 	.word	0x08009585
 80060b0:	200002a8 	.word	0x200002a8
 80060b4:	40020000 	.word	0x40020000
 80060b8:	080095a2 	.word	0x080095a2
 80060bc:	080095b8 	.word	0x080095b8
 80060c0:	080095be 	.word	0x080095be
        if (strstr(linBuff, "+CWJAP:1")) {
 80060c4:	498c      	ldr	r1, [pc, #560]	; (80062f8 <main+0x8c0>)
 80060c6:	4d8d      	ldr	r5, [pc, #564]	; (80062fc <main+0x8c4>)
 80060c8:	4620      	mov	r0, r4
 80060ca:	f001 f91c 	bl	8007306 <strstr>
 80060ce:	4607      	mov	r7, r0
 80060d0:	b1b0      	cbz	r0, 8006100 <main+0x6c8>
          HAL_UART_Transmit(&huart1, (uint8_t*) "[!] err: Connection Timeout\r\n", sizeof("[!] err: Connection Timeout\r\n") - 1, 100);
 80060d2:	2364      	movs	r3, #100	; 0x64
 80060d4:	221d      	movs	r2, #29
 80060d6:	498a      	ldr	r1, [pc, #552]	; (8006300 <main+0x8c8>)
 80060d8:	488a      	ldr	r0, [pc, #552]	; (8006304 <main+0x8cc>)
 80060da:	f7fd ff05 	bl	8003ee8 <HAL_UART_Transmit>
          commandSent = false;
 80060de:	2300      	movs	r3, #0
 80060e0:	702b      	strb	r3, [r5, #0]
          resetLinBuff(linBuff, 100);
 80060e2:	2164      	movs	r1, #100	; 0x64
 80060e4:	4620      	mov	r0, r4
 80060e6:	f7ff fc91 	bl	8005a0c <resetLinBuff>
        if (!commandSent) {
 80060ea:	782b      	ldrb	r3, [r5, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f47f aee0 	bne.w	8005eb2 <main+0x47a>
          connectToWifi("testespap", "phumiphat123");
 80060f2:	4985      	ldr	r1, [pc, #532]	; (8006308 <main+0x8d0>)
 80060f4:	4885      	ldr	r0, [pc, #532]	; (800630c <main+0x8d4>)
 80060f6:	f7ff faef 	bl	80056d8 <connectToWifi>
          commandSent = true;
 80060fa:	2301      	movs	r3, #1
 80060fc:	702b      	strb	r3, [r5, #0]
    MX_USB_HOST_Process();
 80060fe:	e6d8      	b.n	8005eb2 <main+0x47a>
        else if (strstr(linBuff, "+CWJAP:2")) {
 8006100:	4983      	ldr	r1, [pc, #524]	; (8006310 <main+0x8d8>)
 8006102:	4620      	mov	r0, r4
 8006104:	f001 f8ff 	bl	8007306 <strstr>
 8006108:	4680      	mov	r8, r0
 800610a:	b138      	cbz	r0, 800611c <main+0x6e4>
          HAL_UART_Transmit(&huart1, (uint8_t*) "[!] err: Wrong Password\r\n", sizeof("[!] err: Wrong Password\r\n") - 1, 100);
 800610c:	4981      	ldr	r1, [pc, #516]	; (8006314 <main+0x8dc>)
 800610e:	2364      	movs	r3, #100	; 0x64
 8006110:	2219      	movs	r2, #25
          HAL_UART_Transmit(&huart1, (uint8_t*) "[!] err: Connection Failed\r\n", sizeof("[!] err: Connection Failed\r\n") - 1, 100);
 8006112:	487c      	ldr	r0, [pc, #496]	; (8006304 <main+0x8cc>)
 8006114:	f7fd fee8 	bl	8003ee8 <HAL_UART_Transmit>
          commandSent = false;
 8006118:	702f      	strb	r7, [r5, #0]
 800611a:	e7e2      	b.n	80060e2 <main+0x6aa>
        else if (strstr(linBuff, "+CWJAP:3")) {
 800611c:	497e      	ldr	r1, [pc, #504]	; (8006318 <main+0x8e0>)
 800611e:	4620      	mov	r0, r4
 8006120:	f001 f8f1 	bl	8007306 <strstr>
 8006124:	4607      	mov	r7, r0
 8006126:	b140      	cbz	r0, 800613a <main+0x702>
          HAL_UART_Transmit(&huart1, (uint8_t*) "[!] err: Target AP not found\r\n", sizeof("[!] err: Target AP not found\r\n") - 1, 100);
 8006128:	2364      	movs	r3, #100	; 0x64
 800612a:	221e      	movs	r2, #30
 800612c:	497b      	ldr	r1, [pc, #492]	; (800631c <main+0x8e4>)
 800612e:	4875      	ldr	r0, [pc, #468]	; (8006304 <main+0x8cc>)
 8006130:	f7fd feda 	bl	8003ee8 <HAL_UART_Transmit>
          commandSent = false;
 8006134:	f885 8000 	strb.w	r8, [r5]
 8006138:	e7d3      	b.n	80060e2 <main+0x6aa>
        else if (strstr(linBuff, "+CWJAP:4")) {
 800613a:	4979      	ldr	r1, [pc, #484]	; (8006320 <main+0x8e8>)
 800613c:	4620      	mov	r0, r4
 800613e:	f001 f8e2 	bl	8007306 <strstr>
 8006142:	2800      	cmp	r0, #0
 8006144:	d0d1      	beq.n	80060ea <main+0x6b2>
          HAL_UART_Transmit(&huart1, (uint8_t*) "[!] err: Connection Failed\r\n", sizeof("[!] err: Connection Failed\r\n") - 1, 100);
 8006146:	2364      	movs	r3, #100	; 0x64
 8006148:	221c      	movs	r2, #28
 800614a:	4976      	ldr	r1, [pc, #472]	; (8006324 <main+0x8ec>)
 800614c:	e7e1      	b.n	8006112 <main+0x6da>
          if (strstr(linBuff, "CONNECT")) {
 800614e:	4976      	ldr	r1, [pc, #472]	; (8006328 <main+0x8f0>)
 8006150:	4f6a      	ldr	r7, [pc, #424]	; (80062fc <main+0x8c4>)
 8006152:	4620      	mov	r0, r4
 8006154:	f001 f8d7 	bl	8007306 <strstr>
 8006158:	b320      	cbz	r0, 80061a4 <main+0x76c>
            HAL_UART_Transmit(&huart1, (uint8_t*) "[i] TCP connection established.\r\n", sizeof("[i] TCP connection established.\r\n") - 1, 100);
 800615a:	4974      	ldr	r1, [pc, #464]	; (800632c <main+0x8f4>)
 800615c:	4869      	ldr	r0, [pc, #420]	; (8006304 <main+0x8cc>)
 800615e:	2364      	movs	r3, #100	; 0x64
 8006160:	2221      	movs	r2, #33	; 0x21
 8006162:	f7fd fec1 	bl	8003ee8 <HAL_UART_Transmit>
            espAlive = true;
 8006166:	4b72      	ldr	r3, [pc, #456]	; (8006330 <main+0x8f8>)
 8006168:	2201      	movs	r2, #1
            commandSent = false;
 800616a:	f04f 0800 	mov.w	r8, #0
            state = TCP_CONNECTED;
 800616e:	f04f 0903 	mov.w	r9, #3
            HAL_Delay(100);
 8006172:	2064      	movs	r0, #100	; 0x64
            espAlive = true;
 8006174:	701a      	strb	r2, [r3, #0]
            commandSent = false;
 8006176:	f887 8000 	strb.w	r8, [r7]
            state = TCP_CONNECTED;
 800617a:	f885 9000 	strb.w	r9, [r5]
            HAL_Delay(100);
 800617e:	f7fb f891 	bl	80012a4 <HAL_Delay>
            BSP_LCD_Clear(LCD_COLOR_WHITE);
 8006182:	f04f 30ff 	mov.w	r0, #4294967295
 8006186:	f7fa fd13 	bl	8000bb0 <BSP_LCD_Clear>
            HAL_Delay(100);
 800618a:	2064      	movs	r0, #100	; 0x64
 800618c:	f7fb f88a 	bl	80012a4 <HAL_Delay>
            BSP_LCD_DisplayStringAt(0,0,(uint8_t*)"TCP connected",LEFT_MODE);
 8006190:	4641      	mov	r1, r8
 8006192:	4640      	mov	r0, r8
 8006194:	464b      	mov	r3, r9
 8006196:	4a67      	ldr	r2, [pc, #412]	; (8006334 <main+0x8fc>)
 8006198:	f7fa fea6 	bl	8000ee8 <BSP_LCD_DisplayStringAt>
            resetLinBuff(linBuff, 100);
 800619c:	2164      	movs	r1, #100	; 0x64
 800619e:	4620      	mov	r0, r4
 80061a0:	f7ff fc34 	bl	8005a0c <resetLinBuff>
        if (!commandSent && state == WIFI_CONNECTED && (publishReq || subscribeReq ||unsuccess)) {
 80061a4:	783b      	ldrb	r3, [r7, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f47f ae83 	bne.w	8005eb2 <main+0x47a>
 80061ac:	782b      	ldrb	r3, [r5, #0]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	f47f ae7f 	bne.w	8005eb2 <main+0x47a>
 80061b4:	4b60      	ldr	r3, [pc, #384]	; (8006338 <main+0x900>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	b933      	cbnz	r3, 80061c8 <main+0x790>
 80061ba:	7833      	ldrb	r3, [r6, #0]
 80061bc:	b923      	cbnz	r3, 80061c8 <main+0x790>
 80061be:	4b5f      	ldr	r3, [pc, #380]	; (800633c <main+0x904>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f43f ae75 	beq.w	8005eb2 <main+0x47a>
          HAL_Delay(1000);
 80061c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061cc:	f7fb f86a 	bl	80012a4 <HAL_Delay>
          connectToTCP("postman.cloudmqtt.com", "16001", "7200");
 80061d0:	4a5b      	ldr	r2, [pc, #364]	; (8006340 <main+0x908>)
 80061d2:	495c      	ldr	r1, [pc, #368]	; (8006344 <main+0x90c>)
 80061d4:	485c      	ldr	r0, [pc, #368]	; (8006348 <main+0x910>)
 80061d6:	f7ff fadf 	bl	8005798 <connectToTCP>
 80061da:	e72a      	b.n	8006032 <main+0x5fa>
        char mqttSuccessLoginMsg[] = {0x20, 0x02, 0x00, 0x00};
 80061dc:	4b5b      	ldr	r3, [pc, #364]	; (800634c <main+0x914>)
        if(mqttLogin){
 80061de:	4f5c      	ldr	r7, [pc, #368]	; (8006350 <main+0x918>)
        char mqttSuccessLoginMsg[] = {0x20, 0x02, 0x00, 0x00};
 80061e0:	6818      	ldr	r0, [r3, #0]
        if(mqttLogin){
 80061e2:	783b      	ldrb	r3, [r7, #0]
        char mqttSuccessLoginMsg[] = {0x20, 0x02, 0x00, 0x00};
 80061e4:	9009      	str	r0, [sp, #36]	; 0x24
 80061e6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80062fc <main+0x8c4>
        if(mqttLogin){
 80061ea:	b1e3      	cbz	r3, 8006226 <main+0x7ee>
          if(alreadyConnect == false){
 80061ec:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8006378 <main+0x940>
 80061f0:	f899 3000 	ldrb.w	r3, [r9]
 80061f4:	b92b      	cbnz	r3, 8006202 <main+0x7ca>
            HAL_UART_Transmit(&huart1,(uint8_t*)"Waiting for command.\r\n",sizeof("Waiting for command\r\n"),100);
 80061f6:	2364      	movs	r3, #100	; 0x64
 80061f8:	2216      	movs	r2, #22
 80061fa:	4956      	ldr	r1, [pc, #344]	; (8006354 <main+0x91c>)
 80061fc:	4841      	ldr	r0, [pc, #260]	; (8006304 <main+0x8cc>)
 80061fe:	f7fd fe73 	bl	8003ee8 <HAL_UART_Transmit>
          alreadyConnect = true;
 8006202:	2301      	movs	r3, #1
 8006204:	f889 3000 	strb.w	r3, [r9]
          if (subscribeReq) {
 8006208:	7833      	ldrb	r3, [r6, #0]
 800620a:	b153      	cbz	r3, 8006222 <main+0x7ea>
            alreadyConnect = false;
 800620c:	2300      	movs	r3, #0
 800620e:	f889 3000 	strb.w	r3, [r9]
            state = SUBSCRIBER;
 8006212:	2306      	movs	r3, #6
 8006214:	702b      	strb	r3, [r5, #0]
            HAL_UART_Transmit(&huart1, (uint8_t*) "[i] SUBSCRIBER state entered.\r\n", sizeof("[i] SUBSCRIBER state entered.\r\n") - 1, 100);
 8006216:	221f      	movs	r2, #31
 8006218:	2364      	movs	r3, #100	; 0x64
 800621a:	494f      	ldr	r1, [pc, #316]	; (8006358 <main+0x920>)
 800621c:	4839      	ldr	r0, [pc, #228]	; (8006304 <main+0x8cc>)
 800621e:	f7fd fe63 	bl	8003ee8 <HAL_UART_Transmit>
        if (!mqttLogin && strstr(linBuff, mqttSuccessLoginMsg)) {
 8006222:	783b      	ldrb	r3, [r7, #0]
 8006224:	bb33      	cbnz	r3, 8006274 <main+0x83c>
 8006226:	a909      	add	r1, sp, #36	; 0x24
 8006228:	4620      	mov	r0, r4
 800622a:	f001 f86c 	bl	8007306 <strstr>
 800622e:	b308      	cbz	r0, 8006274 <main+0x83c>
          HAL_UART_Transmit(&huart1, (uint8_t*) "[i] Successfully login to mqtt server.\r\n", sizeof("[i] Successfully login to mqtt server.\r\n") - 1, 100);
 8006230:	2364      	movs	r3, #100	; 0x64
 8006232:	2228      	movs	r2, #40	; 0x28
 8006234:	4949      	ldr	r1, [pc, #292]	; (800635c <main+0x924>)
 8006236:	4833      	ldr	r0, [pc, #204]	; (8006304 <main+0x8cc>)
 8006238:	f7fd fe56 	bl	8003ee8 <HAL_UART_Transmit>
          commandSent = false;
 800623c:	2300      	movs	r3, #0
 800623e:	f888 3000 	strb.w	r3, [r8]
          mqttLogin = true;
 8006242:	2301      	movs	r3, #1
 8006244:	703b      	strb	r3, [r7, #0]
          if (subscribeReq) {
 8006246:	7833      	ldrb	r3, [r6, #0]
 8006248:	b143      	cbz	r3, 800625c <main+0x824>
            state = SUBSCRIBER;
 800624a:	2306      	movs	r3, #6
            HAL_UART_Transmit(&huart1, (uint8_t*) "[i] SUBSCRIBER state entered.\r\n", sizeof("[i] SUBSCRIBER state entered.\r\n") - 1, 100);
 800624c:	4942      	ldr	r1, [pc, #264]	; (8006358 <main+0x920>)
            state = SUBSCRIBER;
 800624e:	702b      	strb	r3, [r5, #0]
            HAL_UART_Transmit(&huart1, (uint8_t*) "[i] SUBSCRIBER state entered.\r\n", sizeof("[i] SUBSCRIBER state entered.\r\n") - 1, 100);
 8006250:	221f      	movs	r2, #31
 8006252:	2364      	movs	r3, #100	; 0x64
            HAL_UART_Transmit(&huart1, (uint8_t*) "[i] PUBLISHER state entered.\r\n", sizeof("[i] PUBLISHER state entered.\r\n") - 1, 100);
 8006254:	482b      	ldr	r0, [pc, #172]	; (8006304 <main+0x8cc>)
 8006256:	f7fd fe47 	bl	8003ee8 <HAL_UART_Transmit>
 800625a:	e004      	b.n	8006266 <main+0x82e>
          else if(unsuccess){
 800625c:	4b37      	ldr	r3, [pc, #220]	; (800633c <main+0x904>)
 800625e:	781a      	ldrb	r2, [r3, #0]
 8006260:	2305      	movs	r3, #5
            state = PUBLISHER;
 8006262:	702b      	strb	r3, [r5, #0]
          else if(unsuccess){
 8006264:	b342      	cbz	r2, 80062b8 <main+0x880>
          pos = 0;
 8006266:	4b3e      	ldr	r3, [pc, #248]	; (8006360 <main+0x928>)
 8006268:	2200      	movs	r2, #0
          resetLinBuff(linBuff, 100);
 800626a:	2164      	movs	r1, #100	; 0x64
 800626c:	4620      	mov	r0, r4
          pos = 0;
 800626e:	601a      	str	r2, [r3, #0]
          resetLinBuff(linBuff, 100);
 8006270:	f7ff fbcc 	bl	8005a0c <resetLinBuff>
        if (!commandSent && !mqttLogin) {
 8006274:	f898 3000 	ldrb.w	r3, [r8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	f47f ae1a 	bne.w	8005eb2 <main+0x47a>
 800627e:	783b      	ldrb	r3, [r7, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	f47f ae16 	bne.w	8005eb2 <main+0x47a>
          char mqttLogin[] = { 0x10, 0x27, 0x00,0x04, 0x4D, 0x51, 0x54, 0x54, 0x04, 0xC2, 0x00, 0x3C, 0x00, 0x03,
 8006286:	4b37      	ldr	r3, [pc, #220]	; (8006364 <main+0x92c>)
 8006288:	aa0b      	add	r2, sp, #44	; 0x2c
 800628a:	f103 0728 	add.w	r7, r3, #40	; 0x28
 800628e:	6818      	ldr	r0, [r3, #0]
 8006290:	6859      	ldr	r1, [r3, #4]
 8006292:	4615      	mov	r5, r2
 8006294:	c503      	stmia	r5!, {r0, r1}
 8006296:	3308      	adds	r3, #8
 8006298:	42bb      	cmp	r3, r7
 800629a:	462a      	mov	r2, r5
 800629c:	d1f7      	bne.n	800628e <main+0x856>
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	702b      	strb	r3, [r5, #0]
          tcpSendDataRequest("41");
 80062a2:	4831      	ldr	r0, [pc, #196]	; (8006368 <main+0x930>)
 80062a4:	f7ff fae2 	bl	800586c <tcpSendDataRequest>
          tcpSendData(mqttLogin, 41);
 80062a8:	2129      	movs	r1, #41	; 0x29
 80062aa:	a80b      	add	r0, sp, #44	; 0x2c
 80062ac:	f7ff fb10 	bl	80058d0 <tcpSendData>
          commandSent = true;
 80062b0:	2301      	movs	r3, #1
 80062b2:	f888 3000 	strb.w	r3, [r8]
 80062b6:	e5fc      	b.n	8005eb2 <main+0x47a>
            HAL_UART_Transmit(&huart1, (uint8_t*) "[i] PUBLISHER state entered.\r\n", sizeof("[i] PUBLISHER state entered.\r\n") - 1, 100);
 80062b8:	2364      	movs	r3, #100	; 0x64
 80062ba:	221e      	movs	r2, #30
 80062bc:	492b      	ldr	r1, [pc, #172]	; (800636c <main+0x934>)
 80062be:	e7c9      	b.n	8006254 <main+0x81c>
        if (strstr(linBuff, "OK")) {
 80062c0:	492b      	ldr	r1, [pc, #172]	; (8006370 <main+0x938>)
 80062c2:	4f0e      	ldr	r7, [pc, #56]	; (80062fc <main+0x8c4>)
 80062c4:	4620      	mov	r0, r4
 80062c6:	f001 f81e 	bl	8007306 <strstr>
 80062ca:	b168      	cbz	r0, 80062e8 <main+0x8b0>
          HAL_UART_Transmit(&huart1, (uint8_t*) "[i] Successfully disconnected from an AP.\r\n", sizeof("[i] Successfully disconnected from an AP.\r\n") - 1, 100);
 80062cc:	2364      	movs	r3, #100	; 0x64
 80062ce:	4929      	ldr	r1, [pc, #164]	; (8006374 <main+0x93c>)
 80062d0:	480c      	ldr	r0, [pc, #48]	; (8006304 <main+0x8cc>)
 80062d2:	222b      	movs	r2, #43	; 0x2b
 80062d4:	f7fd fe08 	bl	8003ee8 <HAL_UART_Transmit>
          commandSent = false;
 80062d8:	2300      	movs	r3, #0
 80062da:	703b      	strb	r3, [r7, #0]
          resetLinBuff(linBuff, 100);
 80062dc:	2164      	movs	r1, #100	; 0x64
          state = ESP_ALIVE;
 80062de:	2301      	movs	r3, #1
          resetLinBuff(linBuff, 100);
 80062e0:	4620      	mov	r0, r4
          state = ESP_ALIVE;
 80062e2:	702b      	strb	r3, [r5, #0]
          resetLinBuff(linBuff, 100);
 80062e4:	f7ff fb92 	bl	8005a0c <resetLinBuff>
        if(!commandSent) {
 80062e8:	783b      	ldrb	r3, [r7, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f47f ade1 	bne.w	8005eb2 <main+0x47a>
          disconnectWifi();
 80062f0:	f7ff fa3a 	bl	8005768 <disconnectWifi>
 80062f4:	e69d      	b.n	8006032 <main+0x5fa>
 80062f6:	bf00      	nop
 80062f8:	080095d1 	.word	0x080095d1
 80062fc:	200002a6 	.word	0x200002a6
 8006300:	080095da 	.word	0x080095da
 8006304:	200005a4 	.word	0x200005a4
 8006308:	08009669 	.word	0x08009669
 800630c:	08009676 	.word	0x08009676
 8006310:	080095f8 	.word	0x080095f8
 8006314:	08009601 	.word	0x08009601
 8006318:	0800961b 	.word	0x0800961b
 800631c:	08009624 	.word	0x08009624
 8006320:	08009643 	.word	0x08009643
 8006324:	0800964c 	.word	0x0800964c
 8006328:	08009546 	.word	0x08009546
 800632c:	08009680 	.word	0x08009680
 8006330:	200002a7 	.word	0x200002a7
 8006334:	080096a2 	.word	0x080096a2
 8006338:	200002b0 	.word	0x200002b0
 800633c:	200002b2 	.word	0x200002b2
 8006340:	080096b0 	.word	0x080096b0
 8006344:	080096b5 	.word	0x080096b5
 8006348:	080096bb 	.word	0x080096bb
 800634c:	0800747c 	.word	0x0800747c
 8006350:	200002a8 	.word	0x200002a8
 8006354:	080096d1 	.word	0x080096d1
 8006358:	080096e8 	.word	0x080096e8
 800635c:	08009708 	.word	0x08009708
 8006360:	200002ac 	.word	0x200002ac
 8006364:	08007480 	.word	0x08007480
 8006368:	08009750 	.word	0x08009750
 800636c:	08009731 	.word	0x08009731
 8006370:	08009753 	.word	0x08009753
 8006374:	08009756 	.word	0x08009756
 8006378:	200002a5 	.word	0x200002a5
        char mqttSuccessSubscribe[] = { 0x90, 0x03, 0x00, 0x01, 0x01 };
 800637c:	4b96      	ldr	r3, [pc, #600]	; (80065d8 <main+0xba0>)
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	791b      	ldrb	r3, [r3, #4]
 8006382:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        if (subscribeReq && mqttLogin && strstr(linBuff, mqttSuccessSubscribe)) {
 8006386:	7833      	ldrb	r3, [r6, #0]
        char mqttSuccessSubscribe[] = { 0x90, 0x03, 0x00, 0x01, 0x01 };
 8006388:	9009      	str	r0, [sp, #36]	; 0x24
        if (subscribeReq && mqttLogin && strstr(linBuff, mqttSuccessSubscribe)) {
 800638a:	b3a3      	cbz	r3, 80063f6 <main+0x9be>
 800638c:	4b93      	ldr	r3, [pc, #588]	; (80065dc <main+0xba4>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	b38b      	cbz	r3, 80063f6 <main+0x9be>
 8006392:	a909      	add	r1, sp, #36	; 0x24
 8006394:	4620      	mov	r0, r4
 8006396:	f000 ffb6 	bl	8007306 <strstr>
 800639a:	b360      	cbz	r0, 80063f6 <main+0x9be>
          HAL_UART_Transmit(&huart1, (uint8_t*) "[i] Successfully subscribe to a message.\r\n", sizeof("[i] Successfully subscribe to a message.\r\n") - 1, 100);
 800639c:	2364      	movs	r3, #100	; 0x64
 800639e:	222a      	movs	r2, #42	; 0x2a
 80063a0:	498f      	ldr	r1, [pc, #572]	; (80065e0 <main+0xba8>)
 80063a2:	4890      	ldr	r0, [pc, #576]	; (80065e4 <main+0xbac>)
 80063a4:	f7fd fda0 	bl	8003ee8 <HAL_UART_Transmit>
          commandSent = false;
 80063a8:	4b8f      	ldr	r3, [pc, #572]	; (80065e8 <main+0xbb0>)
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80063aa:	4890      	ldr	r0, [pc, #576]	; (80065ec <main+0xbb4>)
          subscribeReq = false;
 80063ac:	2700      	movs	r7, #0
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80063ae:	2201      	movs	r2, #1
 80063b0:	2120      	movs	r1, #32
          commandSent = false;
 80063b2:	701f      	strb	r7, [r3, #0]
          state = SUBSCRIBER;
 80063b4:	2306      	movs	r3, #6
 80063b6:	702b      	strb	r3, [r5, #0]
          subscribeReq = false;
 80063b8:	7037      	strb	r7, [r6, #0]
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80063ba:	f7fb fc23 	bl	8001c04 <HAL_GPIO_WritePin>
          HAL_Delay(100);
 80063be:	2064      	movs	r0, #100	; 0x64
 80063c0:	f7fa ff70 	bl	80012a4 <HAL_Delay>
          BSP_LCD_Clear(LCD_COLOR_WHITE);
 80063c4:	f04f 30ff 	mov.w	r0, #4294967295
 80063c8:	f7fa fbf2 	bl	8000bb0 <BSP_LCD_Clear>
          HAL_Delay(100);
 80063cc:	2064      	movs	r0, #100	; 0x64
 80063ce:	f7fa ff69 	bl	80012a4 <HAL_Delay>
          BSP_LCD_DisplayStringAt(0,20,(uint8_t*)"Subcribed to a",LEFT_MODE);
 80063d2:	2303      	movs	r3, #3
 80063d4:	4a86      	ldr	r2, [pc, #536]	; (80065f0 <main+0xbb8>)
 80063d6:	2114      	movs	r1, #20
 80063d8:	4638      	mov	r0, r7
 80063da:	f7fa fd85 	bl	8000ee8 <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(0,40,(uint8_t*)"Message",LEFT_MODE);
 80063de:	2303      	movs	r3, #3
 80063e0:	2128      	movs	r1, #40	; 0x28
 80063e2:	4638      	mov	r0, r7
 80063e4:	4a83      	ldr	r2, [pc, #524]	; (80065f4 <main+0xbbc>)
 80063e6:	f7fa fd7f 	bl	8000ee8 <BSP_LCD_DisplayStringAt>
          pos = 0;
 80063ea:	4b83      	ldr	r3, [pc, #524]	; (80065f8 <main+0xbc0>)
          resetLinBuff(linBuff, 100);
 80063ec:	2164      	movs	r1, #100	; 0x64
 80063ee:	4620      	mov	r0, r4
          pos = 0;
 80063f0:	601f      	str	r7, [r3, #0]
          resetLinBuff(linBuff, 100);
 80063f2:	f7ff fb0b 	bl	8005a0c <resetLinBuff>
        if (!subscribeReq && strstr(linBuff, "+IPD,")) {
 80063f6:	7833      	ldrb	r3, [r6, #0]
 80063f8:	b1e3      	cbz	r3, 8006434 <main+0x9fc>
        if (!commandSent && mqttLogin && subscribeReq) {
 80063fa:	4d7b      	ldr	r5, [pc, #492]	; (80065e8 <main+0xbb0>)
 80063fc:	782b      	ldrb	r3, [r5, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f47f ad57 	bne.w	8005eb2 <main+0x47a>
 8006404:	4b75      	ldr	r3, [pc, #468]	; (80065dc <main+0xba4>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	f43f ad52 	beq.w	8005eb2 <main+0x47a>
 800640e:	7833      	ldrb	r3, [r6, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	f43f ad4e 	beq.w	8005eb2 <main+0x47a>
          char subFoo[10] = { 0x82, 0x08, 0x00, 0x01, 0x00, 0x03, 0x66, 0x6F, 0x6F, 0x01 };
 8006416:	4a79      	ldr	r2, [pc, #484]	; (80065fc <main+0xbc4>)
 8006418:	6810      	ldr	r0, [r2, #0]
 800641a:	6851      	ldr	r1, [r2, #4]
 800641c:	8912      	ldrh	r2, [r2, #8]
 800641e:	ab0b      	add	r3, sp, #44	; 0x2c
 8006420:	c303      	stmia	r3!, {r0, r1}
          tcpSendDataRequest("10");
 8006422:	4877      	ldr	r0, [pc, #476]	; (8006600 <main+0xbc8>)
          char subFoo[10] = { 0x82, 0x08, 0x00, 0x01, 0x00, 0x03, 0x66, 0x6F, 0x6F, 0x01 };
 8006424:	801a      	strh	r2, [r3, #0]
          tcpSendDataRequest("10");
 8006426:	f7ff fa21 	bl	800586c <tcpSendDataRequest>
          tcpSendData(subFoo, 10);
 800642a:	210a      	movs	r1, #10
 800642c:	a80b      	add	r0, sp, #44	; 0x2c
 800642e:	f7ff fa4f 	bl	80058d0 <tcpSendData>
 8006432:	e662      	b.n	80060fa <main+0x6c2>
        if (!subscribeReq && strstr(linBuff, "+IPD,")) {
 8006434:	4973      	ldr	r1, [pc, #460]	; (8006604 <main+0xbcc>)
 8006436:	4620      	mov	r0, r4
 8006438:	f000 ff65 	bl	8007306 <strstr>
 800643c:	2800      	cmp	r0, #0
 800643e:	d0dc      	beq.n	80063fa <main+0x9c2>
          HAL_Delay(100); // delay to wait for data to be loaded into linBuff
 8006440:	2064      	movs	r0, #100	; 0x64
 8006442:	f7fa ff2f 	bl	80012a4 <HAL_Delay>
          sanitizeLinBuff(linBuff, 100);
 8006446:	2164      	movs	r1, #100	; 0x64
 8006448:	4620      	mov	r0, r4
 800644a:	f7ff fae9 	bl	8005a20 <sanitizeLinBuff>
          char *ptrTopic = strstr(linBuff, "foo");
 800644e:	496e      	ldr	r1, [pc, #440]	; (8006608 <main+0xbd0>)
 8006450:	4620      	mov	r0, r4
 8006452:	f000 ff58 	bl	8007306 <strstr>
          int position = ptrTopic - linBuff;
 8006456:	1b07      	subs	r7, r0, r4
          if (ptrTopic) {
 8006458:	bb88      	cbnz	r0, 80064be <main+0xa86>
          HAL_UART_Transmit(&huart1, (uint8_t*) "\r\n", 2, 100);
 800645a:	2364      	movs	r3, #100	; 0x64
 800645c:	2202      	movs	r2, #2
 800645e:	496b      	ldr	r1, [pc, #428]	; (800660c <main+0xbd4>)
 8006460:	4860      	ldr	r0, [pc, #384]	; (80065e4 <main+0xbac>)
          if (lcdDataBuff[0] == '1') {
 8006462:	4f6b      	ldr	r7, [pc, #428]	; (8006610 <main+0xbd8>)
          HAL_UART_Transmit(&huart1, (uint8_t*) "\r\n", 2, 100);
 8006464:	f7fd fd40 	bl	8003ee8 <HAL_UART_Transmit>
         BSP_LCD_Clear(LCD_COLOR_WHITE);
 8006468:	f04f 30ff 	mov.w	r0, #4294967295
 800646c:	f7fa fba0 	bl	8000bb0 <BSP_LCD_Clear>
          if (lcdDataBuff[0] == '1') {
 8006470:	783b      	ldrb	r3, [r7, #0]
 8006472:	2b31      	cmp	r3, #49	; 0x31
 8006474:	d13b      	bne.n	80064ee <main+0xab6>
            HAL_Delay(100);
 8006476:	2064      	movs	r0, #100	; 0x64
 8006478:	f7fa ff14 	bl	80012a4 <HAL_Delay>
            BSP_LCD_Clear(LCD_COLOR_WHITE);
 800647c:	f04f 30ff 	mov.w	r0, #4294967295
 8006480:	f7fa fb96 	bl	8000bb0 <BSP_LCD_Clear>
            HAL_Delay(100);
 8006484:	2064      	movs	r0, #100	; 0x64
 8006486:	f7fa ff0d 	bl	80012a4 <HAL_Delay>
            BSP_LCD_DisplayStringAt(0,20,(uint8_t*)"ISO14443A",LEFT_MODE);
 800648a:	4a62      	ldr	r2, [pc, #392]	; (8006614 <main+0xbdc>)
 800648c:	2303      	movs	r3, #3
            BSP_LCD_DisplayStringAt(0,20,(uint8_t*)"ISO15693",LEFT_MODE);
 800648e:	2114      	movs	r1, #20
 8006490:	2000      	movs	r0, #0
 8006492:	f7fa fd29 	bl	8000ee8 <BSP_LCD_DisplayStringAt>
            BSP_LCD_DisplayStringAt(0,40,lcdDataBuff,LEFT_MODE);
 8006496:	2303      	movs	r3, #3
 8006498:	463a      	mov	r2, r7
            BSP_LCD_DisplayStringAt(0,40,(uint8_t*)"Detected",LEFT_MODE);
 800649a:	2128      	movs	r1, #40	; 0x28
 800649c:	2000      	movs	r0, #0
 800649e:	f7fa fd23 	bl	8000ee8 <BSP_LCD_DisplayStringAt>
          pos = 0;
 80064a2:	4b55      	ldr	r3, [pc, #340]	; (80065f8 <main+0xbc0>)
 80064a4:	2500      	movs	r5, #0
          resetLinBuff(linBuff, 100);
 80064a6:	2164      	movs	r1, #100	; 0x64
 80064a8:	4620      	mov	r0, r4
          pos = 0;
 80064aa:	601d      	str	r5, [r3, #0]
          resetLinBuff(linBuff, 100);
 80064ac:	f7ff faae 	bl	8005a0c <resetLinBuff>
          for(int i = 0;i<32;i++){
 80064b0:	462b      	mov	r3, r5
            lcdDataBuff[i] = '\0';
 80064b2:	462a      	mov	r2, r5
 80064b4:	54fa      	strb	r2, [r7, r3]
          for(int i = 0;i<32;i++){
 80064b6:	3301      	adds	r3, #1
 80064b8:	2b20      	cmp	r3, #32
 80064ba:	d1fb      	bne.n	80064b4 <main+0xa7c>
 80064bc:	e79d      	b.n	80063fa <main+0x9c2>
              HAL_UART_Transmit(&huart1, (uint8_t*) &linBuff[i], 1, 100);
 80064be:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80065e4 <main+0xbac>
                lcdDataBuff[i-position-3] = linBuff[i]; // add UID to lcd data buffer
 80064c2:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8006610 <main+0xbd8>
            for (int i = position + 3; i < 100; ++i) {
 80064c6:	1cfd      	adds	r5, r7, #3
 80064c8:	2d63      	cmp	r5, #99	; 0x63
 80064ca:	dcc6      	bgt.n	800645a <main+0xa22>
              HAL_UART_Transmit(&huart1, (uint8_t*) &linBuff[i], 1, 100);
 80064cc:	2364      	movs	r3, #100	; 0x64
 80064ce:	2201      	movs	r2, #1
 80064d0:	1961      	adds	r1, r4, r5
 80064d2:	4640      	mov	r0, r8
 80064d4:	f7fd fd08 	bl	8003ee8 <HAL_UART_Transmit>
              if (!(linBuff[i] == ' ')) {
 80064d8:	5d62      	ldrb	r2, [r4, r5]
 80064da:	2a20      	cmp	r2, #32
                lcdDataBuff[i-position-3] = linBuff[i]; // add UID to lcd data buffer
 80064dc:	bf1c      	itt	ne
 80064de:	1beb      	subne	r3, r5, r7
 80064e0:	444b      	addne	r3, r9
            for (int i = position + 3; i < 100; ++i) {
 80064e2:	f105 0501 	add.w	r5, r5, #1
                lcdDataBuff[i-position-3] = linBuff[i]; // add UID to lcd data buffer
 80064e6:	bf18      	it	ne
 80064e8:	f803 2c03 	strbne.w	r2, [r3, #-3]
 80064ec:	e7ec      	b.n	80064c8 <main+0xa90>
          else if (lcdDataBuff[0] == '2') {
 80064ee:	2b32      	cmp	r3, #50	; 0x32
            HAL_Delay(100);
 80064f0:	f04f 0064 	mov.w	r0, #100	; 0x64
          else if (lcdDataBuff[0] == '2') {
 80064f4:	d10b      	bne.n	800650e <main+0xad6>
            HAL_Delay(100);
 80064f6:	f7fa fed5 	bl	80012a4 <HAL_Delay>
            BSP_LCD_Clear(LCD_COLOR_WHITE);
 80064fa:	f04f 30ff 	mov.w	r0, #4294967295
 80064fe:	f7fa fb57 	bl	8000bb0 <BSP_LCD_Clear>
            HAL_Delay(100);
 8006502:	2064      	movs	r0, #100	; 0x64
 8006504:	f7fa fece 	bl	80012a4 <HAL_Delay>
            BSP_LCD_DisplayStringAt(0,20,(uint8_t*)"ISO14443B",LEFT_MODE);
 8006508:	2303      	movs	r3, #3
 800650a:	4a43      	ldr	r2, [pc, #268]	; (8006618 <main+0xbe0>)
 800650c:	e7bf      	b.n	800648e <main+0xa56>
          else if (lcdDataBuff[0] == '3') {
 800650e:	2b33      	cmp	r3, #51	; 0x33
 8006510:	d10b      	bne.n	800652a <main+0xaf2>
            HAL_Delay(100);
 8006512:	f7fa fec7 	bl	80012a4 <HAL_Delay>
            BSP_LCD_Clear(LCD_COLOR_WHITE);
 8006516:	f04f 30ff 	mov.w	r0, #4294967295
 800651a:	f7fa fb49 	bl	8000bb0 <BSP_LCD_Clear>
            HAL_Delay(100);
 800651e:	2064      	movs	r0, #100	; 0x64
 8006520:	f7fa fec0 	bl	80012a4 <HAL_Delay>
            BSP_LCD_DisplayStringAt(0,20,(uint8_t*)"ISO15693",LEFT_MODE);
 8006524:	2303      	movs	r3, #3
 8006526:	4a3d      	ldr	r2, [pc, #244]	; (800661c <main+0xbe4>)
 8006528:	e7b1      	b.n	800648e <main+0xa56>
            HAL_Delay(100);
 800652a:	f7fa febb 	bl	80012a4 <HAL_Delay>
            BSP_LCD_Clear(LCD_COLOR_WHITE);
 800652e:	f04f 30ff 	mov.w	r0, #4294967295
 8006532:	f7fa fb3d 	bl	8000bb0 <BSP_LCD_Clear>
            HAL_Delay(100);
 8006536:	2064      	movs	r0, #100	; 0x64
 8006538:	f7fa feb4 	bl	80012a4 <HAL_Delay>
            BSP_LCD_DisplayStringAt(0,20,(uint8_t*)"No Card",LEFT_MODE);
 800653c:	2303      	movs	r3, #3
 800653e:	4a38      	ldr	r2, [pc, #224]	; (8006620 <main+0xbe8>)
 8006540:	2114      	movs	r1, #20
 8006542:	2000      	movs	r0, #0
 8006544:	f7fa fcd0 	bl	8000ee8 <BSP_LCD_DisplayStringAt>
            BSP_LCD_DisplayStringAt(0,40,(uint8_t*)"Detected",LEFT_MODE);
 8006548:	2303      	movs	r3, #3
 800654a:	4a36      	ldr	r2, [pc, #216]	; (8006624 <main+0xbec>)
 800654c:	e7a5      	b.n	800649a <main+0xa62>
        if (strstr(linBuff,"OK") && commandSent){
 800654e:	4936      	ldr	r1, [pc, #216]	; (8006628 <main+0xbf0>)
 8006550:	4f36      	ldr	r7, [pc, #216]	; (800662c <main+0xbf4>)
 8006552:	4620      	mov	r0, r4
 8006554:	f000 fed7 	bl	8007306 <strstr>
 8006558:	b1d0      	cbz	r0, 8006590 <main+0xb58>
 800655a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80065e8 <main+0xbb0>
 800655e:	f898 3000 	ldrb.w	r3, [r8]
 8006562:	b1ab      	cbz	r3, 8006590 <main+0xb58>
          HAL_UART_Transmit(&huart1,(uint8_t*)"[i] TCP was closed.\r\n",sizeof("[i] TCP was closed.\r\n")-1,100);
 8006564:	2364      	movs	r3, #100	; 0x64
 8006566:	2215      	movs	r2, #21
 8006568:	4931      	ldr	r1, [pc, #196]	; (8006630 <main+0xbf8>)
 800656a:	481e      	ldr	r0, [pc, #120]	; (80065e4 <main+0xbac>)
 800656c:	f7fd fcbc 	bl	8003ee8 <HAL_UART_Transmit>
          publishReq = false;
 8006570:	4a30      	ldr	r2, [pc, #192]	; (8006634 <main+0xbfc>)
          ForceClose = false;
 8006572:	2300      	movs	r3, #0
          publishReq = false;
 8006574:	7013      	strb	r3, [r2, #0]
          mqttLogin = false;
 8006576:	4a19      	ldr	r2, [pc, #100]	; (80065dc <main+0xba4>)
          ForceClose = false;
 8006578:	703b      	strb	r3, [r7, #0]
          mqttLogin = false;
 800657a:	7013      	strb	r3, [r2, #0]
          state = WIFI_CONNECTED; //return to WIFI_CONNECTED state 
 800657c:	2202      	movs	r2, #2
 800657e:	702a      	strb	r2, [r5, #0]
          pos = 0;
 8006580:	4a1d      	ldr	r2, [pc, #116]	; (80065f8 <main+0xbc0>)
          commandSent = false;
 8006582:	f888 3000 	strb.w	r3, [r8]
          resetLinBuff(linBuff, 100);
 8006586:	2164      	movs	r1, #100	; 0x64
 8006588:	4620      	mov	r0, r4
          pos = 0;
 800658a:	6013      	str	r3, [r2, #0]
          resetLinBuff(linBuff, 100);
 800658c:	f7ff fa3e 	bl	8005a0c <resetLinBuff>
        if(ForceClose && !commandSent){ 
 8006590:	783b      	ldrb	r3, [r7, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	f43f ac8d 	beq.w	8005eb2 <main+0x47a>
 8006598:	4d13      	ldr	r5, [pc, #76]	; (80065e8 <main+0xbb0>)
 800659a:	782b      	ldrb	r3, [r5, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f47f ac88 	bne.w	8005eb2 <main+0x47a>
          closeTCP();
 80065a2:	f7ff f94b 	bl	800583c <closeTCP>
 80065a6:	e5a8      	b.n	80060fa <main+0x6c2>
    	  HAL_Delay(100);
 80065a8:	2064      	movs	r0, #100	; 0x64
 80065aa:	f7fa fe7b 	bl	80012a4 <HAL_Delay>
        BSP_LCD_Clear(LCD_COLOR_WHITE);
 80065ae:	f04f 30ff 	mov.w	r0, #4294967295
 80065b2:	f7fa fafd 	bl	8000bb0 <BSP_LCD_Clear>
        HAL_Delay(100);
 80065b6:	2064      	movs	r0, #100	; 0x64
 80065b8:	f7fa fe74 	bl	80012a4 <HAL_Delay>
        BSP_LCD_DisplayStringAt(0,0,(uint8_t*)"Subcribed to a",LEFT_MODE);
 80065bc:	2100      	movs	r1, #0
 80065be:	4608      	mov	r0, r1
 80065c0:	2303      	movs	r3, #3
 80065c2:	4a0b      	ldr	r2, [pc, #44]	; (80065f0 <main+0xbb8>)
 80065c4:	f7fa fc90 	bl	8000ee8 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0,20,(uint8_t*)"Message",LEFT_MODE);
 80065c8:	2303      	movs	r3, #3
 80065ca:	4a0a      	ldr	r2, [pc, #40]	; (80065f4 <main+0xbbc>)
 80065cc:	2114      	movs	r1, #20
 80065ce:	2000      	movs	r0, #0
 80065d0:	f7fa fc8a 	bl	8000ee8 <BSP_LCD_DisplayStringAt>
 80065d4:	e7fe      	b.n	80065d4 <main+0xb9c>
 80065d6:	bf00      	nop
 80065d8:	080074a9 	.word	0x080074a9
 80065dc:	200002a8 	.word	0x200002a8
 80065e0:	08009782 	.word	0x08009782
 80065e4:	200005a4 	.word	0x200005a4
 80065e8:	200002a6 	.word	0x200002a6
 80065ec:	40020000 	.word	0x40020000
 80065f0:	080097ad 	.word	0x080097ad
 80065f4:	080097bc 	.word	0x080097bc
 80065f8:	200002ac 	.word	0x200002ac
 80065fc:	080074ae 	.word	0x080074ae
 8006600:	080097fc 	.word	0x080097fc
 8006604:	080097c4 	.word	0x080097c4
 8006608:	080097ca 	.word	0x080097ca
 800660c:	08009443 	.word	0x08009443
 8006610:	20000644 	.word	0x20000644
 8006614:	080097ce 	.word	0x080097ce
 8006618:	080097d8 	.word	0x080097d8
 800661c:	080097e2 	.word	0x080097e2
 8006620:	080097eb 	.word	0x080097eb
 8006624:	080097f3 	.word	0x080097f3
 8006628:	08009753 	.word	0x08009753
 800662c:	200002a4 	.word	0x200002a4
 8006630:	080097ff 	.word	0x080097ff
 8006634:	200002b0 	.word	0x200002b0

08006638 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006638:	6802      	ldr	r2, [r0, #0]
 800663a:	4b03      	ldr	r3, [pc, #12]	; (8006648 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800663c:	429a      	cmp	r2, r3
 800663e:	d101      	bne.n	8006644 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8006640:	f7fa be1e 	b.w	8001280 <HAL_IncTick>
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	40001000 	.word	0x40001000

0800664c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800664c:	4770      	bx	lr

0800664e <addToBuff>:
    /*
        This function checks wether a buffer is full.
        If a buffer is full it returns true, otherwise false.
     */

    if (buff->count == buff->max) {
 800664e:	79c2      	ldrb	r2, [r0, #7]
 8006650:	7983      	ldrb	r3, [r0, #6]
 8006652:	429a      	cmp	r2, r3
 8006654:	d102      	bne.n	800665c <addToBuff+0xe>
        Returns -1 if the buffer is full, otherwise 0(successfully added an element).
     */

    // check if buffer is full
    if (buffIsFull(buff)) {
        return -1;
 8006656:	f04f 30ff 	mov.w	r0, #4294967295
 800665a:	4770      	bx	lr
    }

    uint8_t *ptr = buff->buffer + buff->head;
 800665c:	7903      	ldrb	r3, [r0, #4]
    *ptr = value;
 800665e:	6802      	ldr	r2, [r0, #0]
 8006660:	54d1      	strb	r1, [r2, r3]

    buff->head++;
    buff->count++;
 8006662:	79c2      	ldrb	r2, [r0, #7]
    buff->head++;
 8006664:	7903      	ldrb	r3, [r0, #4]
    buff->count++;
 8006666:	3201      	adds	r2, #1
    buff->head++;
 8006668:	3301      	adds	r3, #1
    buff->count++;
 800666a:	71c2      	strb	r2, [r0, #7]
    // check if buffer reaches its end
    if (buff->head == buff->max) {
 800666c:	7982      	ldrb	r2, [r0, #6]
    buff->head++;
 800666e:	b2db      	uxtb	r3, r3
    if (buff->head == buff->max) {
 8006670:	429a      	cmp	r2, r3
    buff->head++;
 8006672:	7103      	strb	r3, [r0, #4]
 8006674:	f04f 0300 	mov.w	r3, #0
    if (buff->head == buff->max) {
 8006678:	d100      	bne.n	800667c <addToBuff+0x2e>
        buff->head = 0;
 800667a:	7103      	strb	r3, [r0, #4]
    }

    return 0;
 800667c:	4618      	mov	r0, r3
}
 800667e:	4770      	bx	lr

08006680 <readBuff>:
        This function returns an element from a buffer if a buffer is not empty.
        If a buffer is empty it'll return -1.
     */

    // check if buffer is empty
    if (buff->count == 0) {
 8006680:	79c3      	ldrb	r3, [r0, #7]
 8006682:	b17b      	cbz	r3, 80066a4 <readBuff+0x24>
        return (uint8_t) 0; //cannot read buffer
    }

    // check if tail reaches the end of a buffer
    if (buff->tail == buff->max) {
 8006684:	7982      	ldrb	r2, [r0, #6]
 8006686:	7941      	ldrb	r1, [r0, #5]
 8006688:	4291      	cmp	r1, r2
        buff->tail = 0;
 800668a:	bf04      	itt	eq
 800668c:	2200      	moveq	r2, #0
 800668e:	7142      	strbeq	r2, [r0, #5]
    }

    buff->tail++;
 8006690:	7942      	ldrb	r2, [r0, #5]
 8006692:	3201      	adds	r2, #1
 8006694:	b2d2      	uxtb	r2, r2
    buff->count--;
 8006696:	3b01      	subs	r3, #1
 8006698:	71c3      	strb	r3, [r0, #7]
    buff->tail++;
 800669a:	7142      	strb	r2, [r0, #5]

    return buff->buffer + buff->tail - 1;
 800669c:	6800      	ldr	r0, [r0, #0]
 800669e:	1e53      	subs	r3, r2, #1
 80066a0:	4418      	add	r0, r3
 80066a2:	4770      	bx	lr
        return (uint8_t) 0; //cannot read buffer
 80066a4:	4618      	mov	r0, r3
}
 80066a6:	4770      	bx	lr

080066a8 <resetBuff>:
        This function set all positions in a buffer to zero and set all its properties to
        their initial values.
     */
    
    uint8_t *ptr = buff->buffer;
    for (int i = 0; i < buff->max; ++i) {
 80066a8:	2300      	movs	r3, #0
 80066aa:	461a      	mov	r2, r3
 80066ac:	7981      	ldrb	r1, [r0, #6]
 80066ae:	428b      	cmp	r3, r1
 80066b0:	db03      	blt.n	80066ba <resetBuff+0x12>
        ptr = buff->buffer + i;
        *ptr = 0;
    }

    buff->head = 0;
 80066b2:	7102      	strb	r2, [r0, #4]
    buff->tail = 0;
 80066b4:	7142      	strb	r2, [r0, #5]
    buff->count = 0;
 80066b6:	71c2      	strb	r2, [r0, #7]
 80066b8:	4770      	bx	lr
        *ptr = 0;
 80066ba:	6801      	ldr	r1, [r0, #0]
 80066bc:	54ca      	strb	r2, [r1, r3]
    for (int i = 0; i < buff->max; ++i) {
 80066be:	3301      	adds	r3, #1
 80066c0:	e7f4      	b.n	80066ac <resetBuff+0x4>

080066c2 <initRingBuff>:
    buff->buffer = ptr;
 80066c2:	6002      	str	r2, [r0, #0]
    buff->max = buff_size;
 80066c4:	7181      	strb	r1, [r0, #6]
    resetBuff(buff);
 80066c6:	f7ff bfef 	b.w	80066a8 <resetBuff>
	...

080066cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066cc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066ce:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <HAL_MspInit+0x34>)
 80066d0:	2100      	movs	r1, #0
 80066d2:	9100      	str	r1, [sp, #0]
 80066d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066da:	645a      	str	r2, [r3, #68]	; 0x44
 80066dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066de:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80066e2:	9200      	str	r2, [sp, #0]
 80066e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80066e6:	9101      	str	r1, [sp, #4]
 80066e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80066ee:	641a      	str	r2, [r3, #64]	; 0x40
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80066fa:	b002      	add	sp, #8
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40023800 	.word	0x40023800

08006704 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8006704:	6802      	ldr	r2, [r0, #0]
 8006706:	4b09      	ldr	r3, [pc, #36]	; (800672c <HAL_CRC_MspInit+0x28>)
 8006708:	429a      	cmp	r2, r3
{
 800670a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800670c:	d10b      	bne.n	8006726 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800670e:	2300      	movs	r3, #0
 8006710:	9301      	str	r3, [sp, #4]
 8006712:	4b07      	ldr	r3, [pc, #28]	; (8006730 <HAL_CRC_MspInit+0x2c>)
 8006714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006716:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800671a:	631a      	str	r2, [r3, #48]	; 0x30
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006722:	9301      	str	r3, [sp, #4]
 8006724:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8006726:	b002      	add	sp, #8
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	40023000 	.word	0x40023000
 8006730:	40023800 	.word	0x40023800

08006734 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8006734:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8006736:	4b0d      	ldr	r3, [pc, #52]	; (800676c <HAL_DMA2D_MspInit+0x38>)
 8006738:	6802      	ldr	r2, [r0, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d113      	bne.n	8006766 <HAL_DMA2D_MspInit+0x32>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800673e:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8006742:	2200      	movs	r2, #0
 8006744:	9201      	str	r2, [sp, #4]
 8006746:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006748:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800674c:	6319      	str	r1, [r3, #48]	; 0x30
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006754:	9301      	str	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8006756:	205a      	movs	r0, #90	; 0x5a
 8006758:	2105      	movs	r1, #5
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800675a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800675c:	f7fa fdc8 	bl	80012f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8006760:	205a      	movs	r0, #90	; 0x5a
 8006762:	f7fa fdf9 	bl	8001358 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8006766:	b003      	add	sp, #12
 8006768:	f85d fb04 	ldr.w	pc, [sp], #4
 800676c:	4002b000 	.word	0x4002b000

08006770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006774:	4604      	mov	r4, r0
 8006776:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006778:	2214      	movs	r2, #20
 800677a:	2100      	movs	r1, #0
 800677c:	a803      	add	r0, sp, #12
 800677e:	f000 fcef 	bl	8007160 <memset>
  if(hi2c->Instance==I2C3)
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	4b20      	ldr	r3, [pc, #128]	; (8006808 <HAL_I2C_MspInit+0x98>)
 8006786:	429a      	cmp	r2, r3
 8006788:	d13a      	bne.n	8006800 <HAL_I2C_MspInit+0x90>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800678a:	4c20      	ldr	r4, [pc, #128]	; (800680c <HAL_I2C_MspInit+0x9c>)
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800678c:	4820      	ldr	r0, [pc, #128]	; (8006810 <HAL_I2C_MspInit+0xa0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800678e:	2500      	movs	r5, #0
 8006790:	9500      	str	r5, [sp, #0]
 8006792:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006794:	f043 0304 	orr.w	r3, r3, #4
 8006798:	6323      	str	r3, [r4, #48]	; 0x30
 800679a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800679c:	f003 0304 	and.w	r3, r3, #4
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067a4:	9501      	str	r5, [sp, #4]
 80067a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067a8:	f043 0301 	orr.w	r3, r3, #1
 80067ac:	6323      	str	r3, [r4, #48]	; 0x30
 80067ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	9301      	str	r3, [sp, #4]
 80067b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80067b8:	f04f 0812 	mov.w	r8, #18
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80067bc:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067c0:	2701      	movs	r7, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80067c2:	2604      	movs	r6, #4
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80067c4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80067c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80067c8:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067cc:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80067ce:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80067d0:	f7fb f892 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80067d4:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80067d8:	a903      	add	r1, sp, #12
 80067da:	480e      	ldr	r0, [pc, #56]	; (8006814 <HAL_I2C_MspInit+0xa4>)
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80067dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80067de:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067e2:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067e4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80067e6:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80067e8:	f7fb f886 	bl	80018f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80067ec:	9502      	str	r5, [sp, #8]
 80067ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80067f4:	6423      	str	r3, [r4, #64]	; 0x40
 80067f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067fc:	9302      	str	r3, [sp, #8]
 80067fe:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006800:	b008      	add	sp, #32
 8006802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006806:	bf00      	nop
 8006808:	40005c00 	.word	0x40005c00
 800680c:	40023800 	.word	0x40023800
 8006810:	40020800 	.word	0x40020800
 8006814:	40020000 	.word	0x40020000

08006818 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8006818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800681a:	4604      	mov	r4, r0
 800681c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800681e:	2214      	movs	r2, #20
 8006820:	2100      	movs	r1, #0
 8006822:	a807      	add	r0, sp, #28
 8006824:	f000 fc9c 	bl	8007160 <memset>
  if(hltdc->Instance==LTDC)
 8006828:	6822      	ldr	r2, [r4, #0]
 800682a:	4b57      	ldr	r3, [pc, #348]	; (8006988 <HAL_LTDC_MspInit+0x170>)
 800682c:	429a      	cmp	r2, r3
 800682e:	f040 80a8 	bne.w	8006982 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006832:	2400      	movs	r4, #0
 8006834:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8006838:	9400      	str	r4, [sp, #0]
 800683a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = ENABLE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800683c:	4853      	ldr	r0, [pc, #332]	; (800698c <HAL_LTDC_MspInit+0x174>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800683e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006842:	645a      	str	r2, [r3, #68]	; 0x44
 8006844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006846:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800684a:	9200      	str	r2, [sp, #0]
 800684c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800684e:	9401      	str	r4, [sp, #4]
 8006850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006852:	f042 0220 	orr.w	r2, r2, #32
 8006856:	631a      	str	r2, [r3, #48]	; 0x30
 8006858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800685a:	f002 0220 	and.w	r2, r2, #32
 800685e:	9201      	str	r2, [sp, #4]
 8006860:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006862:	9402      	str	r4, [sp, #8]
 8006864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006866:	f042 0201 	orr.w	r2, r2, #1
 800686a:	631a      	str	r2, [r3, #48]	; 0x30
 800686c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800686e:	f002 0201 	and.w	r2, r2, #1
 8006872:	9202      	str	r2, [sp, #8]
 8006874:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006876:	9403      	str	r4, [sp, #12]
 8006878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800687a:	f042 0202 	orr.w	r2, r2, #2
 800687e:	631a      	str	r2, [r3, #48]	; 0x30
 8006880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006882:	f002 0202 	and.w	r2, r2, #2
 8006886:	9203      	str	r2, [sp, #12]
 8006888:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800688a:	9404      	str	r4, [sp, #16]
 800688c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800688e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006892:	631a      	str	r2, [r3, #48]	; 0x30
 8006894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006896:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800689a:	9204      	str	r2, [sp, #16]
 800689c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800689e:	9405      	str	r4, [sp, #20]
 80068a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068a2:	f042 0204 	orr.w	r2, r2, #4
 80068a6:	631a      	str	r2, [r3, #48]	; 0x30
 80068a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068aa:	f002 0204 	and.w	r2, r2, #4
 80068ae:	9205      	str	r2, [sp, #20]
 80068b0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80068b2:	9406      	str	r4, [sp, #24]
 80068b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068b6:	f042 0208 	orr.w	r2, r2, #8
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068c4:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80068c6:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80068c8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068ca:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80068cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80068d0:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80068d2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80068d4:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80068d6:	f7fb f80f 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 80068da:	f641 0358 	movw	r3, #6232	; 0x1858
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068de:	a907      	add	r1, sp, #28
 80068e0:	482b      	ldr	r0, [pc, #172]	; (8006990 <HAL_LTDC_MspInit+0x178>)
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 80068e2:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80068e4:	2709      	movs	r7, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068e6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068ea:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80068ec:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068ee:	f7fb f803 	bl	80018f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80068f2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068f4:	a907      	add	r1, sp, #28
 80068f6:	4827      	ldr	r0, [pc, #156]	; (8006994 <HAL_LTDC_MspInit+0x17c>)
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80068f8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068fa:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068fc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068fe:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006900:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006902:	f7fa fff9 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8006906:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800690a:	a907      	add	r1, sp, #28
 800690c:	4821      	ldr	r0, [pc, #132]	; (8006994 <HAL_LTDC_MspInit+0x17c>)
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800690e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006910:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006912:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006914:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006916:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006918:	f7fa ffee 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800691c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006920:	a907      	add	r1, sp, #28
 8006922:	481d      	ldr	r0, [pc, #116]	; (8006998 <HAL_LTDC_MspInit+0x180>)
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8006924:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006926:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006928:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800692a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800692c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800692e:	f7fa ffe3 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8006932:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006936:	a907      	add	r1, sp, #28
 8006938:	4818      	ldr	r0, [pc, #96]	; (800699c <HAL_LTDC_MspInit+0x184>)
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800693a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800693e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006940:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006942:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006944:	f7fa ffd8 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8006948:	2348      	movs	r3, #72	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800694a:	a907      	add	r1, sp, #28
 800694c:	4814      	ldr	r0, [pc, #80]	; (80069a0 <HAL_LTDC_MspInit+0x188>)
    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800694e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006950:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006952:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006954:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006956:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006958:	f7fa ffce 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800695c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006960:	a907      	add	r1, sp, #28
 8006962:	480d      	ldr	r0, [pc, #52]	; (8006998 <HAL_LTDC_MspInit+0x180>)
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8006964:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006966:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006968:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800696a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800696c:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800696e:	f7fa ffc3 	bl	80018f8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8006972:	2058      	movs	r0, #88	; 0x58
 8006974:	4622      	mov	r2, r4
 8006976:	2105      	movs	r1, #5
 8006978:	f7fa fcba 	bl	80012f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800697c:	2058      	movs	r0, #88	; 0x58
 800697e:	f7fa fceb 	bl	8001358 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8006982:	b00d      	add	sp, #52	; 0x34
 8006984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006986:	bf00      	nop
 8006988:	40016800 	.word	0x40016800
 800698c:	40021400 	.word	0x40021400
 8006990:	40020000 	.word	0x40020000
 8006994:	40020400 	.word	0x40020400
 8006998:	40021800 	.word	0x40021800
 800699c:	40020800 	.word	0x40020800
 80069a0:	40020c00 	.word	0x40020c00

080069a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80069a4:	b510      	push	{r4, lr}
 80069a6:	4604      	mov	r4, r0
 80069a8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069aa:	2214      	movs	r2, #20
 80069ac:	2100      	movs	r1, #0
 80069ae:	a803      	add	r0, sp, #12
 80069b0:	f000 fbd6 	bl	8007160 <memset>
  if(hspi->Instance==SPI5)
 80069b4:	6822      	ldr	r2, [r4, #0]
 80069b6:	4b13      	ldr	r3, [pc, #76]	; (8006a04 <HAL_SPI_MspInit+0x60>)
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d121      	bne.n	8006a00 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80069bc:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80069c0:	2100      	movs	r1, #0
 80069c2:	9101      	str	r1, [sp, #4]
 80069c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80069c6:	4810      	ldr	r0, [pc, #64]	; (8006a08 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 80069c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80069cc:	645a      	str	r2, [r3, #68]	; 0x44
 80069ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069d0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80069d4:	9201      	str	r2, [sp, #4]
 80069d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80069d8:	9102      	str	r1, [sp, #8]
 80069da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069dc:	f042 0220 	orr.w	r2, r2, #32
 80069e0:	631a      	str	r2, [r3, #48]	; 0x30
 80069e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e4:	f003 0320 	and.w	r3, r3, #32
 80069e8:	9302      	str	r3, [sp, #8]
 80069ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80069ec:	f44f 7360 	mov.w	r3, #896	; 0x380
 80069f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069f2:	2302      	movs	r3, #2
 80069f4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80069f6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80069f8:	2305      	movs	r3, #5
 80069fa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80069fc:	f7fa ff7c 	bl	80018f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8006a00:	b008      	add	sp, #32
 8006a02:	bd10      	pop	{r4, pc}
 8006a04:	40015000 	.word	0x40015000
 8006a08:	40021400 	.word	0x40021400

08006a0c <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI5)
 8006a0c:	6802      	ldr	r2, [r0, #0]
 8006a0e:	4b07      	ldr	r3, [pc, #28]	; (8006a2c <HAL_SPI_MspDeInit+0x20>)
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d109      	bne.n	8006a28 <HAL_SPI_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8006a14:	4a06      	ldr	r2, [pc, #24]	; (8006a30 <HAL_SPI_MspDeInit+0x24>)
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8006a16:	4807      	ldr	r0, [pc, #28]	; (8006a34 <HAL_SPI_MspDeInit+0x28>)
    __HAL_RCC_SPI5_CLK_DISABLE();
 8006a18:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006a1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a1e:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8006a20:	f44f 7160 	mov.w	r1, #896	; 0x380
 8006a24:	f7fb b854 	b.w	8001ad0 <HAL_GPIO_DeInit>
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40015000 	.word	0x40015000
 8006a30:	40023800 	.word	0x40023800
 8006a34:	40021400 	.word	0x40021400

08006a38 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8006a38:	6803      	ldr	r3, [r0, #0]
 8006a3a:	4a11      	ldr	r2, [pc, #68]	; (8006a80 <HAL_TIM_Base_MspInit+0x48>)
 8006a3c:	4293      	cmp	r3, r2
{
 8006a3e:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8006a40:	d10d      	bne.n	8006a5e <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006a42:	2300      	movs	r3, #0
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <HAL_TIM_Base_MspInit+0x4c>)
 8006a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a4a:	f042 0201 	orr.w	r2, r2, #1
 8006a4e:	645a      	str	r2, [r3, #68]	; 0x44
 8006a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006a5a:	b002      	add	sp, #8
 8006a5c:	4770      	bx	lr
  else if(htim_base->Instance==TIM7)
 8006a5e:	4a0a      	ldr	r2, [pc, #40]	; (8006a88 <HAL_TIM_Base_MspInit+0x50>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d1fa      	bne.n	8006a5a <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006a64:	2300      	movs	r3, #0
 8006a66:	9301      	str	r3, [sp, #4]
 8006a68:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <HAL_TIM_Base_MspInit+0x4c>)
 8006a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a6c:	f042 0220 	orr.w	r2, r2, #32
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40
 8006a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a74:	f003 0320 	and.w	r3, r3, #32
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	9b01      	ldr	r3, [sp, #4]
}
 8006a7c:	e7ed      	b.n	8006a5a <HAL_TIM_Base_MspInit+0x22>
 8006a7e:	bf00      	nop
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40023800 	.word	0x40023800
 8006a88:	40001400 	.word	0x40001400

08006a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a90:	2214      	movs	r2, #20
{
 8006a92:	b08a      	sub	sp, #40	; 0x28
 8006a94:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a96:	2100      	movs	r1, #0
 8006a98:	eb0d 0002 	add.w	r0, sp, r2
 8006a9c:	f000 fb60 	bl	8007160 <memset>
  if(huart->Instance==UART5)
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	4a39      	ldr	r2, [pc, #228]	; (8006b88 <HAL_UART_MspInit+0xfc>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d146      	bne.n	8006b36 <HAL_UART_MspInit+0xaa>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8006aa8:	4b38      	ldr	r3, [pc, #224]	; (8006b8c <HAL_UART_MspInit+0x100>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006aaa:	4839      	ldr	r0, [pc, #228]	; (8006b90 <HAL_UART_MspInit+0x104>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8006aac:	2400      	movs	r4, #0
 8006aae:	9400      	str	r4, [sp, #0]
 8006ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ab2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006ab6:	641a      	str	r2, [r3, #64]	; 0x40
 8006ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006abe:	9200      	str	r2, [sp, #0]
 8006ac0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ac2:	9401      	str	r4, [sp, #4]
 8006ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ac6:	f042 0204 	orr.w	r2, r2, #4
 8006aca:	631a      	str	r2, [r3, #48]	; 0x30
 8006acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ace:	f002 0204 	and.w	r2, r2, #4
 8006ad2:	9201      	str	r2, [sp, #4]
 8006ad4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ad6:	9402      	str	r4, [sp, #8]
 8006ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ada:	f042 0208 	orr.w	r2, r2, #8
 8006ade:	631a      	str	r2, [r3, #48]	; 0x30
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	9302      	str	r3, [sp, #8]
 8006ae8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aea:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006af2:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006af4:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006af6:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006af8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006afa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006afc:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b00:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b02:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006b04:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b06:	f7fa fef7 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006b0a:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b0c:	a905      	add	r1, sp, #20
 8006b0e:	4821      	ldr	r0, [pc, #132]	; (8006b94 <HAL_UART_MspInit+0x108>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006b10:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b12:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b16:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b18:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006b1a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b1c:	f7fa feec 	bl	80018f8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8006b20:	2035      	movs	r0, #53	; 0x35
 8006b22:	4622      	mov	r2, r4
 8006b24:	4621      	mov	r1, r4
 8006b26:	f7fa fbe3 	bl	80012f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006b2a:	2035      	movs	r0, #53	; 0x35
 8006b2c:	f7fa fc14 	bl	8001358 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006b30:	b00a      	add	sp, #40	; 0x28
 8006b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(huart->Instance==USART1)
 8006b36:	4a18      	ldr	r2, [pc, #96]	; (8006b98 <HAL_UART_MspInit+0x10c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d1f9      	bne.n	8006b30 <HAL_UART_MspInit+0xa4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006b3c:	4b13      	ldr	r3, [pc, #76]	; (8006b8c <HAL_UART_MspInit+0x100>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b3e:	4817      	ldr	r0, [pc, #92]	; (8006b9c <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8006b40:	2100      	movs	r1, #0
 8006b42:	9103      	str	r1, [sp, #12]
 8006b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b46:	f042 0210 	orr.w	r2, r2, #16
 8006b4a:	645a      	str	r2, [r3, #68]	; 0x44
 8006b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b4e:	f002 0210 	and.w	r2, r2, #16
 8006b52:	9203      	str	r2, [sp, #12]
 8006b54:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b56:	9104      	str	r1, [sp, #16]
 8006b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	631a      	str	r2, [r3, #48]	; 0x30
 8006b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	9304      	str	r3, [sp, #16]
 8006b68:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8006b6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006b6e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b70:	2302      	movs	r3, #2
 8006b72:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b74:	2301      	movs	r3, #1
 8006b76:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b7c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006b7e:	2307      	movs	r3, #7
 8006b80:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b82:	f7fa feb9 	bl	80018f8 <HAL_GPIO_Init>
}
 8006b86:	e7d3      	b.n	8006b30 <HAL_UART_MspInit+0xa4>
 8006b88:	40005000 	.word	0x40005000
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	40020800 	.word	0x40020800
 8006b94:	40020c00 	.word	0x40020c00
 8006b98:	40011000 	.word	0x40011000
 8006b9c:	40020000 	.word	0x40020000

08006ba0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8006ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8006ba6:	2214      	movs	r2, #20
 8006ba8:	2100      	movs	r1, #0
 8006baa:	a801      	add	r0, sp, #4
 8006bac:	f000 fad8 	bl	8007160 <memset>
  if (FMC_Initialized) {
 8006bb0:	4b2b      	ldr	r3, [pc, #172]	; (8006c60 <HAL_SDRAM_MspInit+0xc0>)
 8006bb2:	681c      	ldr	r4, [r3, #0]
 8006bb4:	2c00      	cmp	r4, #0
 8006bb6:	d150      	bne.n	8006c5a <HAL_SDRAM_MspInit+0xba>
  FMC_Initialized = 1;
 8006bb8:	f04f 0801 	mov.w	r8, #1
 8006bbc:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 8006bc0:	4b28      	ldr	r3, [pc, #160]	; (8006c64 <HAL_SDRAM_MspInit+0xc4>)
 8006bc2:	9400      	str	r4, [sp, #0]
 8006bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006bc6:	4828      	ldr	r0, [pc, #160]	; (8006c68 <HAL_SDRAM_MspInit+0xc8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006bc8:	ea42 0208 	orr.w	r2, r2, r8
 8006bcc:	639a      	str	r2, [r3, #56]	; 0x38
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	ea03 0308 	and.w	r3, r3, r8
 8006bd4:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bd6:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bd8:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006bda:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8006bdc:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bde:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8006be0:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006be4:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8006be6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006be8:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006bea:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006bec:	f7fa fe84 	bl	80018f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8006bf0:	a901      	add	r1, sp, #4
 8006bf2:	481e      	ldr	r0, [pc, #120]	; (8006c6c <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8006bf4:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bf8:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bfa:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bfc:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006bfe:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8006c00:	f7fa fe7a 	bl	80018f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8006c04:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006c08:	a901      	add	r1, sp, #4
 8006c0a:	4819      	ldr	r0, [pc, #100]	; (8006c70 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8006c0c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c0e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c10:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c12:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006c14:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006c16:	f7fa fe6f 	bl	80018f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8006c1a:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c1e:	a901      	add	r1, sp, #4
 8006c20:	4814      	ldr	r0, [pc, #80]	; (8006c74 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8006c22:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c24:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c26:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c28:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006c2a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c2c:	f7fa fe64 	bl	80018f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8006c30:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c34:	a901      	add	r1, sp, #4
 8006c36:	4810      	ldr	r0, [pc, #64]	; (8006c78 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8006c38:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c3a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c3c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c3e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006c40:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c42:	f7fa fe59 	bl	80018f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8006c46:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c48:	a901      	add	r1, sp, #4
 8006c4a:	480c      	ldr	r0, [pc, #48]	; (8006c7c <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8006c4c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c4e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c50:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c52:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006c54:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c56:	f7fa fe4f 	bl	80018f8 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006c5a:	b006      	add	sp, #24
 8006c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c60:	200002b4 	.word	0x200002b4
 8006c64:	40023800 	.word	0x40023800
 8006c68:	40021400 	.word	0x40021400
 8006c6c:	40020800 	.word	0x40020800
 8006c70:	40021800 	.word	0x40021800
 8006c74:	40021000 	.word	0x40021000
 8006c78:	40020c00 	.word	0x40020c00
 8006c7c:	40020400 	.word	0x40020400

08006c80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c80:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8006c82:	4601      	mov	r1, r0
{
 8006c84:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8006c86:	2200      	movs	r2, #0
 8006c88:	2036      	movs	r0, #54	; 0x36
 8006c8a:	f7fa fb31 	bl	80012f0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8006c8e:	2036      	movs	r0, #54	; 0x36
 8006c90:	f7fa fb62 	bl	8001358 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006c94:	2500      	movs	r5, #0
 8006c96:	4b15      	ldr	r3, [pc, #84]	; (8006cec <HAL_InitTick+0x6c>)
 8006c98:	9502      	str	r5, [sp, #8]
 8006c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006c9c:	4c14      	ldr	r4, [pc, #80]	; (8006cf0 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006c9e:	f042 0210 	orr.w	r2, r2, #16
 8006ca2:	641a      	str	r2, [r3, #64]	; 0x40
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca6:	f003 0310 	and.w	r3, r3, #16
 8006caa:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006cac:	a901      	add	r1, sp, #4
 8006cae:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006cb0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006cb2:	f7fc f90f 	bl	8002ed4 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006cb6:	f7fc f8ed 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8006cba:	4b0e      	ldr	r3, [pc, #56]	; (8006cf4 <HAL_InitTick+0x74>)
 8006cbc:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8006cbe:	f240 33e7 	movw	r3, #999	; 0x3e7
 8006cc2:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006cc4:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006cc6:	4b0c      	ldr	r3, [pc, #48]	; (8006cf8 <HAL_InitTick+0x78>)
 8006cc8:	fbb0 f0f3 	udiv	r0, r0, r3
 8006ccc:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8006cce:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006cd0:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8006cd2:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cd4:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006cd6:	f7fc feb1 	bl	8003a3c <HAL_TIM_Base_Init>
 8006cda:	b920      	cbnz	r0, 8006ce6 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7fc fd90 	bl	8003802 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8006ce2:	b009      	add	sp, #36	; 0x24
 8006ce4:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	e7fb      	b.n	8006ce2 <HAL_InitTick+0x62>
 8006cea:	bf00      	nop
 8006cec:	40023800 	.word	0x40023800
 8006cf0:	20000718 	.word	0x20000718
 8006cf4:	40001000 	.word	0x40001000
 8006cf8:	000f4240 	.word	0x000f4240

08006cfc <NMI_Handler>:
 8006cfc:	4770      	bx	lr

08006cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006cfe:	e7fe      	b.n	8006cfe <HardFault_Handler>

08006d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d00:	e7fe      	b.n	8006d00 <MemManage_Handler>

08006d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d02:	e7fe      	b.n	8006d02 <BusFault_Handler>

08006d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d04:	e7fe      	b.n	8006d04 <UsageFault_Handler>

08006d06 <SVC_Handler>:
 8006d06:	4770      	bx	lr

08006d08 <DebugMon_Handler>:
 8006d08:	4770      	bx	lr

08006d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006d0a:	4770      	bx	lr

08006d0c <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006d0c:	4801      	ldr	r0, [pc, #4]	; (8006d14 <UART5_IRQHandler+0x8>)
 8006d0e:	f7fd b9af 	b.w	8004070 <HAL_UART_IRQHandler>
 8006d12:	bf00      	nop
 8006d14:	20000560 	.word	0x20000560

08006d18 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006d18:	4801      	ldr	r0, [pc, #4]	; (8006d20 <TIM6_DAC_IRQHandler+0x8>)
 8006d1a:	f7fc bd86 	b.w	800382a <HAL_TIM_IRQHandler>
 8006d1e:	bf00      	nop
 8006d20:	20000718 	.word	0x20000718

08006d24 <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8006d24:	4801      	ldr	r0, [pc, #4]	; (8006d2c <OTG_HS_IRQHandler+0x8>)
 8006d26:	f7fb b869 	b.w	8001dfc <HAL_HCD_IRQHandler>
 8006d2a:	bf00      	nop
 8006d2c:	20000b24 	.word	0x20000b24

08006d30 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8006d30:	4801      	ldr	r0, [pc, #4]	; (8006d38 <LTDC_IRQHandler+0x8>)
 8006d32:	f7fb bd92 	b.w	800285a <HAL_LTDC_IRQHandler>
 8006d36:	bf00      	nop
 8006d38:	200004b8 	.word	0x200004b8

08006d3c <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8006d3c:	4801      	ldr	r0, [pc, #4]	; (8006d44 <DMA2D_IRQHandler+0x8>)
 8006d3e:	f7fa bd06 	b.w	800174e <HAL_DMA2D_IRQHandler>
 8006d42:	bf00      	nop
 8006d44:	20000664 	.word	0x20000664

08006d48 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8006d48:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006d4a:	4b0a      	ldr	r3, [pc, #40]	; (8006d74 <_sbrk+0x2c>)
 8006d4c:	6819      	ldr	r1, [r3, #0]
{
 8006d4e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8006d50:	b909      	cbnz	r1, 8006d56 <_sbrk+0xe>
		heap_end = &end;
 8006d52:	4909      	ldr	r1, [pc, #36]	; (8006d78 <_sbrk+0x30>)
 8006d54:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8006d56:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8006d58:	4669      	mov	r1, sp
 8006d5a:	4402      	add	r2, r0
 8006d5c:	428a      	cmp	r2, r1
 8006d5e:	d906      	bls.n	8006d6e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006d60:	f000 f9c4 	bl	80070ec <__errno>
 8006d64:	230c      	movs	r3, #12
 8006d66:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8006d6e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8006d70:	bd08      	pop	{r3, pc}
 8006d72:	bf00      	nop
 8006d74:	200002b8 	.word	0x200002b8
 8006d78:	20000dec 	.word	0x20000dec

08006d7c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006d7c:	490f      	ldr	r1, [pc, #60]	; (8006dbc <SystemInit+0x40>)
 8006d7e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006d82:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006d8a:	4b0d      	ldr	r3, [pc, #52]	; (8006dc0 <SystemInit+0x44>)
 8006d8c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006d8e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8006d90:	f042 0201 	orr.w	r2, r2, #1
 8006d94:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006d96:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006d9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006da2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006da4:	4a07      	ldr	r2, [pc, #28]	; (8006dc4 <SystemInit+0x48>)
 8006da6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006dae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006db0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006db2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006db6:	608b      	str	r3, [r1, #8]
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	e000ed00 	.word	0xe000ed00
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	24003010 	.word	0x24003010

08006dc8 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006dc8:	2904      	cmp	r1, #4
 8006dca:	d00a      	beq.n	8006de2 <USBH_UserProcess+0x1a>
 8006dcc:	2905      	cmp	r1, #5
 8006dce:	d004      	beq.n	8006dda <USBH_UserProcess+0x12>
 8006dd0:	2902      	cmp	r1, #2
 8006dd2:	d105      	bne.n	8006de0 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006dd4:	4b04      	ldr	r3, [pc, #16]	; (8006de8 <USBH_UserProcess+0x20>)
 8006dd6:	7019      	strb	r1, [r3, #0]
  break;
 8006dd8:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8006dda:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006ddc:	4b02      	ldr	r3, [pc, #8]	; (8006de8 <USBH_UserProcess+0x20>)
 8006dde:	701a      	strb	r2, [r3, #0]
 8006de0:	4770      	bx	lr
 8006de2:	2201      	movs	r2, #1
 8006de4:	e7fa      	b.n	8006ddc <USBH_UserProcess+0x14>
 8006de6:	bf00      	nop
 8006de8:	200002bc 	.word	0x200002bc

08006dec <MX_USB_HOST_Init>:
{
 8006dec:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8006dee:	2200      	movs	r2, #0
 8006df0:	490b      	ldr	r1, [pc, #44]	; (8006e20 <MX_USB_HOST_Init+0x34>)
 8006df2:	480c      	ldr	r0, [pc, #48]	; (8006e24 <MX_USB_HOST_Init+0x38>)
 8006df4:	f7fd ffce 	bl	8004d94 <USBH_Init>
 8006df8:	b108      	cbz	r0, 8006dfe <MX_USB_HOST_Init+0x12>
    Error_Handler();
 8006dfa:	f7ff fc27 	bl	800664c <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 8006dfe:	490a      	ldr	r1, [pc, #40]	; (8006e28 <MX_USB_HOST_Init+0x3c>)
 8006e00:	4808      	ldr	r0, [pc, #32]	; (8006e24 <MX_USB_HOST_Init+0x38>)
 8006e02:	f7fd ffde 	bl	8004dc2 <USBH_RegisterClass>
 8006e06:	b108      	cbz	r0, 8006e0c <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8006e08:	f7ff fc20 	bl	800664c <Error_Handler>
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8006e0c:	4805      	ldr	r0, [pc, #20]	; (8006e24 <MX_USB_HOST_Init+0x38>)
 8006e0e:	f7fe f80b 	bl	8004e28 <USBH_Start>
 8006e12:	b118      	cbz	r0, 8006e1c <MX_USB_HOST_Init+0x30>
}
 8006e14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006e18:	f7ff bc18 	b.w	800664c <Error_Handler>
 8006e1c:	bd08      	pop	{r3, pc}
 8006e1e:	bf00      	nop
 8006e20:	08006dc9 	.word	0x08006dc9
 8006e24:	20000758 	.word	0x20000758
 8006e28:	20000050 	.word	0x20000050

08006e2c <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostHS);
 8006e2c:	4801      	ldr	r0, [pc, #4]	; (8006e34 <MX_USB_HOST_Process+0x8>)
 8006e2e:	f7fe b805 	b.w	8004e3c <USBH_Process>
 8006e32:	bf00      	nop
 8006e34:	20000758 	.word	0x20000758

08006e38 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006e38:	b530      	push	{r4, r5, lr}
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e3e:	2214      	movs	r2, #20
 8006e40:	2100      	movs	r1, #0
 8006e42:	a803      	add	r0, sp, #12
 8006e44:	f000 f98c 	bl	8007160 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 8006e48:	6822      	ldr	r2, [r4, #0]
 8006e4a:	4b1c      	ldr	r3, [pc, #112]	; (8006ebc <HAL_HCD_MspInit+0x84>)
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d132      	bne.n	8006eb6 <HAL_HCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e50:	2500      	movs	r5, #0
 8006e52:	4c1b      	ldr	r4, [pc, #108]	; (8006ec0 <HAL_HCD_MspInit+0x88>)
 8006e54:	9501      	str	r5, [sp, #4]
 8006e56:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e58:	481a      	ldr	r0, [pc, #104]	; (8006ec4 <HAL_HCD_MspInit+0x8c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e5a:	f043 0302 	orr.w	r3, r3, #2
 8006e5e:	6323      	str	r3, [r4, #48]	; 0x30
 8006e60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8006e6a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8006e6e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e70:	2302      	movs	r3, #2
 8006e72:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8006e74:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e76:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8006e7a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e7c:	f7fa fd3c 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8006e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8006e84:	a903      	add	r1, sp, #12
 8006e86:	480f      	ldr	r0, [pc, #60]	; (8006ec4 <HAL_HCD_MspInit+0x8c>)
    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8006e88:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e8a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e8c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8006e8e:	f7fa fd33 	bl	80018f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8006e92:	9502      	str	r5, [sp, #8]
 8006e94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ea2:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8006ea4:	204d      	movs	r0, #77	; 0x4d
 8006ea6:	462a      	mov	r2, r5
 8006ea8:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8006eaa:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8006eac:	f7fa fa20 	bl	80012f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8006eb0:	204d      	movs	r0, #77	; 0x4d
 8006eb2:	f7fa fa51 	bl	8001358 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8006eb6:	b009      	add	sp, #36	; 0x24
 8006eb8:	bd30      	pop	{r4, r5, pc}
 8006eba:	bf00      	nop
 8006ebc:	40040000 	.word	0x40040000
 8006ec0:	40023800 	.word	0x40023800
 8006ec4:	40020400 	.word	0x40020400

08006ec8 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8006ec8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006ecc:	f7fe b8fe 	b.w	80050cc <USBH_LL_IncTimer>

08006ed0 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8006ed0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006ed4:	f7fe b910 	b.w	80050f8 <USBH_LL_Connect>

08006ed8 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8006ed8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006edc:	f7fe b920 	b.w	8005120 <USBH_LL_Disconnect>

08006ee0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006ee0:	4770      	bx	lr

08006ee2 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8006ee2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006ee6:	f7fe b8ff 	b.w	80050e8 <USBH_LL_PortEnabled>

08006eea <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8006eea:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006eee:	f7fe b8ff 	b.w	80050f0 <USBH_LL_PortDisabled>
	...

08006ef4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006ef4:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8006ef6:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
{
 8006efa:	4604      	mov	r4, r0
  if (phost->id == HOST_HS) {
 8006efc:	b9eb      	cbnz	r3, 8006f3a <USBH_LL_Init+0x46>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8006efe:	4810      	ldr	r0, [pc, #64]	; (8006f40 <USBH_LL_Init+0x4c>)
  phost->pData = &hhcd_USB_OTG_HS;

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8006f00:	4a10      	ldr	r2, [pc, #64]	; (8006f44 <USBH_LL_Init+0x50>)
 8006f02:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8006f04:	220c      	movs	r2, #12
 8006f06:	6082      	str	r2, [r0, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8006f08:	2201      	movs	r2, #1
 8006f0a:	60c2      	str	r2, [r0, #12]
  phost->pData = &hhcd_USB_OTG_HS;
 8006f0c:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8006f10:	2202      	movs	r2, #2
  hhcd_USB_OTG_HS.pData = phost;
 8006f12:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8006f16:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8006f18:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8006f1a:	61c3      	str	r3, [r0, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8006f1c:	6203      	str	r3, [r0, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8006f1e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8006f20:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8006f22:	f7fa febe 	bl	8001ca2 <HAL_HCD_Init>
 8006f26:	b108      	cbz	r0, 8006f2c <USBH_LL_Init+0x38>
  {
    Error_Handler( );
 8006f28:	f7ff fb90 	bl	800664c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8006f2c:	4804      	ldr	r0, [pc, #16]	; (8006f40 <USBH_LL_Init+0x4c>)
 8006f2e:	f7fb fab7 	bl	80024a0 <HAL_HCD_GetCurrentFrame>
 8006f32:	4601      	mov	r1, r0
 8006f34:	4620      	mov	r0, r4
 8006f36:	f7fe f8c6 	bl	80050c6 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	bd10      	pop	{r4, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000b24 	.word	0x20000b24
 8006f44:	40040000 	.word	0x40040000

08006f48 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006f48:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8006f4a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8006f4e:	f7fb fa71 	bl	8002434 <HAL_HCD_Start>
 8006f52:	2803      	cmp	r0, #3
 8006f54:	bf9a      	itte	ls
 8006f56:	4b02      	ldrls	r3, [pc, #8]	; (8006f60 <USBH_LL_Start+0x18>)
 8006f58:	5c18      	ldrbls	r0, [r3, r0]
 8006f5a:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8006f5c:	bd08      	pop	{r3, pc}
 8006f5e:	bf00      	nop
 8006f60:	08009830 	.word	0x08009830

08006f64 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006f64:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8006f66:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8006f6a:	f7fb fa79 	bl	8002460 <HAL_HCD_Stop>
 8006f6e:	2803      	cmp	r0, #3
 8006f70:	bf9a      	itte	ls
 8006f72:	4b02      	ldrls	r3, [pc, #8]	; (8006f7c <USBH_LL_Stop+0x18>)
 8006f74:	5c18      	ldrbls	r0, [r3, r0]
 8006f76:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8006f78:	bd08      	pop	{r3, pc}
 8006f7a:	bf00      	nop
 8006f7c:	08009830 	.word	0x08009830

08006f80 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006f80:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006f82:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8006f86:	f7fb fa8e 	bl	80024a6 <HAL_HCD_GetCurrentSpeed>
 8006f8a:	2802      	cmp	r0, #2
 8006f8c:	bf9a      	itte	ls
 8006f8e:	4b02      	ldrls	r3, [pc, #8]	; (8006f98 <USBH_LL_GetSpeed+0x18>)
 8006f90:	5c18      	ldrbls	r0, [r3, r0]
 8006f92:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8006f94:	bd08      	pop	{r3, pc}
 8006f96:	bf00      	nop
 8006f98:	0800982d 	.word	0x0800982d

08006f9c <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8006f9c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8006f9e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8006fa2:	f7fb fa6f 	bl	8002484 <HAL_HCD_ResetPort>
 8006fa6:	2803      	cmp	r0, #3
 8006fa8:	bf9a      	itte	ls
 8006faa:	4b02      	ldrls	r3, [pc, #8]	; (8006fb4 <USBH_LL_ResetPort+0x18>)
 8006fac:	5c18      	ldrbls	r0, [r3, r0]
 8006fae:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8006fb0:	bd08      	pop	{r3, pc}
 8006fb2:	bf00      	nop
 8006fb4:	08009830 	.word	0x08009830

08006fb8 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006fb8:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8006fbc:	f7fb ba6b 	b.w	8002496 <HAL_HCD_HC_GetXferCount>

08006fc0 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006fc2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8006fc6:	9402      	str	r4, [sp, #8]
 8006fc8:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8006fcc:	9401      	str	r4, [sp, #4]
 8006fce:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8006fd2:	9400      	str	r4, [sp, #0]
 8006fd4:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8006fd8:	f7fa fe19 	bl	8001c0e <HAL_HCD_HC_Init>
 8006fdc:	2803      	cmp	r0, #3
 8006fde:	bf9a      	itte	ls
 8006fe0:	4b02      	ldrls	r3, [pc, #8]	; (8006fec <USBH_LL_OpenPipe+0x2c>)
 8006fe2:	5c18      	ldrbls	r0, [r3, r0]
 8006fe4:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8006fe6:	b004      	add	sp, #16
 8006fe8:	bd10      	pop	{r4, pc}
 8006fea:	bf00      	nop
 8006fec:	08009830 	.word	0x08009830

08006ff0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006ff0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006ff2:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8006ff6:	f7fa fe42 	bl	8001c7e <HAL_HCD_HC_Halt>
 8006ffa:	2803      	cmp	r0, #3
 8006ffc:	bf9a      	itte	ls
 8006ffe:	4b02      	ldrls	r3, [pc, #8]	; (8007008 <USBH_LL_ClosePipe+0x18>)
 8007000:	5c18      	ldrbls	r0, [r3, r0]
 8007002:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8007004:	bd08      	pop	{r3, pc}
 8007006:	bf00      	nop
 8007008:	08009830 	.word	0x08009830

0800700c <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800700c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800700e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8007012:	9403      	str	r4, [sp, #12]
 8007014:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8007018:	9402      	str	r4, [sp, #8]
 800701a:	9c07      	ldr	r4, [sp, #28]
 800701c:	9401      	str	r4, [sp, #4]
 800701e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8007022:	9400      	str	r4, [sp, #0]
 8007024:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8007028:	f7fa fe86 	bl	8001d38 <HAL_HCD_HC_SubmitRequest>
 800702c:	2803      	cmp	r0, #3
 800702e:	bf9a      	itte	ls
 8007030:	4b02      	ldrls	r3, [pc, #8]	; (800703c <USBH_LL_SubmitURB+0x30>)
 8007032:	5c18      	ldrbls	r0, [r3, r0]
 8007034:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8007036:	b004      	add	sp, #16
 8007038:	bd10      	pop	{r4, pc}
 800703a:	bf00      	nop
 800703c:	08009830 	.word	0x08009830

08007040 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007040:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8007044:	f7fb ba21 	b.w	800248a <HAL_HCD_HC_GetURBState>

08007048 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007048:	b508      	push	{r3, lr}
  if (phost->id == HOST_HS) {
 800704a:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800704e:	b913      	cbnz	r3, 8007056 <USBH_LL_DriverVBUS+0xe>
    MX_DriverVbusHS(state);
 8007050:	4608      	mov	r0, r1
 8007052:	f000 f817 	bl	8007084 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007056:	20c8      	movs	r0, #200	; 0xc8
 8007058:	f7fa f924 	bl	80012a4 <HAL_Delay>
  return USBH_OK;
}
 800705c:	2000      	movs	r0, #0
 800705e:	bd08      	pop	{r3, pc}

08007060 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007060:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 8007064:	2328      	movs	r3, #40	; 0x28
 8007066:	fb03 0101 	mla	r1, r3, r1, r0
 800706a:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800706e:	b11b      	cbz	r3, 8007078 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007070:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8007074:	2000      	movs	r0, #0
 8007076:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8007078:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 800707c:	e7fa      	b.n	8007074 <USBH_LL_SetToggle+0x14>

0800707e <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800707e:	f7fa b911 	b.w	80012a4 <HAL_Delay>
	...

08007084 <MX_DriverVbusHS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8007084:	fab0 f280 	clz	r2, r0
 8007088:	0952      	lsrs	r2, r2, #5
 800708a:	2110      	movs	r1, #16
 800708c:	4801      	ldr	r0, [pc, #4]	; (8007094 <MX_DriverVbusHS+0x10>)
 800708e:	f7fa bdb9 	b.w	8001c04 <HAL_GPIO_WritePin>
 8007092:	bf00      	nop
 8007094:	40020800 	.word	0x40020800

08007098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8007098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80070d0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800709c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800709e:	e003      	b.n	80070a8 <LoopCopyDataInit>

080070a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80070a0:	4b0c      	ldr	r3, [pc, #48]	; (80070d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80070a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80070a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80070a6:	3104      	adds	r1, #4

080070a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80070a8:	480b      	ldr	r0, [pc, #44]	; (80070d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80070aa:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80070ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80070ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80070b0:	d3f6      	bcc.n	80070a0 <CopyDataInit>
  ldr  r2, =_sbss
 80070b2:	4a0b      	ldr	r2, [pc, #44]	; (80070e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80070b4:	e002      	b.n	80070bc <LoopFillZerobss>

080070b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80070b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80070b8:	f842 3b04 	str.w	r3, [r2], #4

080070bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80070bc:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80070be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80070c0:	d3f9      	bcc.n	80070b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80070c2:	f7ff fe5b 	bl	8006d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80070c6:	f000 f817 	bl	80070f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80070ca:	f7fe fcb5 	bl	8005a38 <main>
  bx  lr    
 80070ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80070d0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80070d4:	08009844 	.word	0x08009844
  ldr  r0, =_sdata
 80070d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80070dc:	200000dc 	.word	0x200000dc
  ldr  r2, =_sbss
 80070e0:	200000dc 	.word	0x200000dc
  ldr  r3, = _ebss
 80070e4:	20000dec 	.word	0x20000dec

080070e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80070e8:	e7fe      	b.n	80070e8 <ADC_IRQHandler>
	...

080070ec <__errno>:
 80070ec:	4b01      	ldr	r3, [pc, #4]	; (80070f4 <__errno+0x8>)
 80070ee:	6818      	ldr	r0, [r3, #0]
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	20000078 	.word	0x20000078

080070f8 <__libc_init_array>:
 80070f8:	b570      	push	{r4, r5, r6, lr}
 80070fa:	4e0d      	ldr	r6, [pc, #52]	; (8007130 <__libc_init_array+0x38>)
 80070fc:	4c0d      	ldr	r4, [pc, #52]	; (8007134 <__libc_init_array+0x3c>)
 80070fe:	1ba4      	subs	r4, r4, r6
 8007100:	10a4      	asrs	r4, r4, #2
 8007102:	2500      	movs	r5, #0
 8007104:	42a5      	cmp	r5, r4
 8007106:	d109      	bne.n	800711c <__libc_init_array+0x24>
 8007108:	4e0b      	ldr	r6, [pc, #44]	; (8007138 <__libc_init_array+0x40>)
 800710a:	4c0c      	ldr	r4, [pc, #48]	; (800713c <__libc_init_array+0x44>)
 800710c:	f000 f918 	bl	8007340 <_init>
 8007110:	1ba4      	subs	r4, r4, r6
 8007112:	10a4      	asrs	r4, r4, #2
 8007114:	2500      	movs	r5, #0
 8007116:	42a5      	cmp	r5, r4
 8007118:	d105      	bne.n	8007126 <__libc_init_array+0x2e>
 800711a:	bd70      	pop	{r4, r5, r6, pc}
 800711c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007120:	4798      	blx	r3
 8007122:	3501      	adds	r5, #1
 8007124:	e7ee      	b.n	8007104 <__libc_init_array+0xc>
 8007126:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800712a:	4798      	blx	r3
 800712c:	3501      	adds	r5, #1
 800712e:	e7f2      	b.n	8007116 <__libc_init_array+0x1e>
 8007130:	0800983c 	.word	0x0800983c
 8007134:	0800983c 	.word	0x0800983c
 8007138:	0800983c 	.word	0x0800983c
 800713c:	08009840 	.word	0x08009840

08007140 <malloc>:
 8007140:	4b02      	ldr	r3, [pc, #8]	; (800714c <malloc+0xc>)
 8007142:	4601      	mov	r1, r0
 8007144:	6818      	ldr	r0, [r3, #0]
 8007146:	f000 b861 	b.w	800720c <_malloc_r>
 800714a:	bf00      	nop
 800714c:	20000078 	.word	0x20000078

08007150 <free>:
 8007150:	4b02      	ldr	r3, [pc, #8]	; (800715c <free+0xc>)
 8007152:	4601      	mov	r1, r0
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	f000 b80b 	b.w	8007170 <_free_r>
 800715a:	bf00      	nop
 800715c:	20000078 	.word	0x20000078

08007160 <memset>:
 8007160:	4402      	add	r2, r0
 8007162:	4603      	mov	r3, r0
 8007164:	4293      	cmp	r3, r2
 8007166:	d100      	bne.n	800716a <memset+0xa>
 8007168:	4770      	bx	lr
 800716a:	f803 1b01 	strb.w	r1, [r3], #1
 800716e:	e7f9      	b.n	8007164 <memset+0x4>

08007170 <_free_r>:
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	4605      	mov	r5, r0
 8007174:	2900      	cmp	r1, #0
 8007176:	d045      	beq.n	8007204 <_free_r+0x94>
 8007178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800717c:	1f0c      	subs	r4, r1, #4
 800717e:	2b00      	cmp	r3, #0
 8007180:	bfb8      	it	lt
 8007182:	18e4      	addlt	r4, r4, r3
 8007184:	f000 f8da 	bl	800733c <__malloc_lock>
 8007188:	4a1f      	ldr	r2, [pc, #124]	; (8007208 <_free_r+0x98>)
 800718a:	6813      	ldr	r3, [r2, #0]
 800718c:	4610      	mov	r0, r2
 800718e:	b933      	cbnz	r3, 800719e <_free_r+0x2e>
 8007190:	6063      	str	r3, [r4, #4]
 8007192:	6014      	str	r4, [r2, #0]
 8007194:	4628      	mov	r0, r5
 8007196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800719a:	f000 b8d0 	b.w	800733e <__malloc_unlock>
 800719e:	42a3      	cmp	r3, r4
 80071a0:	d90c      	bls.n	80071bc <_free_r+0x4c>
 80071a2:	6821      	ldr	r1, [r4, #0]
 80071a4:	1862      	adds	r2, r4, r1
 80071a6:	4293      	cmp	r3, r2
 80071a8:	bf04      	itt	eq
 80071aa:	681a      	ldreq	r2, [r3, #0]
 80071ac:	685b      	ldreq	r3, [r3, #4]
 80071ae:	6063      	str	r3, [r4, #4]
 80071b0:	bf04      	itt	eq
 80071b2:	1852      	addeq	r2, r2, r1
 80071b4:	6022      	streq	r2, [r4, #0]
 80071b6:	6004      	str	r4, [r0, #0]
 80071b8:	e7ec      	b.n	8007194 <_free_r+0x24>
 80071ba:	4613      	mov	r3, r2
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	b10a      	cbz	r2, 80071c4 <_free_r+0x54>
 80071c0:	42a2      	cmp	r2, r4
 80071c2:	d9fa      	bls.n	80071ba <_free_r+0x4a>
 80071c4:	6819      	ldr	r1, [r3, #0]
 80071c6:	1858      	adds	r0, r3, r1
 80071c8:	42a0      	cmp	r0, r4
 80071ca:	d10b      	bne.n	80071e4 <_free_r+0x74>
 80071cc:	6820      	ldr	r0, [r4, #0]
 80071ce:	4401      	add	r1, r0
 80071d0:	1858      	adds	r0, r3, r1
 80071d2:	4282      	cmp	r2, r0
 80071d4:	6019      	str	r1, [r3, #0]
 80071d6:	d1dd      	bne.n	8007194 <_free_r+0x24>
 80071d8:	6810      	ldr	r0, [r2, #0]
 80071da:	6852      	ldr	r2, [r2, #4]
 80071dc:	605a      	str	r2, [r3, #4]
 80071de:	4401      	add	r1, r0
 80071e0:	6019      	str	r1, [r3, #0]
 80071e2:	e7d7      	b.n	8007194 <_free_r+0x24>
 80071e4:	d902      	bls.n	80071ec <_free_r+0x7c>
 80071e6:	230c      	movs	r3, #12
 80071e8:	602b      	str	r3, [r5, #0]
 80071ea:	e7d3      	b.n	8007194 <_free_r+0x24>
 80071ec:	6820      	ldr	r0, [r4, #0]
 80071ee:	1821      	adds	r1, r4, r0
 80071f0:	428a      	cmp	r2, r1
 80071f2:	bf04      	itt	eq
 80071f4:	6811      	ldreq	r1, [r2, #0]
 80071f6:	6852      	ldreq	r2, [r2, #4]
 80071f8:	6062      	str	r2, [r4, #4]
 80071fa:	bf04      	itt	eq
 80071fc:	1809      	addeq	r1, r1, r0
 80071fe:	6021      	streq	r1, [r4, #0]
 8007200:	605c      	str	r4, [r3, #4]
 8007202:	e7c7      	b.n	8007194 <_free_r+0x24>
 8007204:	bd38      	pop	{r3, r4, r5, pc}
 8007206:	bf00      	nop
 8007208:	200002c0 	.word	0x200002c0

0800720c <_malloc_r>:
 800720c:	b570      	push	{r4, r5, r6, lr}
 800720e:	1ccd      	adds	r5, r1, #3
 8007210:	f025 0503 	bic.w	r5, r5, #3
 8007214:	3508      	adds	r5, #8
 8007216:	2d0c      	cmp	r5, #12
 8007218:	bf38      	it	cc
 800721a:	250c      	movcc	r5, #12
 800721c:	2d00      	cmp	r5, #0
 800721e:	4606      	mov	r6, r0
 8007220:	db01      	blt.n	8007226 <_malloc_r+0x1a>
 8007222:	42a9      	cmp	r1, r5
 8007224:	d903      	bls.n	800722e <_malloc_r+0x22>
 8007226:	230c      	movs	r3, #12
 8007228:	6033      	str	r3, [r6, #0]
 800722a:	2000      	movs	r0, #0
 800722c:	bd70      	pop	{r4, r5, r6, pc}
 800722e:	f000 f885 	bl	800733c <__malloc_lock>
 8007232:	4a23      	ldr	r2, [pc, #140]	; (80072c0 <_malloc_r+0xb4>)
 8007234:	6814      	ldr	r4, [r2, #0]
 8007236:	4621      	mov	r1, r4
 8007238:	b991      	cbnz	r1, 8007260 <_malloc_r+0x54>
 800723a:	4c22      	ldr	r4, [pc, #136]	; (80072c4 <_malloc_r+0xb8>)
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	b91b      	cbnz	r3, 8007248 <_malloc_r+0x3c>
 8007240:	4630      	mov	r0, r6
 8007242:	f000 f841 	bl	80072c8 <_sbrk_r>
 8007246:	6020      	str	r0, [r4, #0]
 8007248:	4629      	mov	r1, r5
 800724a:	4630      	mov	r0, r6
 800724c:	f000 f83c 	bl	80072c8 <_sbrk_r>
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	d126      	bne.n	80072a2 <_malloc_r+0x96>
 8007254:	230c      	movs	r3, #12
 8007256:	6033      	str	r3, [r6, #0]
 8007258:	4630      	mov	r0, r6
 800725a:	f000 f870 	bl	800733e <__malloc_unlock>
 800725e:	e7e4      	b.n	800722a <_malloc_r+0x1e>
 8007260:	680b      	ldr	r3, [r1, #0]
 8007262:	1b5b      	subs	r3, r3, r5
 8007264:	d41a      	bmi.n	800729c <_malloc_r+0x90>
 8007266:	2b0b      	cmp	r3, #11
 8007268:	d90f      	bls.n	800728a <_malloc_r+0x7e>
 800726a:	600b      	str	r3, [r1, #0]
 800726c:	50cd      	str	r5, [r1, r3]
 800726e:	18cc      	adds	r4, r1, r3
 8007270:	4630      	mov	r0, r6
 8007272:	f000 f864 	bl	800733e <__malloc_unlock>
 8007276:	f104 000b 	add.w	r0, r4, #11
 800727a:	1d23      	adds	r3, r4, #4
 800727c:	f020 0007 	bic.w	r0, r0, #7
 8007280:	1ac3      	subs	r3, r0, r3
 8007282:	d01b      	beq.n	80072bc <_malloc_r+0xb0>
 8007284:	425a      	negs	r2, r3
 8007286:	50e2      	str	r2, [r4, r3]
 8007288:	bd70      	pop	{r4, r5, r6, pc}
 800728a:	428c      	cmp	r4, r1
 800728c:	bf0d      	iteet	eq
 800728e:	6863      	ldreq	r3, [r4, #4]
 8007290:	684b      	ldrne	r3, [r1, #4]
 8007292:	6063      	strne	r3, [r4, #4]
 8007294:	6013      	streq	r3, [r2, #0]
 8007296:	bf18      	it	ne
 8007298:	460c      	movne	r4, r1
 800729a:	e7e9      	b.n	8007270 <_malloc_r+0x64>
 800729c:	460c      	mov	r4, r1
 800729e:	6849      	ldr	r1, [r1, #4]
 80072a0:	e7ca      	b.n	8007238 <_malloc_r+0x2c>
 80072a2:	1cc4      	adds	r4, r0, #3
 80072a4:	f024 0403 	bic.w	r4, r4, #3
 80072a8:	42a0      	cmp	r0, r4
 80072aa:	d005      	beq.n	80072b8 <_malloc_r+0xac>
 80072ac:	1a21      	subs	r1, r4, r0
 80072ae:	4630      	mov	r0, r6
 80072b0:	f000 f80a 	bl	80072c8 <_sbrk_r>
 80072b4:	3001      	adds	r0, #1
 80072b6:	d0cd      	beq.n	8007254 <_malloc_r+0x48>
 80072b8:	6025      	str	r5, [r4, #0]
 80072ba:	e7d9      	b.n	8007270 <_malloc_r+0x64>
 80072bc:	bd70      	pop	{r4, r5, r6, pc}
 80072be:	bf00      	nop
 80072c0:	200002c0 	.word	0x200002c0
 80072c4:	200002c4 	.word	0x200002c4

080072c8 <_sbrk_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	4c06      	ldr	r4, [pc, #24]	; (80072e4 <_sbrk_r+0x1c>)
 80072cc:	2300      	movs	r3, #0
 80072ce:	4605      	mov	r5, r0
 80072d0:	4608      	mov	r0, r1
 80072d2:	6023      	str	r3, [r4, #0]
 80072d4:	f7ff fd38 	bl	8006d48 <_sbrk>
 80072d8:	1c43      	adds	r3, r0, #1
 80072da:	d102      	bne.n	80072e2 <_sbrk_r+0x1a>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	b103      	cbz	r3, 80072e2 <_sbrk_r+0x1a>
 80072e0:	602b      	str	r3, [r5, #0]
 80072e2:	bd38      	pop	{r3, r4, r5, pc}
 80072e4:	20000de8 	.word	0x20000de8

080072e8 <strcat>:
 80072e8:	b510      	push	{r4, lr}
 80072ea:	4602      	mov	r2, r0
 80072ec:	4613      	mov	r3, r2
 80072ee:	3201      	adds	r2, #1
 80072f0:	781c      	ldrb	r4, [r3, #0]
 80072f2:	2c00      	cmp	r4, #0
 80072f4:	d1fa      	bne.n	80072ec <strcat+0x4>
 80072f6:	3b01      	subs	r3, #1
 80072f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007300:	2a00      	cmp	r2, #0
 8007302:	d1f9      	bne.n	80072f8 <strcat+0x10>
 8007304:	bd10      	pop	{r4, pc}

08007306 <strstr>:
 8007306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007308:	7803      	ldrb	r3, [r0, #0]
 800730a:	b133      	cbz	r3, 800731a <strstr+0x14>
 800730c:	4603      	mov	r3, r0
 800730e:	4618      	mov	r0, r3
 8007310:	1c5e      	adds	r6, r3, #1
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	b933      	cbnz	r3, 8007324 <strstr+0x1e>
 8007316:	4618      	mov	r0, r3
 8007318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800731a:	780b      	ldrb	r3, [r1, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	bf18      	it	ne
 8007320:	2000      	movne	r0, #0
 8007322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007324:	1e4d      	subs	r5, r1, #1
 8007326:	1e44      	subs	r4, r0, #1
 8007328:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800732c:	2a00      	cmp	r2, #0
 800732e:	d0f3      	beq.n	8007318 <strstr+0x12>
 8007330:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8007334:	4297      	cmp	r7, r2
 8007336:	4633      	mov	r3, r6
 8007338:	d0f6      	beq.n	8007328 <strstr+0x22>
 800733a:	e7e8      	b.n	800730e <strstr+0x8>

0800733c <__malloc_lock>:
 800733c:	4770      	bx	lr

0800733e <__malloc_unlock>:
 800733e:	4770      	bx	lr

08007340 <_init>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	bf00      	nop
 8007344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007346:	bc08      	pop	{r3}
 8007348:	469e      	mov	lr, r3
 800734a:	4770      	bx	lr

0800734c <_fini>:
 800734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734e:	bf00      	nop
 8007350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007352:	bc08      	pop	{r3}
 8007354:	469e      	mov	lr, r3
 8007356:	4770      	bx	lr
